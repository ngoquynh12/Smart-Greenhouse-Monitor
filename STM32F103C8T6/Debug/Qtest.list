
Qtest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000975c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c0c  08009870  08009870  0000a870  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a47c  0800a47c  0000c1ec  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a47c  0800a47c  0000b47c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a484  0800a484  0000c1ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a484  0800a484  0000b484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a488  0800a488  0000b488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  0800a48c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000754  200001ec  0800a678  0000c1ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000940  0800a678  0000c940  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c1ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012346  00000000  00000000  0000c215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b02  00000000  00000000  0001e55b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001240  00000000  00000000  00021060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e5c  00000000  00000000  000222a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a28b  00000000  00000000  000230fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015e9b  00000000  00000000  0003d387  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094294  00000000  00000000  00053222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e74b6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006100  00000000  00000000  000e74fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  000ed5fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001ec 	.word	0x200001ec
 800012c:	00000000 	.word	0x00000000
 8000130:	08009854 	.word	0x08009854

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f0 	.word	0x200001f0
 800014c:	08009854 	.word	0x08009854

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	@ 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_frsub>:
 8000adc:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000ae0:	e002      	b.n	8000ae8 <__addsf3>
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_fsub>:
 8000ae4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000ae8 <__addsf3>:
 8000ae8:	0042      	lsls	r2, r0, #1
 8000aea:	bf1f      	itttt	ne
 8000aec:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000af0:	ea92 0f03 	teqne	r2, r3
 8000af4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000af8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000afc:	d06a      	beq.n	8000bd4 <__addsf3+0xec>
 8000afe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b02:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b06:	bfc1      	itttt	gt
 8000b08:	18d2      	addgt	r2, r2, r3
 8000b0a:	4041      	eorgt	r1, r0
 8000b0c:	4048      	eorgt	r0, r1
 8000b0e:	4041      	eorgt	r1, r0
 8000b10:	bfb8      	it	lt
 8000b12:	425b      	neglt	r3, r3
 8000b14:	2b19      	cmp	r3, #25
 8000b16:	bf88      	it	hi
 8000b18:	4770      	bxhi	lr
 8000b1a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b1e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b22:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b26:	bf18      	it	ne
 8000b28:	4240      	negne	r0, r0
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b32:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b36:	bf18      	it	ne
 8000b38:	4249      	negne	r1, r1
 8000b3a:	ea92 0f03 	teq	r2, r3
 8000b3e:	d03f      	beq.n	8000bc0 <__addsf3+0xd8>
 8000b40:	f1a2 0201 	sub.w	r2, r2, #1
 8000b44:	fa41 fc03 	asr.w	ip, r1, r3
 8000b48:	eb10 000c 	adds.w	r0, r0, ip
 8000b4c:	f1c3 0320 	rsb	r3, r3, #32
 8000b50:	fa01 f103 	lsl.w	r1, r1, r3
 8000b54:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b58:	d502      	bpl.n	8000b60 <__addsf3+0x78>
 8000b5a:	4249      	negs	r1, r1
 8000b5c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b60:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b64:	d313      	bcc.n	8000b8e <__addsf3+0xa6>
 8000b66:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b6a:	d306      	bcc.n	8000b7a <__addsf3+0x92>
 8000b6c:	0840      	lsrs	r0, r0, #1
 8000b6e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b72:	f102 0201 	add.w	r2, r2, #1
 8000b76:	2afe      	cmp	r2, #254	@ 0xfe
 8000b78:	d251      	bcs.n	8000c1e <__addsf3+0x136>
 8000b7a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b82:	bf08      	it	eq
 8000b84:	f020 0001 	biceq.w	r0, r0, #1
 8000b88:	ea40 0003 	orr.w	r0, r0, r3
 8000b8c:	4770      	bx	lr
 8000b8e:	0049      	lsls	r1, r1, #1
 8000b90:	eb40 0000 	adc.w	r0, r0, r0
 8000b94:	3a01      	subs	r2, #1
 8000b96:	bf28      	it	cs
 8000b98:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b9c:	d2ed      	bcs.n	8000b7a <__addsf3+0x92>
 8000b9e:	fab0 fc80 	clz	ip, r0
 8000ba2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ba6:	ebb2 020c 	subs.w	r2, r2, ip
 8000baa:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bae:	bfaa      	itet	ge
 8000bb0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bb4:	4252      	neglt	r2, r2
 8000bb6:	4318      	orrge	r0, r3
 8000bb8:	bfbc      	itt	lt
 8000bba:	40d0      	lsrlt	r0, r2
 8000bbc:	4318      	orrlt	r0, r3
 8000bbe:	4770      	bx	lr
 8000bc0:	f092 0f00 	teq	r2, #0
 8000bc4:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000bc8:	bf06      	itte	eq
 8000bca:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000bce:	3201      	addeq	r2, #1
 8000bd0:	3b01      	subne	r3, #1
 8000bd2:	e7b5      	b.n	8000b40 <__addsf3+0x58>
 8000bd4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bd8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bdc:	bf18      	it	ne
 8000bde:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000be2:	d021      	beq.n	8000c28 <__addsf3+0x140>
 8000be4:	ea92 0f03 	teq	r2, r3
 8000be8:	d004      	beq.n	8000bf4 <__addsf3+0x10c>
 8000bea:	f092 0f00 	teq	r2, #0
 8000bee:	bf08      	it	eq
 8000bf0:	4608      	moveq	r0, r1
 8000bf2:	4770      	bx	lr
 8000bf4:	ea90 0f01 	teq	r0, r1
 8000bf8:	bf1c      	itt	ne
 8000bfa:	2000      	movne	r0, #0
 8000bfc:	4770      	bxne	lr
 8000bfe:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c02:	d104      	bne.n	8000c0e <__addsf3+0x126>
 8000c04:	0040      	lsls	r0, r0, #1
 8000c06:	bf28      	it	cs
 8000c08:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c0c:	4770      	bx	lr
 8000c0e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c12:	bf3c      	itt	cc
 8000c14:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c18:	4770      	bxcc	lr
 8000c1a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c1e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c22:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c26:	4770      	bx	lr
 8000c28:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c2c:	bf16      	itet	ne
 8000c2e:	4608      	movne	r0, r1
 8000c30:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c34:	4601      	movne	r1, r0
 8000c36:	0242      	lsls	r2, r0, #9
 8000c38:	bf06      	itte	eq
 8000c3a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c3e:	ea90 0f01 	teqeq	r0, r1
 8000c42:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_ui2f>:
 8000c48:	f04f 0300 	mov.w	r3, #0
 8000c4c:	e004      	b.n	8000c58 <__aeabi_i2f+0x8>
 8000c4e:	bf00      	nop

08000c50 <__aeabi_i2f>:
 8000c50:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c54:	bf48      	it	mi
 8000c56:	4240      	negmi	r0, r0
 8000c58:	ea5f 0c00 	movs.w	ip, r0
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c64:	4601      	mov	r1, r0
 8000c66:	f04f 0000 	mov.w	r0, #0
 8000c6a:	e01c      	b.n	8000ca6 <__aeabi_l2f+0x2a>

08000c6c <__aeabi_ul2f>:
 8000c6c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c70:	bf08      	it	eq
 8000c72:	4770      	bxeq	lr
 8000c74:	f04f 0300 	mov.w	r3, #0
 8000c78:	e00a      	b.n	8000c90 <__aeabi_l2f+0x14>
 8000c7a:	bf00      	nop

08000c7c <__aeabi_l2f>:
 8000c7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c80:	bf08      	it	eq
 8000c82:	4770      	bxeq	lr
 8000c84:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c88:	d502      	bpl.n	8000c90 <__aeabi_l2f+0x14>
 8000c8a:	4240      	negs	r0, r0
 8000c8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c90:	ea5f 0c01 	movs.w	ip, r1
 8000c94:	bf02      	ittt	eq
 8000c96:	4684      	moveq	ip, r0
 8000c98:	4601      	moveq	r1, r0
 8000c9a:	2000      	moveq	r0, #0
 8000c9c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000ca0:	bf08      	it	eq
 8000ca2:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000ca6:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000caa:	fabc f28c 	clz	r2, ip
 8000cae:	3a08      	subs	r2, #8
 8000cb0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cb4:	db10      	blt.n	8000cd8 <__aeabi_l2f+0x5c>
 8000cb6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cba:	4463      	add	r3, ip
 8000cbc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cc0:	f1c2 0220 	rsb	r2, r2, #32
 8000cc4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000cc8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ccc:	eb43 0002 	adc.w	r0, r3, r2
 8000cd0:	bf08      	it	eq
 8000cd2:	f020 0001 	biceq.w	r0, r0, #1
 8000cd6:	4770      	bx	lr
 8000cd8:	f102 0220 	add.w	r2, r2, #32
 8000cdc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ce0:	f1c2 0220 	rsb	r2, r2, #32
 8000ce4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ce8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cec:	eb43 0002 	adc.w	r0, r3, r2
 8000cf0:	bf08      	it	eq
 8000cf2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_fmul>:
 8000cf8:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000cfc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d00:	bf1e      	ittt	ne
 8000d02:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d06:	ea92 0f0c 	teqne	r2, ip
 8000d0a:	ea93 0f0c 	teqne	r3, ip
 8000d0e:	d06f      	beq.n	8000df0 <__aeabi_fmul+0xf8>
 8000d10:	441a      	add	r2, r3
 8000d12:	ea80 0c01 	eor.w	ip, r0, r1
 8000d16:	0240      	lsls	r0, r0, #9
 8000d18:	bf18      	it	ne
 8000d1a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d1e:	d01e      	beq.n	8000d5e <__aeabi_fmul+0x66>
 8000d20:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d24:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d28:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d2c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d30:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d34:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d38:	bf3e      	ittt	cc
 8000d3a:	0049      	lslcc	r1, r1, #1
 8000d3c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d40:	005b      	lslcc	r3, r3, #1
 8000d42:	ea40 0001 	orr.w	r0, r0, r1
 8000d46:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d4a:	2afd      	cmp	r2, #253	@ 0xfd
 8000d4c:	d81d      	bhi.n	8000d8a <__aeabi_fmul+0x92>
 8000d4e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d52:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d56:	bf08      	it	eq
 8000d58:	f020 0001 	biceq.w	r0, r0, #1
 8000d5c:	4770      	bx	lr
 8000d5e:	f090 0f00 	teq	r0, #0
 8000d62:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d66:	bf08      	it	eq
 8000d68:	0249      	lsleq	r1, r1, #9
 8000d6a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d6e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d72:	3a7f      	subs	r2, #127	@ 0x7f
 8000d74:	bfc2      	ittt	gt
 8000d76:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d7a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d7e:	4770      	bxgt	lr
 8000d80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d84:	f04f 0300 	mov.w	r3, #0
 8000d88:	3a01      	subs	r2, #1
 8000d8a:	dc5d      	bgt.n	8000e48 <__aeabi_fmul+0x150>
 8000d8c:	f112 0f19 	cmn.w	r2, #25
 8000d90:	bfdc      	itt	le
 8000d92:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d96:	4770      	bxle	lr
 8000d98:	f1c2 0200 	rsb	r2, r2, #0
 8000d9c:	0041      	lsls	r1, r0, #1
 8000d9e:	fa21 f102 	lsr.w	r1, r1, r2
 8000da2:	f1c2 0220 	rsb	r2, r2, #32
 8000da6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000daa:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dae:	f140 0000 	adc.w	r0, r0, #0
 8000db2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000db6:	bf08      	it	eq
 8000db8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dbc:	4770      	bx	lr
 8000dbe:	f092 0f00 	teq	r2, #0
 8000dc2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000dc6:	bf02      	ittt	eq
 8000dc8:	0040      	lsleq	r0, r0, #1
 8000dca:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000dce:	3a01      	subeq	r2, #1
 8000dd0:	d0f9      	beq.n	8000dc6 <__aeabi_fmul+0xce>
 8000dd2:	ea40 000c 	orr.w	r0, r0, ip
 8000dd6:	f093 0f00 	teq	r3, #0
 8000dda:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000dde:	bf02      	ittt	eq
 8000de0:	0049      	lsleq	r1, r1, #1
 8000de2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000de6:	3b01      	subeq	r3, #1
 8000de8:	d0f9      	beq.n	8000dde <__aeabi_fmul+0xe6>
 8000dea:	ea41 010c 	orr.w	r1, r1, ip
 8000dee:	e78f      	b.n	8000d10 <__aeabi_fmul+0x18>
 8000df0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000df4:	ea92 0f0c 	teq	r2, ip
 8000df8:	bf18      	it	ne
 8000dfa:	ea93 0f0c 	teqne	r3, ip
 8000dfe:	d00a      	beq.n	8000e16 <__aeabi_fmul+0x11e>
 8000e00:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e04:	bf18      	it	ne
 8000e06:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e0a:	d1d8      	bne.n	8000dbe <__aeabi_fmul+0xc6>
 8000e0c:	ea80 0001 	eor.w	r0, r0, r1
 8000e10:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e14:	4770      	bx	lr
 8000e16:	f090 0f00 	teq	r0, #0
 8000e1a:	bf17      	itett	ne
 8000e1c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e20:	4608      	moveq	r0, r1
 8000e22:	f091 0f00 	teqne	r1, #0
 8000e26:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e2a:	d014      	beq.n	8000e56 <__aeabi_fmul+0x15e>
 8000e2c:	ea92 0f0c 	teq	r2, ip
 8000e30:	d101      	bne.n	8000e36 <__aeabi_fmul+0x13e>
 8000e32:	0242      	lsls	r2, r0, #9
 8000e34:	d10f      	bne.n	8000e56 <__aeabi_fmul+0x15e>
 8000e36:	ea93 0f0c 	teq	r3, ip
 8000e3a:	d103      	bne.n	8000e44 <__aeabi_fmul+0x14c>
 8000e3c:	024b      	lsls	r3, r1, #9
 8000e3e:	bf18      	it	ne
 8000e40:	4608      	movne	r0, r1
 8000e42:	d108      	bne.n	8000e56 <__aeabi_fmul+0x15e>
 8000e44:	ea80 0001 	eor.w	r0, r0, r1
 8000e48:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e54:	4770      	bx	lr
 8000e56:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e5a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e5e:	4770      	bx	lr

08000e60 <__aeabi_fdiv>:
 8000e60:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e64:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e68:	bf1e      	ittt	ne
 8000e6a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e6e:	ea92 0f0c 	teqne	r2, ip
 8000e72:	ea93 0f0c 	teqne	r3, ip
 8000e76:	d069      	beq.n	8000f4c <__aeabi_fdiv+0xec>
 8000e78:	eba2 0203 	sub.w	r2, r2, r3
 8000e7c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e80:	0249      	lsls	r1, r1, #9
 8000e82:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e86:	d037      	beq.n	8000ef8 <__aeabi_fdiv+0x98>
 8000e88:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e8c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e90:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e94:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e98:	428b      	cmp	r3, r1
 8000e9a:	bf38      	it	cc
 8000e9c:	005b      	lslcc	r3, r3, #1
 8000e9e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000ea2:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	bf24      	itt	cs
 8000eaa:	1a5b      	subcs	r3, r3, r1
 8000eac:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eb0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000eb4:	bf24      	itt	cs
 8000eb6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eba:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ebe:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ec2:	bf24      	itt	cs
 8000ec4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ec8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ecc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ed0:	bf24      	itt	cs
 8000ed2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ed6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eda:	011b      	lsls	r3, r3, #4
 8000edc:	bf18      	it	ne
 8000ede:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ee2:	d1e0      	bne.n	8000ea6 <__aeabi_fdiv+0x46>
 8000ee4:	2afd      	cmp	r2, #253	@ 0xfd
 8000ee6:	f63f af50 	bhi.w	8000d8a <__aeabi_fmul+0x92>
 8000eea:	428b      	cmp	r3, r1
 8000eec:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ef0:	bf08      	it	eq
 8000ef2:	f020 0001 	biceq.w	r0, r0, #1
 8000ef6:	4770      	bx	lr
 8000ef8:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000efc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f00:	327f      	adds	r2, #127	@ 0x7f
 8000f02:	bfc2      	ittt	gt
 8000f04:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f08:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f0c:	4770      	bxgt	lr
 8000f0e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f12:	f04f 0300 	mov.w	r3, #0
 8000f16:	3a01      	subs	r2, #1
 8000f18:	e737      	b.n	8000d8a <__aeabi_fmul+0x92>
 8000f1a:	f092 0f00 	teq	r2, #0
 8000f1e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f22:	bf02      	ittt	eq
 8000f24:	0040      	lsleq	r0, r0, #1
 8000f26:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f2a:	3a01      	subeq	r2, #1
 8000f2c:	d0f9      	beq.n	8000f22 <__aeabi_fdiv+0xc2>
 8000f2e:	ea40 000c 	orr.w	r0, r0, ip
 8000f32:	f093 0f00 	teq	r3, #0
 8000f36:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f3a:	bf02      	ittt	eq
 8000f3c:	0049      	lsleq	r1, r1, #1
 8000f3e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f42:	3b01      	subeq	r3, #1
 8000f44:	d0f9      	beq.n	8000f3a <__aeabi_fdiv+0xda>
 8000f46:	ea41 010c 	orr.w	r1, r1, ip
 8000f4a:	e795      	b.n	8000e78 <__aeabi_fdiv+0x18>
 8000f4c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f50:	ea92 0f0c 	teq	r2, ip
 8000f54:	d108      	bne.n	8000f68 <__aeabi_fdiv+0x108>
 8000f56:	0242      	lsls	r2, r0, #9
 8000f58:	f47f af7d 	bne.w	8000e56 <__aeabi_fmul+0x15e>
 8000f5c:	ea93 0f0c 	teq	r3, ip
 8000f60:	f47f af70 	bne.w	8000e44 <__aeabi_fmul+0x14c>
 8000f64:	4608      	mov	r0, r1
 8000f66:	e776      	b.n	8000e56 <__aeabi_fmul+0x15e>
 8000f68:	ea93 0f0c 	teq	r3, ip
 8000f6c:	d104      	bne.n	8000f78 <__aeabi_fdiv+0x118>
 8000f6e:	024b      	lsls	r3, r1, #9
 8000f70:	f43f af4c 	beq.w	8000e0c <__aeabi_fmul+0x114>
 8000f74:	4608      	mov	r0, r1
 8000f76:	e76e      	b.n	8000e56 <__aeabi_fmul+0x15e>
 8000f78:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f7c:	bf18      	it	ne
 8000f7e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f82:	d1ca      	bne.n	8000f1a <__aeabi_fdiv+0xba>
 8000f84:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f88:	f47f af5c 	bne.w	8000e44 <__aeabi_fmul+0x14c>
 8000f8c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f90:	f47f af3c 	bne.w	8000e0c <__aeabi_fmul+0x114>
 8000f94:	e75f      	b.n	8000e56 <__aeabi_fmul+0x15e>
 8000f96:	bf00      	nop

08000f98 <__gesf2>:
 8000f98:	f04f 3cff 	mov.w	ip, #4294967295
 8000f9c:	e006      	b.n	8000fac <__cmpsf2+0x4>
 8000f9e:	bf00      	nop

08000fa0 <__lesf2>:
 8000fa0:	f04f 0c01 	mov.w	ip, #1
 8000fa4:	e002      	b.n	8000fac <__cmpsf2+0x4>
 8000fa6:	bf00      	nop

08000fa8 <__cmpsf2>:
 8000fa8:	f04f 0c01 	mov.w	ip, #1
 8000fac:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fb0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fb4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fb8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fbc:	bf18      	it	ne
 8000fbe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fc2:	d011      	beq.n	8000fe8 <__cmpsf2+0x40>
 8000fc4:	b001      	add	sp, #4
 8000fc6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fca:	bf18      	it	ne
 8000fcc:	ea90 0f01 	teqne	r0, r1
 8000fd0:	bf58      	it	pl
 8000fd2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fd6:	bf88      	it	hi
 8000fd8:	17c8      	asrhi	r0, r1, #31
 8000fda:	bf38      	it	cc
 8000fdc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fe0:	bf18      	it	ne
 8000fe2:	f040 0001 	orrne.w	r0, r0, #1
 8000fe6:	4770      	bx	lr
 8000fe8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fec:	d102      	bne.n	8000ff4 <__cmpsf2+0x4c>
 8000fee:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ff2:	d105      	bne.n	8001000 <__cmpsf2+0x58>
 8000ff4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ff8:	d1e4      	bne.n	8000fc4 <__cmpsf2+0x1c>
 8000ffa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000ffe:	d0e1      	beq.n	8000fc4 <__cmpsf2+0x1c>
 8001000:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <__aeabi_cfrcmple>:
 8001008:	4684      	mov	ip, r0
 800100a:	4608      	mov	r0, r1
 800100c:	4661      	mov	r1, ip
 800100e:	e7ff      	b.n	8001010 <__aeabi_cfcmpeq>

08001010 <__aeabi_cfcmpeq>:
 8001010:	b50f      	push	{r0, r1, r2, r3, lr}
 8001012:	f7ff ffc9 	bl	8000fa8 <__cmpsf2>
 8001016:	2800      	cmp	r0, #0
 8001018:	bf48      	it	mi
 800101a:	f110 0f00 	cmnmi.w	r0, #0
 800101e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001020 <__aeabi_fcmpeq>:
 8001020:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001024:	f7ff fff4 	bl	8001010 <__aeabi_cfcmpeq>
 8001028:	bf0c      	ite	eq
 800102a:	2001      	moveq	r0, #1
 800102c:	2000      	movne	r0, #0
 800102e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001032:	bf00      	nop

08001034 <__aeabi_fcmplt>:
 8001034:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001038:	f7ff ffea 	bl	8001010 <__aeabi_cfcmpeq>
 800103c:	bf34      	ite	cc
 800103e:	2001      	movcc	r0, #1
 8001040:	2000      	movcs	r0, #0
 8001042:	f85d fb08 	ldr.w	pc, [sp], #8
 8001046:	bf00      	nop

08001048 <__aeabi_fcmple>:
 8001048:	f84d ed08 	str.w	lr, [sp, #-8]!
 800104c:	f7ff ffe0 	bl	8001010 <__aeabi_cfcmpeq>
 8001050:	bf94      	ite	ls
 8001052:	2001      	movls	r0, #1
 8001054:	2000      	movhi	r0, #0
 8001056:	f85d fb08 	ldr.w	pc, [sp], #8
 800105a:	bf00      	nop

0800105c <__aeabi_fcmpge>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff ffd2 	bl	8001008 <__aeabi_cfrcmple>
 8001064:	bf94      	ite	ls
 8001066:	2001      	movls	r0, #1
 8001068:	2000      	movhi	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_fcmpgt>:
 8001070:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001074:	f7ff ffc8 	bl	8001008 <__aeabi_cfrcmple>
 8001078:	bf34      	ite	cc
 800107a:	2001      	movcc	r0, #1
 800107c:	2000      	movcs	r0, #0
 800107e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001082:	bf00      	nop

08001084 <__aeabi_f2uiz>:
 8001084:	0042      	lsls	r2, r0, #1
 8001086:	d20e      	bcs.n	80010a6 <__aeabi_f2uiz+0x22>
 8001088:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800108c:	d30b      	bcc.n	80010a6 <__aeabi_f2uiz+0x22>
 800108e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001092:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001096:	d409      	bmi.n	80010ac <__aeabi_f2uiz+0x28>
 8001098:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800109c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80010a0:	fa23 f002 	lsr.w	r0, r3, r2
 80010a4:	4770      	bx	lr
 80010a6:	f04f 0000 	mov.w	r0, #0
 80010aa:	4770      	bx	lr
 80010ac:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80010b0:	d101      	bne.n	80010b6 <__aeabi_f2uiz+0x32>
 80010b2:	0242      	lsls	r2, r0, #9
 80010b4:	d102      	bne.n	80010bc <__aeabi_f2uiz+0x38>
 80010b6:	f04f 30ff 	mov.w	r0, #4294967295
 80010ba:	4770      	bx	lr
 80010bc:	f04f 0000 	mov.w	r0, #0
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop

080010c4 <BH1750_send_command>:

    return HAL_OK;
}

HAL_StatusTypeDef BH1750_send_command(BH1750_device_t* dev, uint8_t cmd)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af02      	add	r7, sp, #8
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	460b      	mov	r3, r1
 80010ce:	70fb      	strb	r3, [r7, #3]
	//TODO hal checks
	if(HAL_I2C_Master_Transmit(
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6858      	ldr	r0, [r3, #4]
			dev->i2c_handle,	//Con trỏ tới cấu trúc I2C đã khởi tạo
			dev->address_w,		//I2C addr of dev
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	7a5b      	ldrb	r3, [r3, #9]
	if(HAL_I2C_Master_Transmit(
 80010d8:	4619      	mov	r1, r3
 80010da:	1cfa      	adds	r2, r7, #3
 80010dc:	230a      	movs	r3, #10
 80010de:	9300      	str	r3, [sp, #0]
 80010e0:	2301      	movs	r3, #1
 80010e2:	f002 fe3b 	bl	8003d5c <HAL_I2C_Master_Transmit>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <BH1750_send_command+0x2c>
			&cmd,				//Con trỏ đến biến lệnh cần gửi
			1,					//Số byte cần truyền
			10					//Wait time (ms)
		) != HAL_OK) return HAL_ERROR;
 80010ec:	2301      	movs	r3, #1
 80010ee:	e000      	b.n	80010f2 <BH1750_send_command+0x2e>

	return HAL_OK;
 80010f0:	2300      	movs	r3, #0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <BH1750_poll_self>:
//Hàm này được gọi để polling (kiểm tra, đọc dữ liệu) của cảm biến BH1750
void BH1750_poll_self(BH1750_device_t* self)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b082      	sub	sp, #8
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
	BH1750_get_lumen(self); //hàm này thực hiện quá trình đọc dữ liệu và chuyển đổi sang đơn vị lumen (hoặc lux)
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f000 f8ac 	bl	8001260 <BH1750_get_lumen>
}
 8001108:	bf00      	nop
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <BH1750_init_dev_struct>:
//Hàm khởi tạo cấu trúc thiết bị BH1750
BH1750_device_t* BH1750_init_dev_struct(I2C_HandleTypeDef* i2c_handle,
		char* name, bool addr_grounded)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af00      	add	r7, sp, #0
 8001116:	60f8      	str	r0, [r7, #12]
 8001118:	60b9      	str	r1, [r7, #8]
 800111a:	4613      	mov	r3, r2
 800111c:	71fb      	strb	r3, [r7, #7]
	BH1750_device_t* init =
			(BH1750_device_t*)calloc(1, sizeof(BH1750_device_t));
 800111e:	2114      	movs	r1, #20
 8001120:	2001      	movs	r0, #1
 8001122:	f005 fce3 	bl	8006aec <calloc>
 8001126:	4603      	mov	r3, r0
 8001128:	617b      	str	r3, [r7, #20]
//Gọi calloc() để cấp phát bộ nhớ cho một cấu trúc BH1750_device_t và khởi tạo tất cả các byte về 0
	if(init == NULL) return NULL;
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d101      	bne.n	8001134 <BH1750_init_dev_struct+0x24>
 8001130:	2300      	movs	r3, #0
 8001132:	e02d      	b.n	8001190 <BH1750_init_dev_struct+0x80>

	if(addr_grounded){
 8001134:	79fb      	ldrb	r3, [r7, #7]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d006      	beq.n	8001148 <BH1750_init_dev_struct+0x38>
	        init->address_r = BH1750_GROUND_ADDR_READ;
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	2247      	movs	r2, #71	@ 0x47
 800113e:	721a      	strb	r2, [r3, #8]
	        init->address_w = BH1750_GROUND_ADDR_WRITE;
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	2246      	movs	r2, #70	@ 0x46
 8001144:	725a      	strb	r2, [r3, #9]
 8001146:	e005      	b.n	8001154 <BH1750_init_dev_struct+0x44>
	}else{
	        init->address_r = BH1750_NO_GROUND_ADDR_READ;
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	22b9      	movs	r2, #185	@ 0xb9
 800114c:	721a      	strb	r2, [r3, #8]
	        init->address_w = BH1750_NO_GROUND_ADDR_WRITE;
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	22b8      	movs	r2, #184	@ 0xb8
 8001152:	725a      	strb	r2, [r3, #9]
	}
	//Cấp phát bộ nhớ cho chuỗi name trong cấu trúc, với kích thước bằng độ dài chuỗi được truyền
	init->name = (char*)malloc(sizeof(char) * strlen(name));
 8001154:	68b8      	ldr	r0, [r7, #8]
 8001156:	f7ff f805 	bl	8000164 <strlen>
 800115a:	4603      	mov	r3, r0
 800115c:	4618      	mov	r0, r3
 800115e:	f005 fce1 	bl	8006b24 <malloc>
 8001162:	4603      	mov	r3, r0
 8001164:	461a      	mov	r2, r3
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	601a      	str	r2, [r3, #0]

	if(init->name == NULL) return NULL;
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d101      	bne.n	8001176 <BH1750_init_dev_struct+0x66>
 8001172:	2300      	movs	r3, #0
 8001174:	e00c      	b.n	8001190 <BH1750_init_dev_struct+0x80>

	init->i2c_handle = i2c_handle;
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	68fa      	ldr	r2, [r7, #12]
 800117a:	605a      	str	r2, [r3, #4]

	strcpy(init->name, name); //Sao chép chuỗi name từ tham số vào bộ nhớ đã cấp phát trong cấu trúc
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	68b9      	ldr	r1, [r7, #8]
 8001182:	4618      	mov	r0, r3
 8001184:	f006 fbe1 	bl	800794a <strcpy>

	init->poll = &BH1750_poll_self; //Gán con trỏ hàm poll trỏ đến hàm BH1750_poll_self. Điều này cho phép gọi hàm polling từ cấu trúc mà không cần gọi trực tiếp hàm
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	4a03      	ldr	r2, [pc, #12]	@ (8001198 <BH1750_init_dev_struct+0x88>)
 800118c:	611a      	str	r2, [r3, #16]

	return init;
 800118e:	697b      	ldr	r3, [r7, #20]
}
 8001190:	4618      	mov	r0, r3
 8001192:	3718      	adds	r7, #24
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	080010fb 	.word	0x080010fb

0800119c <BH1750_init_dev>:

HAL_StatusTypeDef BH1750_init_dev(BH1750_device_t* dev)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
	BH1750_send_command(dev, CMD_POWER_ON);
 80011a4:	2101      	movs	r1, #1
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f7ff ff8c 	bl	80010c4 <BH1750_send_command>
	BH1750_send_command(dev, CMD_RESET);
 80011ac:	2103      	movs	r1, #3
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f7ff ff88 	bl	80010c4 <BH1750_send_command>
	BH1750_send_command(dev, CMD_H_RES_MODE);
 80011b4:	2110      	movs	r1, #16
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f7ff ff84 	bl	80010c4 <BH1750_send_command>

	return HAL_OK;
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <BH1750_read_dev>:
//Hàm đọc dữ liệu từ BH1750
HAL_StatusTypeDef BH1750_read_dev(BH1750_device_t* dev)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b084      	sub	sp, #16
 80011ca:	af02      	add	r7, sp, #8
 80011cc:	6078      	str	r0, [r7, #4]
	if(HAL_I2C_Master_Receive(dev->i2c_handle,
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6858      	ldr	r0, [r3, #4]
			dev->address_r,
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	7a1b      	ldrb	r3, [r3, #8]
	if(HAL_I2C_Master_Receive(dev->i2c_handle,
 80011d6:	4619      	mov	r1, r3
			dev->buffer,
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f103 020c 	add.w	r2, r3, #12
	if(HAL_I2C_Master_Receive(dev->i2c_handle,
 80011de:	230a      	movs	r3, #10
 80011e0:	9300      	str	r3, [sp, #0]
 80011e2:	2302      	movs	r3, #2
 80011e4:	f002 feb8 	bl	8003f58 <HAL_I2C_Master_Receive>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <BH1750_read_dev+0x2c>
			2,
			10
	) != HAL_OK) return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e000      	b.n	80011f4 <BH1750_read_dev+0x2e>

	return HAL_OK;
 80011f2:	2300      	movs	r3, #0
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}

080011fc <BH1750_convert>:

HAL_StatusTypeDef BH1750_convert(BH1750_device_t* dev)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
	dev->value = dev->buffer[0];
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	7b1b      	ldrb	r3, [r3, #12]
 8001208:	461a      	mov	r2, r3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	815a      	strh	r2, [r3, #10]
	dev->value = (dev->value << 8) | dev->buffer[1];
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	895b      	ldrh	r3, [r3, #10]
 8001212:	b21b      	sxth	r3, r3
 8001214:	021b      	lsls	r3, r3, #8
 8001216:	b21a      	sxth	r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	7b5b      	ldrb	r3, [r3, #13]
 800121c:	b21b      	sxth	r3, r3
 800121e:	4313      	orrs	r3, r2
 8001220:	b21b      	sxth	r3, r3
 8001222:	b29a      	uxth	r2, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	815a      	strh	r2, [r3, #10]

	//TODO check float stuff
	dev->value/=1.2;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	895b      	ldrh	r3, [r3, #10]
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff f8f3 	bl	8000418 <__aeabi_i2d>
 8001232:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8001236:	4b09      	ldr	r3, [pc, #36]	@ (800125c <BH1750_convert+0x60>)
 8001238:	f7ff fa82 	bl	8000740 <__aeabi_ddiv>
 800123c:	4602      	mov	r2, r0
 800123e:	460b      	mov	r3, r1
 8001240:	4610      	mov	r0, r2
 8001242:	4619      	mov	r1, r3
 8001244:	f7ff fc2a 	bl	8000a9c <__aeabi_d2uiz>
 8001248:	4603      	mov	r3, r0
 800124a:	b29a      	uxth	r2, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	815a      	strh	r2, [r3, #10]

	return HAL_OK;
 8001250:	2300      	movs	r3, #0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	3ff33333 	.word	0x3ff33333

08001260 <BH1750_get_lumen>:

HAL_StatusTypeDef BH1750_get_lumen(BH1750_device_t* dev)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
	BH1750_read_dev(dev);
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f7ff ffac 	bl	80011c6 <BH1750_read_dev>
	BH1750_convert(dev);
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f7ff ffc4 	bl	80011fc <BH1750_convert>
	return HAL_OK;
 8001274:	2300      	movs	r3, #0
}
 8001276:	4618      	mov	r0, r3
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
	...

08001280 <__io_putchar>:
uint8_t rxByte;            // ➜ nhận từng byte
char cmdBuf[32];        // buffer lệnh FAN/PUMP
uint8_t cmdIdx = 0;
char currentMode[16] = "manual";  // Mặc định là manual

int __io_putchar(int ch) {
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001288:	1d39      	adds	r1, r7, #4
 800128a:	f04f 33ff 	mov.w	r3, #4294967295
 800128e:	2201      	movs	r2, #1
 8001290:	4803      	ldr	r0, [pc, #12]	@ (80012a0 <__io_putchar+0x20>)
 8001292:	f004 fe11 	bl	8005eb8 <HAL_UART_Transmit>
  return ch;
 8001296:	687b      	ldr	r3, [r7, #4]
}
 8001298:	4618      	mov	r0, r3
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20000328 	.word	0x20000328

080012a4 <microDelay>:
void microDelay (uint16_t delay)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	4603      	mov	r3, r0
 80012ac:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim1, 0); //Reset bộ đếm của Timer TIM1 về 0
 80012ae:	4b08      	ldr	r3, [pc, #32]	@ (80012d0 <microDelay+0x2c>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	2200      	movs	r2, #0
 80012b4:	625a      	str	r2, [r3, #36]	@ 0x24
  while (__HAL_TIM_GET_COUNTER(&htim1) < delay); //Vòng lặp chờ cho đến khi giá trị bộ đếm của Timer đạt tới giá trị delay
 80012b6:	bf00      	nop
 80012b8:	4b05      	ldr	r3, [pc, #20]	@ (80012d0 <microDelay+0x2c>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80012be:	88fb      	ldrh	r3, [r7, #6]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d3f9      	bcc.n	80012b8 <microDelay+0x14>
}
 80012c4:	bf00      	nop
 80012c6:	bf00      	nop
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bc80      	pop	{r7}
 80012ce:	4770      	bx	lr
 80012d0:	200002e0 	.word	0x200002e0

080012d4 <DHT22_Start>:

uint8_t DHT22_Start (void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b086      	sub	sp, #24
 80012d8:	af00      	add	r7, sp, #0
  uint8_t Response = 0; //Khởi tạo biến để lưu phản hồi từ DHT22, mặc định là 0 (không có phản hồi)
 80012da:	2300      	movs	r3, #0
 80012dc:	75fb      	strb	r3, [r7, #23]
  GPIO_InitTypeDef GPIO_InitStructPrivate = {0}; //Khai báo biến cấu trúc dùng để cấu hình chân GPIO cho DHT22 và khởi tạo các trường về 0
 80012de:	1d3b      	adds	r3, r7, #4
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	609a      	str	r2, [r3, #8]
 80012e8:	60da      	str	r2, [r3, #12]
  //Cấu hình chân DHT22 (PB9) làm output kiểu đẩy (push-pull) với tốc độ thấp và không dùng nội bộ kéo lên hoặc kéo xuống (no pull)
  GPIO_InitStructPrivate.Pin = DHT22_PIN;
 80012ea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80012ee:	607b      	str	r3, [r7, #4]
  GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
 80012f0:	2301      	movs	r3, #1
 80012f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 80012f4:	2302      	movs	r3, #2
 80012f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(DHT22_PORT, &GPIO_InitStructPrivate); // set the pin as output
 80012fc:	1d3b      	adds	r3, r7, #4
 80012fe:	4619      	mov	r1, r3
 8001300:	482d      	ldr	r0, [pc, #180]	@ (80013b8 <DHT22_Start+0xe4>)
 8001302:	f002 fa1b 	bl	800373c <HAL_GPIO_Init>
  HAL_GPIO_WritePin (DHT22_PORT, DHT22_PIN, 0);   // pull the pin low
 8001306:	2200      	movs	r2, #0
 8001308:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800130c:	482a      	ldr	r0, [pc, #168]	@ (80013b8 <DHT22_Start+0xe4>)
 800130e:	f002 fbb0 	bl	8003a72 <HAL_GPIO_WritePin>
  microDelay (1300);   // wait for 1300us
 8001312:	f240 5014 	movw	r0, #1300	@ 0x514
 8001316:	f7ff ffc5 	bl	80012a4 <microDelay>
  HAL_GPIO_WritePin (DHT22_PORT, DHT22_PIN, 1);   // pull the pin high
 800131a:	2201      	movs	r2, #1
 800131c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001320:	4825      	ldr	r0, [pc, #148]	@ (80013b8 <DHT22_Start+0xe4>)
 8001322:	f002 fba6 	bl	8003a72 <HAL_GPIO_WritePin>
  microDelay (30);   // wait for 30us
 8001326:	201e      	movs	r0, #30
 8001328:	f7ff ffbc 	bl	80012a4 <microDelay>
  GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 800132c:	2300      	movs	r3, #0
 800132e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 8001330:	2301      	movs	r3, #1
 8001332:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(DHT22_PORT, &GPIO_InitStructPrivate); // set the pin as input
 8001334:	1d3b      	adds	r3, r7, #4
 8001336:	4619      	mov	r1, r3
 8001338:	481f      	ldr	r0, [pc, #124]	@ (80013b8 <DHT22_Start+0xe4>)
 800133a:	f002 f9ff 	bl	800373c <HAL_GPIO_Init>
  microDelay (40);
 800133e:	2028      	movs	r0, #40	@ 0x28
 8001340:	f7ff ffb0 	bl	80012a4 <microDelay>
  if (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN))) // Kiểm tra nếu chân đang ở mức LOW (phản hồi đầu tiên của DHT22)
 8001344:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001348:	481b      	ldr	r0, [pc, #108]	@ (80013b8 <DHT22_Start+0xe4>)
 800134a:	f002 fb7b 	bl	8003a44 <HAL_GPIO_ReadPin>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d10c      	bne.n	800136e <DHT22_Start+0x9a>
  {
    microDelay (80);
 8001354:	2050      	movs	r0, #80	@ 0x50
 8001356:	f7ff ffa5 	bl	80012a4 <microDelay>
    if ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN))) Response = 1;
 800135a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800135e:	4816      	ldr	r0, [pc, #88]	@ (80013b8 <DHT22_Start+0xe4>)
 8001360:	f002 fb70 	bl	8003a44 <HAL_GPIO_ReadPin>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <DHT22_Start+0x9a>
 800136a:	2301      	movs	r3, #1
 800136c:	75fb      	strb	r3, [r7, #23]
  }
  pMillis = HAL_GetTick(); //sử dụng để đo thời gian chờ
 800136e:	f001 fbcb 	bl	8002b08 <HAL_GetTick>
 8001372:	4603      	mov	r3, r0
 8001374:	4a11      	ldr	r2, [pc, #68]	@ (80013bc <DHT22_Start+0xe8>)
 8001376:	6013      	str	r3, [r2, #0]
  cMillis = HAL_GetTick();
 8001378:	f001 fbc6 	bl	8002b08 <HAL_GetTick>
 800137c:	4603      	mov	r3, r0
 800137e:	4a10      	ldr	r2, [pc, #64]	@ (80013c0 <DHT22_Start+0xec>)
 8001380:	6013      	str	r3, [r2, #0]
  //chờ cho đến khi tín hiệu của DHT22 thay đổi (chuyển từ HIGH sang LOW) hoặc vượt quá một khoảng thời gian nhất định
  //(ở đây là 2 ms, mặc dù thời gian này chủ yếu để đảm bảo xung tín hiệu đã kết thúc)
  while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis)
 8001382:	e004      	b.n	800138e <DHT22_Start+0xba>
  {
    cMillis = HAL_GetTick();
 8001384:	f001 fbc0 	bl	8002b08 <HAL_GetTick>
 8001388:	4603      	mov	r3, r0
 800138a:	4a0d      	ldr	r2, [pc, #52]	@ (80013c0 <DHT22_Start+0xec>)
 800138c:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis)
 800138e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001392:	4809      	ldr	r0, [pc, #36]	@ (80013b8 <DHT22_Start+0xe4>)
 8001394:	f002 fb56 	bl	8003a44 <HAL_GPIO_ReadPin>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d006      	beq.n	80013ac <DHT22_Start+0xd8>
 800139e:	4b07      	ldr	r3, [pc, #28]	@ (80013bc <DHT22_Start+0xe8>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	1c9a      	adds	r2, r3, #2
 80013a4:	4b06      	ldr	r3, [pc, #24]	@ (80013c0 <DHT22_Start+0xec>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d8eb      	bhi.n	8001384 <DHT22_Start+0xb0>
  }
  return Response;
 80013ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3718      	adds	r7, #24
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40010c00 	.word	0x40010c00
 80013bc:	20000388 	.word	0x20000388
 80013c0:	2000038c 	.word	0x2000038c

080013c4 <DHT22_Read>:

uint8_t DHT22_Read (void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
  uint8_t a,b;
  for (a=0;a<8;a++)
 80013ca:	2300      	movs	r3, #0
 80013cc:	71fb      	strb	r3, [r7, #7]
 80013ce:	e066      	b.n	800149e <DHT22_Read+0xda>
  {
    pMillis = HAL_GetTick(); //khởi tạo để đo thời gian chờ của từng bit
 80013d0:	f001 fb9a 	bl	8002b08 <HAL_GetTick>
 80013d4:	4603      	mov	r3, r0
 80013d6:	4a36      	ldr	r2, [pc, #216]	@ (80014b0 <DHT22_Read+0xec>)
 80013d8:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 80013da:	f001 fb95 	bl	8002b08 <HAL_GetTick>
 80013de:	4603      	mov	r3, r0
 80013e0:	4a34      	ldr	r2, [pc, #208]	@ (80014b4 <DHT22_Read+0xf0>)
 80013e2:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis)
 80013e4:	e004      	b.n	80013f0 <DHT22_Read+0x2c>
    {  // wait for the pin to go high
      cMillis = HAL_GetTick(); //đảm bảo không bị treo nếu tín hiệu không thay đổi
 80013e6:	f001 fb8f 	bl	8002b08 <HAL_GetTick>
 80013ea:	4603      	mov	r3, r0
 80013ec:	4a31      	ldr	r2, [pc, #196]	@ (80014b4 <DHT22_Read+0xf0>)
 80013ee:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis)
 80013f0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013f4:	4830      	ldr	r0, [pc, #192]	@ (80014b8 <DHT22_Read+0xf4>)
 80013f6:	f002 fb25 	bl	8003a44 <HAL_GPIO_ReadPin>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d106      	bne.n	800140e <DHT22_Read+0x4a>
 8001400:	4b2b      	ldr	r3, [pc, #172]	@ (80014b0 <DHT22_Read+0xec>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	1c9a      	adds	r2, r3, #2
 8001406:	4b2b      	ldr	r3, [pc, #172]	@ (80014b4 <DHT22_Read+0xf0>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	429a      	cmp	r2, r3
 800140c:	d8eb      	bhi.n	80013e6 <DHT22_Read+0x22>
    }
    microDelay (40);   // wait for 40 us
 800140e:	2028      	movs	r0, #40	@ 0x28
 8001410:	f7ff ff48 	bl	80012a4 <microDelay>
    if (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)))   // if the pin is low
 8001414:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001418:	4827      	ldr	r0, [pc, #156]	@ (80014b8 <DHT22_Read+0xf4>)
 800141a:	f002 fb13 	bl	8003a44 <HAL_GPIO_ReadPin>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d10e      	bne.n	8001442 <DHT22_Read+0x7e>
      b&= ~(1<<(7-a)); //set 0
 8001424:	79fb      	ldrb	r3, [r7, #7]
 8001426:	f1c3 0307 	rsb	r3, r3, #7
 800142a:	2201      	movs	r2, #1
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	b25b      	sxtb	r3, r3
 8001432:	43db      	mvns	r3, r3
 8001434:	b25a      	sxtb	r2, r3
 8001436:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800143a:	4013      	ands	r3, r2
 800143c:	b25b      	sxtb	r3, r3
 800143e:	71bb      	strb	r3, [r7, #6]
 8001440:	e00b      	b.n	800145a <DHT22_Read+0x96>
    else
      b|= (1<<(7-a)); //set 1
 8001442:	79fb      	ldrb	r3, [r7, #7]
 8001444:	f1c3 0307 	rsb	r3, r3, #7
 8001448:	2201      	movs	r2, #1
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	b25a      	sxtb	r2, r3
 8001450:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001454:	4313      	orrs	r3, r2
 8001456:	b25b      	sxtb	r3, r3
 8001458:	71bb      	strb	r3, [r7, #6]
    //Sau khi xác định giá trị của bit hiện tại, chương trình lại chờ cho đến khi tín hiệu chuyển về mức LOW, báo hiệu kết thúc truyền của bit đó
    pMillis = HAL_GetTick(); //lệnh này đo thời gian
 800145a:	f001 fb55 	bl	8002b08 <HAL_GetTick>
 800145e:	4603      	mov	r3, r0
 8001460:	4a13      	ldr	r2, [pc, #76]	@ (80014b0 <DHT22_Read+0xec>)
 8001462:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 8001464:	f001 fb50 	bl	8002b08 <HAL_GetTick>
 8001468:	4603      	mov	r3, r0
 800146a:	4a12      	ldr	r2, [pc, #72]	@ (80014b4 <DHT22_Read+0xf0>)
 800146c:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis)
 800146e:	e004      	b.n	800147a <DHT22_Read+0xb6>
    {  // wait for the pin to go low
      cMillis = HAL_GetTick();
 8001470:	f001 fb4a 	bl	8002b08 <HAL_GetTick>
 8001474:	4603      	mov	r3, r0
 8001476:	4a0f      	ldr	r2, [pc, #60]	@ (80014b4 <DHT22_Read+0xf0>)
 8001478:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis)
 800147a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800147e:	480e      	ldr	r0, [pc, #56]	@ (80014b8 <DHT22_Read+0xf4>)
 8001480:	f002 fae0 	bl	8003a44 <HAL_GPIO_ReadPin>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d006      	beq.n	8001498 <DHT22_Read+0xd4>
 800148a:	4b09      	ldr	r3, [pc, #36]	@ (80014b0 <DHT22_Read+0xec>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	1c9a      	adds	r2, r3, #2
 8001490:	4b08      	ldr	r3, [pc, #32]	@ (80014b4 <DHT22_Read+0xf0>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	429a      	cmp	r2, r3
 8001496:	d8eb      	bhi.n	8001470 <DHT22_Read+0xac>
  for (a=0;a<8;a++)
 8001498:	79fb      	ldrb	r3, [r7, #7]
 800149a:	3301      	adds	r3, #1
 800149c:	71fb      	strb	r3, [r7, #7]
 800149e:	79fb      	ldrb	r3, [r7, #7]
 80014a0:	2b07      	cmp	r3, #7
 80014a2:	d995      	bls.n	80013d0 <DHT22_Read+0xc>
    }
  }
  return b;
 80014a4:	79bb      	ldrb	r3, [r7, #6]
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	20000388 	.word	0x20000388
 80014b4:	2000038c 	.word	0x2000038c
 80014b8:	40010c00 	.word	0x40010c00

080014bc <Read_Soil_ADC>:
uint16_t Read_Soil_ADC(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
    HAL_ADC_Start(&hadc1);
 80014c0:	4806      	ldr	r0, [pc, #24]	@ (80014dc <Read_Soil_ADC+0x20>)
 80014c2:	f001 fc27 	bl	8002d14 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 100);
 80014c6:	2164      	movs	r1, #100	@ 0x64
 80014c8:	4804      	ldr	r0, [pc, #16]	@ (80014dc <Read_Soil_ADC+0x20>)
 80014ca:	f001 fcd1 	bl	8002e70 <HAL_ADC_PollForConversion>
    return HAL_ADC_GetValue(&hadc1);
 80014ce:	4803      	ldr	r0, [pc, #12]	@ (80014dc <Read_Soil_ADC+0x20>)
 80014d0:	f001 fdd4 	bl	800307c <HAL_ADC_GetValue>
 80014d4:	4603      	mov	r3, r0
 80014d6:	b29b      	uxth	r3, r3
}
 80014d8:	4618      	mov	r0, r3
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	20000208 	.word	0x20000208

080014e0 <ADC_To_Moist>:

uint8_t ADC_To_Moist(uint16_t adc)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	80fb      	strh	r3, [r7, #6]
    if (adc < ADC_DRY) adc = ADC_DRY;
    if (adc > ADC_WET) adc = ADC_WET;
 80014ea:	88fb      	ldrh	r3, [r7, #6]
 80014ec:	f640 0217 	movw	r2, #2071	@ 0x817
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d902      	bls.n	80014fa <ADC_To_Moist+0x1a>
 80014f4:	f640 0317 	movw	r3, #2071	@ 0x817
 80014f8:	80fb      	strh	r3, [r7, #6]
    return (adc - ADC_DRY) * 100 / (ADC_WET - ADC_DRY);
 80014fa:	88fb      	ldrh	r3, [r7, #6]
 80014fc:	2264      	movs	r2, #100	@ 0x64
 80014fe:	fb02 f303 	mul.w	r3, r2, r3
 8001502:	4a06      	ldr	r2, [pc, #24]	@ (800151c <ADC_To_Moist+0x3c>)
 8001504:	fb82 1203 	smull	r1, r2, r2, r3
 8001508:	1292      	asrs	r2, r2, #10
 800150a:	17db      	asrs	r3, r3, #31
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	b2db      	uxtb	r3, r3
}
 8001510:	4618      	mov	r0, r3
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	bc80      	pop	{r7}
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	7e941641 	.word	0x7e941641

08001520 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001520:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001524:	b0a2      	sub	sp, #136	@ 0x88
 8001526:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001528:	f001 fa96 	bl	8002a58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800152c:	f000 fb72 	bl	8001c14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001530:	f000 fce0 	bl	8001ef4 <MX_GPIO_Init>
  MX_I2C2_Init();
 8001534:	f000 fc36 	bl	8001da4 <MX_I2C2_Init>
  MX_TIM1_Init();
 8001538:	f000 fc62 	bl	8001e00 <MX_TIM1_Init>
  MX_I2C1_Init();
 800153c:	f000 fc04 	bl	8001d48 <MX_I2C1_Init>
  MX_ADC1_Init();
 8001540:	f000 fbc4 	bl	8001ccc <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8001544:	f000 fcac 	bl	8001ea0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1); //Bắt đầu Timer TIM1 để có thể sử dụng trong việc tạo độ trễ
 8001548:	489a      	ldr	r0, [pc, #616]	@ (80017b4 <main+0x294>)
 800154a:	f004 f9f1 	bl	8005930 <HAL_TIM_Base_Start>
  SSD1306_Init(); //Khởi tạo màn hình OLED SSD1306 qua giao tiếp I2C (bao gồm việc xóa màn hình, thiết lập các thông số ban đầu)
 800154e:	f000 fd5b 	bl	8002008 <SSD1306_Init>
  /* Khởi tạo BH1750 */
  //Hàm này cấp phát và khởi tạo cấu trúc cho cảm biến BH1750: con trỏ tới I2C, tên gọi BH1750 nhận diện, true: thông báo chân ADDR nối với GND
  light_sensor = BH1750_init_dev_struct(&hi2c1, "BH1750", true);
 8001552:	2201      	movs	r2, #1
 8001554:	4998      	ldr	r1, [pc, #608]	@ (80017b8 <main+0x298>)
 8001556:	4899      	ldr	r0, [pc, #612]	@ (80017bc <main+0x29c>)
 8001558:	f7ff fdda 	bl	8001110 <BH1750_init_dev_struct>
 800155c:	4603      	mov	r3, r0
 800155e:	4a98      	ldr	r2, [pc, #608]	@ (80017c0 <main+0x2a0>)
 8001560:	6013      	str	r3, [r2, #0]
  BH1750_init_dev(light_sensor); //Gửi các lệnh khởi tạo cần thiết (Power On, Reset, chọn chế độ đo) tới cảm biến BH1750
 8001562:	4b97      	ldr	r3, [pc, #604]	@ (80017c0 <main+0x2a0>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff fe18 	bl	800119c <BH1750_init_dev>
  HAL_ADC_Start(&hadc1); //ADC bat dau khoi dong
 800156c:	4895      	ldr	r0, [pc, #596]	@ (80017c4 <main+0x2a4>)
 800156e:	f001 fbd1 	bl	8002d14 <HAL_ADC_Start>
  HAL_UART_Receive_IT(&huart2, &rxByte, 1);
 8001572:	2201      	movs	r2, #1
 8001574:	4994      	ldr	r1, [pc, #592]	@ (80017c8 <main+0x2a8>)
 8001576:	4895      	ldr	r0, [pc, #596]	@ (80017cc <main+0x2ac>)
 8001578:	f004 fd29 	bl	8005fce <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(DHT22_Start())
 800157c:	f7ff feaa 	bl	80012d4 <DHT22_Start>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	f000 815c 	beq.w	8001840 <main+0x320>
	      {
	        RH1 = DHT22_Read(); // First 8bits of humidity
 8001588:	f7ff ff1c 	bl	80013c4 <DHT22_Read>
 800158c:	4603      	mov	r3, r0
 800158e:	461a      	mov	r2, r3
 8001590:	4b8f      	ldr	r3, [pc, #572]	@ (80017d0 <main+0x2b0>)
 8001592:	701a      	strb	r2, [r3, #0]
	        RH2 = DHT22_Read(); // Second 8bits of Relative humidity
 8001594:	f7ff ff16 	bl	80013c4 <DHT22_Read>
 8001598:	4603      	mov	r3, r0
 800159a:	461a      	mov	r2, r3
 800159c:	4b8d      	ldr	r3, [pc, #564]	@ (80017d4 <main+0x2b4>)
 800159e:	701a      	strb	r2, [r3, #0]
	        TC1 = DHT22_Read(); // First 8bits of Celsius
 80015a0:	f7ff ff10 	bl	80013c4 <DHT22_Read>
 80015a4:	4603      	mov	r3, r0
 80015a6:	461a      	mov	r2, r3
 80015a8:	4b8b      	ldr	r3, [pc, #556]	@ (80017d8 <main+0x2b8>)
 80015aa:	701a      	strb	r2, [r3, #0]
	        TC2 = DHT22_Read(); // Second 8bits of Celsius
 80015ac:	f7ff ff0a 	bl	80013c4 <DHT22_Read>
 80015b0:	4603      	mov	r3, r0
 80015b2:	461a      	mov	r2, r3
 80015b4:	4b89      	ldr	r3, [pc, #548]	@ (80017dc <main+0x2bc>)
 80015b6:	701a      	strb	r2, [r3, #0]
	        SUM = DHT22_Read(); // Check sum
 80015b8:	f7ff ff04 	bl	80013c4 <DHT22_Read>
 80015bc:	4603      	mov	r3, r0
 80015be:	461a      	mov	r2, r3
 80015c0:	4b87      	ldr	r3, [pc, #540]	@ (80017e0 <main+0x2c0>)
 80015c2:	701a      	strb	r2, [r3, #0]
	        CHECK = RH1 + RH2 + TC1 + TC2;
 80015c4:	4b82      	ldr	r3, [pc, #520]	@ (80017d0 <main+0x2b0>)
 80015c6:	781a      	ldrb	r2, [r3, #0]
 80015c8:	4b82      	ldr	r3, [pc, #520]	@ (80017d4 <main+0x2b4>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	4413      	add	r3, r2
 80015ce:	b2da      	uxtb	r2, r3
 80015d0:	4b81      	ldr	r3, [pc, #516]	@ (80017d8 <main+0x2b8>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	4413      	add	r3, r2
 80015d6:	b2da      	uxtb	r2, r3
 80015d8:	4b80      	ldr	r3, [pc, #512]	@ (80017dc <main+0x2bc>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	4413      	add	r3, r2
 80015de:	b2da      	uxtb	r2, r3
 80015e0:	4b80      	ldr	r3, [pc, #512]	@ (80017e4 <main+0x2c4>)
 80015e2:	701a      	strb	r2, [r3, #0]
	        if (CHECK == SUM)
 80015e4:	4b7f      	ldr	r3, [pc, #508]	@ (80017e4 <main+0x2c4>)
 80015e6:	781a      	ldrb	r2, [r3, #0]
 80015e8:	4b7d      	ldr	r3, [pc, #500]	@ (80017e0 <main+0x2c0>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	f040 8127 	bne.w	8001840 <main+0x320>
	        {
	          if (TC1>127) // If TC1=10000000, negative temperature
 80015f2:	4b79      	ldr	r3, [pc, #484]	@ (80017d8 <main+0x2b8>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	b25b      	sxtb	r3, r3
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	da0f      	bge.n	800161c <main+0xfc>
	          {
	            tCelsius = (float)TC2/10*(-1);
 80015fc:	4b77      	ldr	r3, [pc, #476]	@ (80017dc <main+0x2bc>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff fb21 	bl	8000c48 <__aeabi_ui2f>
 8001606:	4603      	mov	r3, r0
 8001608:	4977      	ldr	r1, [pc, #476]	@ (80017e8 <main+0x2c8>)
 800160a:	4618      	mov	r0, r3
 800160c:	f7ff fc28 	bl	8000e60 <__aeabi_fdiv>
 8001610:	4603      	mov	r3, r0
 8001612:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001616:	4a75      	ldr	r2, [pc, #468]	@ (80017ec <main+0x2cc>)
 8001618:	6013      	str	r3, [r2, #0]
 800161a:	e011      	b.n	8001640 <main+0x120>
	          }
	          else
	          {
	            tCelsius = (float)((TC1<<8)|TC2)/10;
 800161c:	4b6e      	ldr	r3, [pc, #440]	@ (80017d8 <main+0x2b8>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	021b      	lsls	r3, r3, #8
 8001622:	4a6e      	ldr	r2, [pc, #440]	@ (80017dc <main+0x2bc>)
 8001624:	7812      	ldrb	r2, [r2, #0]
 8001626:	4313      	orrs	r3, r2
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff fb11 	bl	8000c50 <__aeabi_i2f>
 800162e:	4603      	mov	r3, r0
 8001630:	496d      	ldr	r1, [pc, #436]	@ (80017e8 <main+0x2c8>)
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff fc14 	bl	8000e60 <__aeabi_fdiv>
 8001638:	4603      	mov	r3, r0
 800163a:	461a      	mov	r2, r3
 800163c:	4b6b      	ldr	r3, [pc, #428]	@ (80017ec <main+0x2cc>)
 800163e:	601a      	str	r2, [r3, #0]
	          }
	          RH = (float) ((RH1<<8)|RH2)/10;
 8001640:	4b63      	ldr	r3, [pc, #396]	@ (80017d0 <main+0x2b0>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	021b      	lsls	r3, r3, #8
 8001646:	4a63      	ldr	r2, [pc, #396]	@ (80017d4 <main+0x2b4>)
 8001648:	7812      	ldrb	r2, [r2, #0]
 800164a:	4313      	orrs	r3, r2
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff faff 	bl	8000c50 <__aeabi_i2f>
 8001652:	4603      	mov	r3, r0
 8001654:	4964      	ldr	r1, [pc, #400]	@ (80017e8 <main+0x2c8>)
 8001656:	4618      	mov	r0, r3
 8001658:	f7ff fc02 	bl	8000e60 <__aeabi_fdiv>
 800165c:	4603      	mov	r3, r0
 800165e:	461a      	mov	r2, r3
 8001660:	4b63      	ldr	r3, [pc, #396]	@ (80017f0 <main+0x2d0>)
 8001662:	601a      	str	r2, [r3, #0]
	          SSD1306_GotoXY (0, 0); //Đưa con trỏ vẽ trên màn hình OLED về vị trí (0,0) (góc trên bên trái) để bắt đầu hiển thị kết quả độ ẩm
 8001664:	2100      	movs	r1, #0
 8001666:	2000      	movs	r0, #0
 8001668:	f000 fe36 	bl	80022d8 <SSD1306_GotoXY>
	          RHI = RH;  // Relative humidity integral
 800166c:	4b60      	ldr	r3, [pc, #384]	@ (80017f0 <main+0x2d0>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff fd07 	bl	8001084 <__aeabi_f2uiz>
 8001676:	4603      	mov	r3, r0
 8001678:	b2da      	uxtb	r2, r3
 800167a:	4b5e      	ldr	r3, [pc, #376]	@ (80017f4 <main+0x2d4>)
 800167c:	701a      	strb	r2, [r3, #0]
	          RHD = RH*10-RHI*10; // Relative humidity decimal
 800167e:	4b5c      	ldr	r3, [pc, #368]	@ (80017f0 <main+0x2d0>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4959      	ldr	r1, [pc, #356]	@ (80017e8 <main+0x2c8>)
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff fb37 	bl	8000cf8 <__aeabi_fmul>
 800168a:	4603      	mov	r3, r0
 800168c:	461c      	mov	r4, r3
 800168e:	4b59      	ldr	r3, [pc, #356]	@ (80017f4 <main+0x2d4>)
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	461a      	mov	r2, r3
 8001694:	4613      	mov	r3, r2
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	4413      	add	r3, r2
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff fad7 	bl	8000c50 <__aeabi_i2f>
 80016a2:	4603      	mov	r3, r0
 80016a4:	4619      	mov	r1, r3
 80016a6:	4620      	mov	r0, r4
 80016a8:	f7ff fa1c 	bl	8000ae4 <__aeabi_fsub>
 80016ac:	4603      	mov	r3, r0
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7ff fce8 	bl	8001084 <__aeabi_f2uiz>
 80016b4:	4603      	mov	r3, r0
 80016b6:	b2da      	uxtb	r2, r3
 80016b8:	4b4f      	ldr	r3, [pc, #316]	@ (80017f8 <main+0x2d8>)
 80016ba:	701a      	strb	r2, [r3, #0]
	          int isNegative = 0;
 80016bc:	2300      	movs	r3, #0
 80016be:	667b      	str	r3, [r7, #100]	@ 0x64
	          if (tCelsius < 0)
 80016c0:	4b4a      	ldr	r3, [pc, #296]	@ (80017ec <main+0x2cc>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f04f 0100 	mov.w	r1, #0
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff fcb3 	bl	8001034 <__aeabi_fcmplt>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d02c      	beq.n	800172e <main+0x20e>
	          {
	            TCI = tCelsius *(-1);  // Celsius integral
 80016d4:	4b45      	ldr	r3, [pc, #276]	@ (80017ec <main+0x2cc>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff fcd1 	bl	8001084 <__aeabi_f2uiz>
 80016e2:	4603      	mov	r3, r0
 80016e4:	b2da      	uxtb	r2, r3
 80016e6:	4b45      	ldr	r3, [pc, #276]	@ (80017fc <main+0x2dc>)
 80016e8:	701a      	strb	r2, [r3, #0]
	            TCD = tCelsius*(-10)-TCI*10; // Celsius decimal
 80016ea:	4b40      	ldr	r3, [pc, #256]	@ (80017ec <main+0x2cc>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4944      	ldr	r1, [pc, #272]	@ (8001800 <main+0x2e0>)
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff fb01 	bl	8000cf8 <__aeabi_fmul>
 80016f6:	4603      	mov	r3, r0
 80016f8:	461c      	mov	r4, r3
 80016fa:	4b40      	ldr	r3, [pc, #256]	@ (80017fc <main+0x2dc>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	461a      	mov	r2, r3
 8001700:	4613      	mov	r3, r2
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	4413      	add	r3, r2
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff faa1 	bl	8000c50 <__aeabi_i2f>
 800170e:	4603      	mov	r3, r0
 8001710:	4619      	mov	r1, r3
 8001712:	4620      	mov	r0, r4
 8001714:	f7ff f9e6 	bl	8000ae4 <__aeabi_fsub>
 8001718:	4603      	mov	r3, r0
 800171a:	4618      	mov	r0, r3
 800171c:	f7ff fcb2 	bl	8001084 <__aeabi_f2uiz>
 8001720:	4603      	mov	r3, r0
 8001722:	b2da      	uxtb	r2, r3
 8001724:	4b37      	ldr	r3, [pc, #220]	@ (8001804 <main+0x2e4>)
 8001726:	701a      	strb	r2, [r3, #0]
	            isNegative = 1;
 8001728:	2301      	movs	r3, #1
 800172a:	667b      	str	r3, [r7, #100]	@ 0x64
 800172c:	e027      	b.n	800177e <main+0x25e>
	          }
	          else
	          {
	            TCI = tCelsius;  // Celsius integral
 800172e:	4b2f      	ldr	r3, [pc, #188]	@ (80017ec <main+0x2cc>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff fca6 	bl	8001084 <__aeabi_f2uiz>
 8001738:	4603      	mov	r3, r0
 800173a:	b2da      	uxtb	r2, r3
 800173c:	4b2f      	ldr	r3, [pc, #188]	@ (80017fc <main+0x2dc>)
 800173e:	701a      	strb	r2, [r3, #0]
	            TCD = tCelsius*10-TCI*10; // Celsius decimal
 8001740:	4b2a      	ldr	r3, [pc, #168]	@ (80017ec <main+0x2cc>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4928      	ldr	r1, [pc, #160]	@ (80017e8 <main+0x2c8>)
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff fad6 	bl	8000cf8 <__aeabi_fmul>
 800174c:	4603      	mov	r3, r0
 800174e:	461c      	mov	r4, r3
 8001750:	4b2a      	ldr	r3, [pc, #168]	@ (80017fc <main+0x2dc>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	461a      	mov	r2, r3
 8001756:	4613      	mov	r3, r2
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	4413      	add	r3, r2
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff fa76 	bl	8000c50 <__aeabi_i2f>
 8001764:	4603      	mov	r3, r0
 8001766:	4619      	mov	r1, r3
 8001768:	4620      	mov	r0, r4
 800176a:	f7ff f9bb 	bl	8000ae4 <__aeabi_fsub>
 800176e:	4603      	mov	r3, r0
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff fc87 	bl	8001084 <__aeabi_f2uiz>
 8001776:	4603      	mov	r3, r0
 8001778:	b2da      	uxtb	r2, r3
 800177a:	4b22      	ldr	r3, [pc, #136]	@ (8001804 <main+0x2e4>)
 800177c:	701a      	strb	r2, [r3, #0]
	          }
	          SSD1306_GotoXY (0, 0);
 800177e:	2100      	movs	r1, #0
 8001780:	2000      	movs	r0, #0
 8001782:	f000 fda9 	bl	80022d8 <SSD1306_GotoXY>
	          if (isNegative)
 8001786:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001788:	2b00      	cmp	r3, #0
 800178a:	d041      	beq.n	8001810 <main+0x2f0>
	              sprintf(strCopy, "H:%d.%d%% T:-%d.%dC", RHI, RHD, TCI, TCD);
 800178c:	4b19      	ldr	r3, [pc, #100]	@ (80017f4 <main+0x2d4>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	4619      	mov	r1, r3
 8001792:	4b19      	ldr	r3, [pc, #100]	@ (80017f8 <main+0x2d8>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	4618      	mov	r0, r3
 8001798:	4b18      	ldr	r3, [pc, #96]	@ (80017fc <main+0x2dc>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	461a      	mov	r2, r3
 800179e:	4b19      	ldr	r3, [pc, #100]	@ (8001804 <main+0x2e4>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	9301      	str	r3, [sp, #4]
 80017a4:	9200      	str	r2, [sp, #0]
 80017a6:	4603      	mov	r3, r0
 80017a8:	460a      	mov	r2, r1
 80017aa:	4917      	ldr	r1, [pc, #92]	@ (8001808 <main+0x2e8>)
 80017ac:	4817      	ldr	r0, [pc, #92]	@ (800180c <main+0x2ec>)
 80017ae:	f005 ffc1 	bl	8007734 <siprintf>
 80017b2:	e040      	b.n	8001836 <main+0x316>
 80017b4:	200002e0 	.word	0x200002e0
 80017b8:	08009870 	.word	0x08009870
 80017bc:	20000238 	.word	0x20000238
 80017c0:	20000370 	.word	0x20000370
 80017c4:	20000208 	.word	0x20000208
 80017c8:	200003bc 	.word	0x200003bc
 80017cc:	20000328 	.word	0x20000328
 80017d0:	20000380 	.word	0x20000380
 80017d4:	20000381 	.word	0x20000381
 80017d8:	20000382 	.word	0x20000382
 80017dc:	20000383 	.word	0x20000383
 80017e0:	20000384 	.word	0x20000384
 80017e4:	20000385 	.word	0x20000385
 80017e8:	41200000 	.word	0x41200000
 80017ec:	20000390 	.word	0x20000390
 80017f0:	20000394 	.word	0x20000394
 80017f4:	20000398 	.word	0x20000398
 80017f8:	20000399 	.word	0x20000399
 80017fc:	2000039a 	.word	0x2000039a
 8001800:	c1200000 	.word	0xc1200000
 8001804:	2000039b 	.word	0x2000039b
 8001808:	08009878 	.word	0x08009878
 800180c:	2000039c 	.word	0x2000039c
	          else
	              sprintf(strCopy, "H:%d.%d%% T:%d.%dC", RHI, RHD, TCI, TCD);
 8001810:	4b8e      	ldr	r3, [pc, #568]	@ (8001a4c <main+0x52c>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	4619      	mov	r1, r3
 8001816:	4b8e      	ldr	r3, [pc, #568]	@ (8001a50 <main+0x530>)
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	4618      	mov	r0, r3
 800181c:	4b8d      	ldr	r3, [pc, #564]	@ (8001a54 <main+0x534>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	461a      	mov	r2, r3
 8001822:	4b8d      	ldr	r3, [pc, #564]	@ (8001a58 <main+0x538>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	9301      	str	r3, [sp, #4]
 8001828:	9200      	str	r2, [sp, #0]
 800182a:	4603      	mov	r3, r0
 800182c:	460a      	mov	r2, r1
 800182e:	498b      	ldr	r1, [pc, #556]	@ (8001a5c <main+0x53c>)
 8001830:	488b      	ldr	r0, [pc, #556]	@ (8001a60 <main+0x540>)
 8001832:	f005 ff7f 	bl	8007734 <siprintf>
	          SSD1306_Puts(strCopy, &Font_7x10, 1);
 8001836:	2201      	movs	r2, #1
 8001838:	498a      	ldr	r1, [pc, #552]	@ (8001a64 <main+0x544>)
 800183a:	4889      	ldr	r0, [pc, #548]	@ (8001a60 <main+0x540>)
 800183c:	f000 fde0 	bl	8002400 <SSD1306_Puts>
	        }
	      }
	      //HAL_Delay(1000); //ừng chương trình 1000 ms (1 giây) trước khi bắt đầu vòng lặp tiếp theo, đảm bảo tần suất đọc dữ liệu 1 giây một lần
	   /* Đọc dữ liệu từ cảm biến BH1750 */
	   light_sensor->poll(light_sensor); //đọc dữ liệu và chuyển đổi thành giá trị lux
 8001840:	4b89      	ldr	r3, [pc, #548]	@ (8001a68 <main+0x548>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	691b      	ldr	r3, [r3, #16]
 8001846:	4a88      	ldr	r2, [pc, #544]	@ (8001a68 <main+0x548>)
 8001848:	6812      	ldr	r2, [r2, #0]
 800184a:	4610      	mov	r0, r2
 800184c:	4798      	blx	r3
	   Lux = light_sensor->value;  // Cập nhật biến Lux
 800184e:	4b86      	ldr	r3, [pc, #536]	@ (8001a68 <main+0x548>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	895a      	ldrh	r2, [r3, #10]
 8001854:	4b85      	ldr	r3, [pc, #532]	@ (8001a6c <main+0x54c>)
 8001856:	801a      	strh	r2, [r3, #0]
	   SSD1306_GotoXY(0, 20);
 8001858:	2114      	movs	r1, #20
 800185a:	2000      	movs	r0, #0
 800185c:	f000 fd3c 	bl	80022d8 <SSD1306_GotoXY>
	   SSD1306_Puts("              ", &Font_7x10, 1);  // Xóa dòng cũ
 8001860:	2201      	movs	r2, #1
 8001862:	4980      	ldr	r1, [pc, #512]	@ (8001a64 <main+0x544>)
 8001864:	4882      	ldr	r0, [pc, #520]	@ (8001a70 <main+0x550>)
 8001866:	f000 fdcb 	bl	8002400 <SSD1306_Puts>
	   SSD1306_GotoXY(0, 20);
 800186a:	2114      	movs	r1, #20
 800186c:	2000      	movs	r0, #0
 800186e:	f000 fd33 	bl	80022d8 <SSD1306_GotoXY>
	   sprintf(strCopy, "Lux: %d", Lux);
 8001872:	4b7e      	ldr	r3, [pc, #504]	@ (8001a6c <main+0x54c>)
 8001874:	881b      	ldrh	r3, [r3, #0]
 8001876:	461a      	mov	r2, r3
 8001878:	497e      	ldr	r1, [pc, #504]	@ (8001a74 <main+0x554>)
 800187a:	4879      	ldr	r0, [pc, #484]	@ (8001a60 <main+0x540>)
 800187c:	f005 ff5a 	bl	8007734 <siprintf>
	   SSD1306_Puts(strCopy, &Font_7x10, 1);
 8001880:	2201      	movs	r2, #1
 8001882:	4978      	ldr	r1, [pc, #480]	@ (8001a64 <main+0x544>)
 8001884:	4876      	ldr	r0, [pc, #472]	@ (8001a60 <main+0x540>)
 8001886:	f000 fdbb 	bl	8002400 <SSD1306_Puts>
	  //HAL_Delay(1000); // Đọc mỗi giây
	  //ADC
	  adcValue = Read_Soil_ADC();
 800188a:	f7ff fe17 	bl	80014bc <Read_Soil_ADC>
 800188e:	4603      	mov	r3, r0
 8001890:	461a      	mov	r2, r3
 8001892:	4b79      	ldr	r3, [pc, #484]	@ (8001a78 <main+0x558>)
 8001894:	601a      	str	r2, [r3, #0]
	  percentRH = ADC_To_Moist(adcValue);
 8001896:	4b78      	ldr	r3, [pc, #480]	@ (8001a78 <main+0x558>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	b29b      	uxth	r3, r3
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff fe1f 	bl	80014e0 <ADC_To_Moist>
 80018a2:	4603      	mov	r3, r0
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff f9cf 	bl	8000c48 <__aeabi_ui2f>
 80018aa:	4603      	mov	r3, r0
 80018ac:	4a73      	ldr	r2, [pc, #460]	@ (8001a7c <main+0x55c>)
 80018ae:	6013      	str	r3, [r2, #0]
	  	        //HAL_Delay(1000); //Chờ 1 giây trước khi đọc ADC tiếp theo
	  SSD1306_GotoXY(0, 40);
 80018b0:	2128      	movs	r1, #40	@ 0x28
 80018b2:	2000      	movs	r0, #0
 80018b4:	f000 fd10 	bl	80022d8 <SSD1306_GotoXY>
	  sprintf(strCopy, "Soil: %.1f%%", percentRH);
 80018b8:	4b70      	ldr	r3, [pc, #448]	@ (8001a7c <main+0x55c>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4618      	mov	r0, r3
 80018be:	f7fe fdbd 	bl	800043c <__aeabi_f2d>
 80018c2:	4602      	mov	r2, r0
 80018c4:	460b      	mov	r3, r1
 80018c6:	496e      	ldr	r1, [pc, #440]	@ (8001a80 <main+0x560>)
 80018c8:	4865      	ldr	r0, [pc, #404]	@ (8001a60 <main+0x540>)
 80018ca:	f005 ff33 	bl	8007734 <siprintf>
	  SSD1306_Puts(strCopy, &Font_7x10, 1);
 80018ce:	2201      	movs	r2, #1
 80018d0:	4964      	ldr	r1, [pc, #400]	@ (8001a64 <main+0x544>)
 80018d2:	4863      	ldr	r0, [pc, #396]	@ (8001a60 <main+0x540>)
 80018d4:	f000 fd94 	bl	8002400 <SSD1306_Puts>
	  SSD1306_UpdateScreen();
 80018d8:	f000 fc5a 	bl	8002190 <SSD1306_UpdateScreen>
	  // ==== CẢNH BÁO QUA BUZZER ====
	  if (tCelsius > 30 || RH < 70 || percentRH < 70 || Lux < 100 || Lux > 1000)
 80018dc:	4b69      	ldr	r3, [pc, #420]	@ (8001a84 <main+0x564>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4969      	ldr	r1, [pc, #420]	@ (8001a88 <main+0x568>)
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff fbc4 	bl	8001070 <__aeabi_fcmpgt>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d11a      	bne.n	8001924 <main+0x404>
 80018ee:	4b67      	ldr	r3, [pc, #412]	@ (8001a8c <main+0x56c>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4967      	ldr	r1, [pc, #412]	@ (8001a90 <main+0x570>)
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff fb9d 	bl	8001034 <__aeabi_fcmplt>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d111      	bne.n	8001924 <main+0x404>
 8001900:	4b5e      	ldr	r3, [pc, #376]	@ (8001a7c <main+0x55c>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4962      	ldr	r1, [pc, #392]	@ (8001a90 <main+0x570>)
 8001906:	4618      	mov	r0, r3
 8001908:	f7ff fb94 	bl	8001034 <__aeabi_fcmplt>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d108      	bne.n	8001924 <main+0x404>
 8001912:	4b56      	ldr	r3, [pc, #344]	@ (8001a6c <main+0x54c>)
 8001914:	881b      	ldrh	r3, [r3, #0]
 8001916:	2b63      	cmp	r3, #99	@ 0x63
 8001918:	d904      	bls.n	8001924 <main+0x404>
 800191a:	4b54      	ldr	r3, [pc, #336]	@ (8001a6c <main+0x54c>)
 800191c:	881b      	ldrh	r3, [r3, #0]
 800191e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001922:	d90c      	bls.n	800193e <main+0x41e>
	  {
	      HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1); // Buzzer kêu
 8001924:	2102      	movs	r1, #2
 8001926:	485b      	ldr	r0, [pc, #364]	@ (8001a94 <main+0x574>)
 8001928:	f002 f8bb 	bl	8003aa2 <HAL_GPIO_TogglePin>
	      HAL_Delay(500);
 800192c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001930:	f001 f8f4 	bl	8002b1c <HAL_Delay>
	      HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1); // Tắt buzzer
 8001934:	2102      	movs	r1, #2
 8001936:	4857      	ldr	r0, [pc, #348]	@ (8001a94 <main+0x574>)
 8001938:	f002 f8b3 	bl	8003aa2 <HAL_GPIO_TogglePin>
 800193c:	e004      	b.n	8001948 <main+0x428>
	  } else {
	      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET); // Tắt buzzer nếu điều kiện OK
 800193e:	2200      	movs	r2, #0
 8001940:	2102      	movs	r1, #2
 8001942:	4854      	ldr	r0, [pc, #336]	@ (8001a94 <main+0x574>)
 8001944:	f002 f895 	bl	8003a72 <HAL_GPIO_WritePin>
	  }
	  char uartBuffer[100];
	  snprintf(uartBuffer, sizeof(uartBuffer),
 8001948:	4b4e      	ldr	r3, [pc, #312]	@ (8001a84 <main+0x564>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4618      	mov	r0, r3
 800194e:	f7fe fd75 	bl	800043c <__aeabi_f2d>
 8001952:	4604      	mov	r4, r0
 8001954:	460d      	mov	r5, r1
 8001956:	4b4d      	ldr	r3, [pc, #308]	@ (8001a8c <main+0x56c>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4618      	mov	r0, r3
 800195c:	f7fe fd6e 	bl	800043c <__aeabi_f2d>
 8001960:	4680      	mov	r8, r0
 8001962:	4689      	mov	r9, r1
 8001964:	4b45      	ldr	r3, [pc, #276]	@ (8001a7c <main+0x55c>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4618      	mov	r0, r3
 800196a:	f7fe fd67 	bl	800043c <__aeabi_f2d>
 800196e:	4602      	mov	r2, r0
 8001970:	460b      	mov	r3, r1
 8001972:	493e      	ldr	r1, [pc, #248]	@ (8001a6c <main+0x54c>)
 8001974:	8809      	ldrh	r1, [r1, #0]
 8001976:	4638      	mov	r0, r7
 8001978:	9106      	str	r1, [sp, #24]
 800197a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800197e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001982:	e9cd 4500 	strd	r4, r5, [sp]
 8001986:	4a44      	ldr	r2, [pc, #272]	@ (8001a98 <main+0x578>)
 8001988:	2164      	movs	r1, #100	@ 0x64
 800198a:	f005 fe9d 	bl	80076c8 <sniprintf>
	           "{\"temperature\":%.1f,\"humidity\":%.1f,\"soil_moisture\":%.1f,\"light\":%d}\n",
	           tCelsius, RH, percentRH, Lux);

	  HAL_UART_Transmit(&huart2, (uint8_t*)uartBuffer, strlen(uartBuffer), 100);
 800198e:	463b      	mov	r3, r7
 8001990:	4618      	mov	r0, r3
 8001992:	f7fe fbe7 	bl	8000164 <strlen>
 8001996:	4603      	mov	r3, r0
 8001998:	b29a      	uxth	r2, r3
 800199a:	4639      	mov	r1, r7
 800199c:	2364      	movs	r3, #100	@ 0x64
 800199e:	483f      	ldr	r0, [pc, #252]	@ (8001a9c <main+0x57c>)
 80019a0:	f004 fa8a 	bl	8005eb8 <HAL_UART_Transmit>
	  HAL_Delay(1000); // gửi mỗi giây
 80019a4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019a8:	f001 f8b8 	bl	8002b1c <HAL_Delay>

    /* USER CODE END WHILE */
	  if (strcmp(currentMode, "auto") == 0)
 80019ac:	493c      	ldr	r1, [pc, #240]	@ (8001aa0 <main+0x580>)
 80019ae:	483d      	ldr	r0, [pc, #244]	@ (8001aa4 <main+0x584>)
 80019b0:	f7fe fbce 	bl	8000150 <strcmp>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	f47f ade0 	bne.w	800157c <main+0x5c>
	  {
	      if (tCelsius > 30)
 80019bc:	4b31      	ldr	r3, [pc, #196]	@ (8001a84 <main+0x564>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4931      	ldr	r1, [pc, #196]	@ (8001a88 <main+0x568>)
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7ff fb54 	bl	8001070 <__aeabi_fcmpgt>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d006      	beq.n	80019dc <main+0x4bc>
	          HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET); // FAN ON
 80019ce:	2200      	movs	r2, #0
 80019d0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80019d4:	4834      	ldr	r0, [pc, #208]	@ (8001aa8 <main+0x588>)
 80019d6:	f002 f84c 	bl	8003a72 <HAL_GPIO_WritePin>
 80019da:	e005      	b.n	80019e8 <main+0x4c8>
	      else
	          HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);   // FAN OFF
 80019dc:	2201      	movs	r2, #1
 80019de:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80019e2:	4831      	ldr	r0, [pc, #196]	@ (8001aa8 <main+0x588>)
 80019e4:	f002 f845 	bl	8003a72 <HAL_GPIO_WritePin>

	      if (percentRH < 60.0f || RH < 50)
 80019e8:	4b24      	ldr	r3, [pc, #144]	@ (8001a7c <main+0x55c>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	492f      	ldr	r1, [pc, #188]	@ (8001aac <main+0x58c>)
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff fb20 	bl	8001034 <__aeabi_fcmplt>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d108      	bne.n	8001a0c <main+0x4ec>
 80019fa:	4b24      	ldr	r3, [pc, #144]	@ (8001a8c <main+0x56c>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	492c      	ldr	r1, [pc, #176]	@ (8001ab0 <main+0x590>)
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff fb17 	bl	8001034 <__aeabi_fcmplt>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d006      	beq.n	8001a1a <main+0x4fa>
	          HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET); // PUMP ON
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001a12:	4825      	ldr	r0, [pc, #148]	@ (8001aa8 <main+0x588>)
 8001a14:	f002 f82d 	bl	8003a72 <HAL_GPIO_WritePin>
 8001a18:	e017      	b.n	8001a4a <main+0x52a>
	      else if (percentRH > 70.0f || RH > 70)
 8001a1a:	4b18      	ldr	r3, [pc, #96]	@ (8001a7c <main+0x55c>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	491c      	ldr	r1, [pc, #112]	@ (8001a90 <main+0x570>)
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff fb25 	bl	8001070 <__aeabi_fcmpgt>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d108      	bne.n	8001a3e <main+0x51e>
 8001a2c:	4b17      	ldr	r3, [pc, #92]	@ (8001a8c <main+0x56c>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4917      	ldr	r1, [pc, #92]	@ (8001a90 <main+0x570>)
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff fb1c 	bl	8001070 <__aeabi_fcmpgt>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d005      	beq.n	8001a4a <main+0x52a>
	          HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);   // PUMP OFF
 8001a3e:	2201      	movs	r2, #1
 8001a40:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001a44:	4818      	ldr	r0, [pc, #96]	@ (8001aa8 <main+0x588>)
 8001a46:	f002 f814 	bl	8003a72 <HAL_GPIO_WritePin>
  {
 8001a4a:	e597      	b.n	800157c <main+0x5c>
 8001a4c:	20000398 	.word	0x20000398
 8001a50:	20000399 	.word	0x20000399
 8001a54:	2000039a 	.word	0x2000039a
 8001a58:	2000039b 	.word	0x2000039b
 8001a5c:	0800988c 	.word	0x0800988c
 8001a60:	2000039c 	.word	0x2000039c
 8001a64:	20000000 	.word	0x20000000
 8001a68:	20000370 	.word	0x20000370
 8001a6c:	20000374 	.word	0x20000374
 8001a70:	080098a0 	.word	0x080098a0
 8001a74:	080098b0 	.word	0x080098b0
 8001a78:	20000378 	.word	0x20000378
 8001a7c:	2000037c 	.word	0x2000037c
 8001a80:	080098b8 	.word	0x080098b8
 8001a84:	20000390 	.word	0x20000390
 8001a88:	41f00000 	.word	0x41f00000
 8001a8c:	20000394 	.word	0x20000394
 8001a90:	428c0000 	.word	0x428c0000
 8001a94:	40010800 	.word	0x40010800
 8001a98:	080098c8 	.word	0x080098c8
 8001a9c:	20000328 	.word	0x20000328
 8001aa0:	08009910 	.word	0x08009910
 8001aa4:	20000008 	.word	0x20000008
 8001aa8:	40010c00 	.word	0x40010c00
 8001aac:	42700000 	.word	0x42700000
 8001ab0:	42480000 	.word	0x42480000

08001ab4 <HAL_UART_RxCpltCallback>:
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a45      	ldr	r2, [pc, #276]	@ (8001bd8 <HAL_UART_RxCpltCallback+0x124>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	f040 8083 	bne.w	8001bce <HAL_UART_RxCpltCallback+0x11a>
  {
    if (rxByte == '\n' || rxByte == '\r')
 8001ac8:	4b44      	ldr	r3, [pc, #272]	@ (8001bdc <HAL_UART_RxCpltCallback+0x128>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	2b0a      	cmp	r3, #10
 8001ace:	d003      	beq.n	8001ad8 <HAL_UART_RxCpltCallback+0x24>
 8001ad0:	4b42      	ldr	r3, [pc, #264]	@ (8001bdc <HAL_UART_RxCpltCallback+0x128>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	2b0d      	cmp	r3, #13
 8001ad6:	d166      	bne.n	8001ba6 <HAL_UART_RxCpltCallback+0xf2>
    {
      cmdBuf[cmdIdx] = '\0';
 8001ad8:	4b41      	ldr	r3, [pc, #260]	@ (8001be0 <HAL_UART_RxCpltCallback+0x12c>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	461a      	mov	r2, r3
 8001ade:	4b41      	ldr	r3, [pc, #260]	@ (8001be4 <HAL_UART_RxCpltCallback+0x130>)
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	5499      	strb	r1, [r3, r2]

      if (strstr(cmdBuf, "MODE:auto"))      strcpy(currentMode, "auto");
 8001ae4:	4940      	ldr	r1, [pc, #256]	@ (8001be8 <HAL_UART_RxCpltCallback+0x134>)
 8001ae6:	483f      	ldr	r0, [pc, #252]	@ (8001be4 <HAL_UART_RxCpltCallback+0x130>)
 8001ae8:	f005 fe91 	bl	800780e <strstr>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d007      	beq.n	8001b02 <HAL_UART_RxCpltCallback+0x4e>
 8001af2:	4b3e      	ldr	r3, [pc, #248]	@ (8001bec <HAL_UART_RxCpltCallback+0x138>)
 8001af4:	4a3e      	ldr	r2, [pc, #248]	@ (8001bf0 <HAL_UART_RxCpltCallback+0x13c>)
 8001af6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001afa:	6018      	str	r0, [r3, #0]
 8001afc:	3304      	adds	r3, #4
 8001afe:	7019      	strb	r1, [r3, #0]
 8001b00:	e010      	b.n	8001b24 <HAL_UART_RxCpltCallback+0x70>
      else if (strstr(cmdBuf, "MODE:manual")) strcpy(currentMode, "manual");
 8001b02:	493c      	ldr	r1, [pc, #240]	@ (8001bf4 <HAL_UART_RxCpltCallback+0x140>)
 8001b04:	4837      	ldr	r0, [pc, #220]	@ (8001be4 <HAL_UART_RxCpltCallback+0x130>)
 8001b06:	f005 fe82 	bl	800780e <strstr>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d009      	beq.n	8001b24 <HAL_UART_RxCpltCallback+0x70>
 8001b10:	4b36      	ldr	r3, [pc, #216]	@ (8001bec <HAL_UART_RxCpltCallback+0x138>)
 8001b12:	4a39      	ldr	r2, [pc, #228]	@ (8001bf8 <HAL_UART_RxCpltCallback+0x144>)
 8001b14:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b18:	6018      	str	r0, [r3, #0]
 8001b1a:	3304      	adds	r3, #4
 8001b1c:	8019      	strh	r1, [r3, #0]
 8001b1e:	3302      	adds	r3, #2
 8001b20:	0c0a      	lsrs	r2, r1, #16
 8001b22:	701a      	strb	r2, [r3, #0]

      if (strcmp(currentMode, "manual") == 0) {
 8001b24:	4934      	ldr	r1, [pc, #208]	@ (8001bf8 <HAL_UART_RxCpltCallback+0x144>)
 8001b26:	4831      	ldr	r0, [pc, #196]	@ (8001bec <HAL_UART_RxCpltCallback+0x138>)
 8001b28:	f7fe fb12 	bl	8000150 <strcmp>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d135      	bne.n	8001b9e <HAL_UART_RxCpltCallback+0xea>
    	  if      (strstr(cmdBuf, "FAN:on"))   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8001b32:	4932      	ldr	r1, [pc, #200]	@ (8001bfc <HAL_UART_RxCpltCallback+0x148>)
 8001b34:	482b      	ldr	r0, [pc, #172]	@ (8001be4 <HAL_UART_RxCpltCallback+0x130>)
 8001b36:	f005 fe6a 	bl	800780e <strstr>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d006      	beq.n	8001b4e <HAL_UART_RxCpltCallback+0x9a>
 8001b40:	2200      	movs	r2, #0
 8001b42:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b46:	482e      	ldr	r0, [pc, #184]	@ (8001c00 <HAL_UART_RxCpltCallback+0x14c>)
 8001b48:	f001 ff93 	bl	8003a72 <HAL_GPIO_WritePin>
 8001b4c:	e00c      	b.n	8001b68 <HAL_UART_RxCpltCallback+0xb4>
    	  else if (strstr(cmdBuf, "FAN:off"))  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001b4e:	492d      	ldr	r1, [pc, #180]	@ (8001c04 <HAL_UART_RxCpltCallback+0x150>)
 8001b50:	4824      	ldr	r0, [pc, #144]	@ (8001be4 <HAL_UART_RxCpltCallback+0x130>)
 8001b52:	f005 fe5c 	bl	800780e <strstr>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d005      	beq.n	8001b68 <HAL_UART_RxCpltCallback+0xb4>
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b62:	4827      	ldr	r0, [pc, #156]	@ (8001c00 <HAL_UART_RxCpltCallback+0x14c>)
 8001b64:	f001 ff85 	bl	8003a72 <HAL_GPIO_WritePin>

    	  if      (strstr(cmdBuf, "PUMP:on"))  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001b68:	4927      	ldr	r1, [pc, #156]	@ (8001c08 <HAL_UART_RxCpltCallback+0x154>)
 8001b6a:	481e      	ldr	r0, [pc, #120]	@ (8001be4 <HAL_UART_RxCpltCallback+0x130>)
 8001b6c:	f005 fe4f 	bl	800780e <strstr>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d006      	beq.n	8001b84 <HAL_UART_RxCpltCallback+0xd0>
 8001b76:	2200      	movs	r2, #0
 8001b78:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001b7c:	4820      	ldr	r0, [pc, #128]	@ (8001c00 <HAL_UART_RxCpltCallback+0x14c>)
 8001b7e:	f001 ff78 	bl	8003a72 <HAL_GPIO_WritePin>
 8001b82:	e00c      	b.n	8001b9e <HAL_UART_RxCpltCallback+0xea>
    	  else if (strstr(cmdBuf, "PUMP:off")) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001b84:	4921      	ldr	r1, [pc, #132]	@ (8001c0c <HAL_UART_RxCpltCallback+0x158>)
 8001b86:	4817      	ldr	r0, [pc, #92]	@ (8001be4 <HAL_UART_RxCpltCallback+0x130>)
 8001b88:	f005 fe41 	bl	800780e <strstr>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d005      	beq.n	8001b9e <HAL_UART_RxCpltCallback+0xea>
 8001b92:	2201      	movs	r2, #1
 8001b94:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001b98:	4819      	ldr	r0, [pc, #100]	@ (8001c00 <HAL_UART_RxCpltCallback+0x14c>)
 8001b9a:	f001 ff6a 	bl	8003a72 <HAL_GPIO_WritePin>
      }
      cmdIdx = 0;
 8001b9e:	4b10      	ldr	r3, [pc, #64]	@ (8001be0 <HAL_UART_RxCpltCallback+0x12c>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	701a      	strb	r2, [r3, #0]
 8001ba4:	e00e      	b.n	8001bc4 <HAL_UART_RxCpltCallback+0x110>
    }
    else if (cmdIdx < sizeof(cmdBuf) - 1)
 8001ba6:	4b0e      	ldr	r3, [pc, #56]	@ (8001be0 <HAL_UART_RxCpltCallback+0x12c>)
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	2b1e      	cmp	r3, #30
 8001bac:	d80a      	bhi.n	8001bc4 <HAL_UART_RxCpltCallback+0x110>
    {
      cmdBuf[cmdIdx++] = rxByte;
 8001bae:	4b0c      	ldr	r3, [pc, #48]	@ (8001be0 <HAL_UART_RxCpltCallback+0x12c>)
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	1c5a      	adds	r2, r3, #1
 8001bb4:	b2d1      	uxtb	r1, r2
 8001bb6:	4a0a      	ldr	r2, [pc, #40]	@ (8001be0 <HAL_UART_RxCpltCallback+0x12c>)
 8001bb8:	7011      	strb	r1, [r2, #0]
 8001bba:	461a      	mov	r2, r3
 8001bbc:	4b07      	ldr	r3, [pc, #28]	@ (8001bdc <HAL_UART_RxCpltCallback+0x128>)
 8001bbe:	7819      	ldrb	r1, [r3, #0]
 8001bc0:	4b08      	ldr	r3, [pc, #32]	@ (8001be4 <HAL_UART_RxCpltCallback+0x130>)
 8001bc2:	5499      	strb	r1, [r3, r2]
    }

    HAL_UART_Receive_IT(&huart2, &rxByte, 1);
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	4905      	ldr	r1, [pc, #20]	@ (8001bdc <HAL_UART_RxCpltCallback+0x128>)
 8001bc8:	4811      	ldr	r0, [pc, #68]	@ (8001c10 <HAL_UART_RxCpltCallback+0x15c>)
 8001bca:	f004 fa00 	bl	8005fce <HAL_UART_Receive_IT>
  }
}
 8001bce:	bf00      	nop
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	40004400 	.word	0x40004400
 8001bdc:	200003bc 	.word	0x200003bc
 8001be0:	200003e0 	.word	0x200003e0
 8001be4:	200003c0 	.word	0x200003c0
 8001be8:	08009918 	.word	0x08009918
 8001bec:	20000008 	.word	0x20000008
 8001bf0:	08009910 	.word	0x08009910
 8001bf4:	08009924 	.word	0x08009924
 8001bf8:	08009930 	.word	0x08009930
 8001bfc:	08009938 	.word	0x08009938
 8001c00:	40010c00 	.word	0x40010c00
 8001c04:	08009940 	.word	0x08009940
 8001c08:	08009948 	.word	0x08009948
 8001c0c:	08009950 	.word	0x08009950
 8001c10:	20000328 	.word	0x20000328

08001c14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b094      	sub	sp, #80	@ 0x50
 8001c18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c1a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c1e:	2228      	movs	r2, #40	@ 0x28
 8001c20:	2100      	movs	r1, #0
 8001c22:	4618      	mov	r0, r3
 8001c24:	f005 fdeb 	bl	80077fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c28:	f107 0314 	add.w	r3, r7, #20
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	605a      	str	r2, [r3, #4]
 8001c32:	609a      	str	r2, [r3, #8]
 8001c34:	60da      	str	r2, [r3, #12]
 8001c36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c38:	1d3b      	adds	r3, r7, #4
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	601a      	str	r2, [r3, #0]
 8001c3e:	605a      	str	r2, [r3, #4]
 8001c40:	609a      	str	r2, [r3, #8]
 8001c42:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c44:	2301      	movs	r3, #1
 8001c46:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c48:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c52:	2301      	movs	r3, #1
 8001c54:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c56:	2302      	movs	r3, #2
 8001c58:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c5a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c5e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001c60:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001c64:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c66:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f003 f894 	bl	8004d98 <HAL_RCC_OscConfig>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001c76:	f000 f9c1 	bl	8001ffc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c7a:	230f      	movs	r3, #15
 8001c7c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c82:	2300      	movs	r3, #0
 8001c84:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c8a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c90:	f107 0314 	add.w	r3, r7, #20
 8001c94:	2102      	movs	r1, #2
 8001c96:	4618      	mov	r0, r3
 8001c98:	f003 fb00 	bl	800529c <HAL_RCC_ClockConfig>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001ca2:	f000 f9ab 	bl	8001ffc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001caa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001cae:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cb0:	1d3b      	adds	r3, r7, #4
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f003 fc80 	bl	80055b8 <HAL_RCCEx_PeriphCLKConfig>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001cbe:	f000 f99d 	bl	8001ffc <Error_Handler>
  }
}
 8001cc2:	bf00      	nop
 8001cc4:	3750      	adds	r7, #80	@ 0x50
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
	...

08001ccc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001cd2:	1d3b      	adds	r3, r7, #4
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	605a      	str	r2, [r3, #4]
 8001cda:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001cdc:	4b18      	ldr	r3, [pc, #96]	@ (8001d40 <MX_ADC1_Init+0x74>)
 8001cde:	4a19      	ldr	r2, [pc, #100]	@ (8001d44 <MX_ADC1_Init+0x78>)
 8001ce0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001ce2:	4b17      	ldr	r3, [pc, #92]	@ (8001d40 <MX_ADC1_Init+0x74>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001ce8:	4b15      	ldr	r3, [pc, #84]	@ (8001d40 <MX_ADC1_Init+0x74>)
 8001cea:	2201      	movs	r2, #1
 8001cec:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001cee:	4b14      	ldr	r3, [pc, #80]	@ (8001d40 <MX_ADC1_Init+0x74>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001cf4:	4b12      	ldr	r3, [pc, #72]	@ (8001d40 <MX_ADC1_Init+0x74>)
 8001cf6:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001cfa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001cfc:	4b10      	ldr	r3, [pc, #64]	@ (8001d40 <MX_ADC1_Init+0x74>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001d02:	4b0f      	ldr	r3, [pc, #60]	@ (8001d40 <MX_ADC1_Init+0x74>)
 8001d04:	2201      	movs	r2, #1
 8001d06:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d08:	480d      	ldr	r0, [pc, #52]	@ (8001d40 <MX_ADC1_Init+0x74>)
 8001d0a:	f000 ff2b 	bl	8002b64 <HAL_ADC_Init>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001d14:	f000 f972 	bl	8001ffc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001d20:	2300      	movs	r3, #0
 8001d22:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d24:	1d3b      	adds	r3, r7, #4
 8001d26:	4619      	mov	r1, r3
 8001d28:	4805      	ldr	r0, [pc, #20]	@ (8001d40 <MX_ADC1_Init+0x74>)
 8001d2a:	f001 f9b3 	bl	8003094 <HAL_ADC_ConfigChannel>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001d34:	f000 f962 	bl	8001ffc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001d38:	bf00      	nop
 8001d3a:	3710      	adds	r7, #16
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	20000208 	.word	0x20000208
 8001d44:	40012400 	.word	0x40012400

08001d48 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d4c:	4b12      	ldr	r3, [pc, #72]	@ (8001d98 <MX_I2C1_Init+0x50>)
 8001d4e:	4a13      	ldr	r2, [pc, #76]	@ (8001d9c <MX_I2C1_Init+0x54>)
 8001d50:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001d52:	4b11      	ldr	r3, [pc, #68]	@ (8001d98 <MX_I2C1_Init+0x50>)
 8001d54:	4a12      	ldr	r2, [pc, #72]	@ (8001da0 <MX_I2C1_Init+0x58>)
 8001d56:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d58:	4b0f      	ldr	r3, [pc, #60]	@ (8001d98 <MX_I2C1_Init+0x50>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001d5e:	4b0e      	ldr	r3, [pc, #56]	@ (8001d98 <MX_I2C1_Init+0x50>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d64:	4b0c      	ldr	r3, [pc, #48]	@ (8001d98 <MX_I2C1_Init+0x50>)
 8001d66:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001d6a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d6c:	4b0a      	ldr	r3, [pc, #40]	@ (8001d98 <MX_I2C1_Init+0x50>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001d72:	4b09      	ldr	r3, [pc, #36]	@ (8001d98 <MX_I2C1_Init+0x50>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d78:	4b07      	ldr	r3, [pc, #28]	@ (8001d98 <MX_I2C1_Init+0x50>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d7e:	4b06      	ldr	r3, [pc, #24]	@ (8001d98 <MX_I2C1_Init+0x50>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d84:	4804      	ldr	r0, [pc, #16]	@ (8001d98 <MX_I2C1_Init+0x50>)
 8001d86:	f001 fea5 	bl	8003ad4 <HAL_I2C_Init>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001d90:	f000 f934 	bl	8001ffc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d94:	bf00      	nop
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	20000238 	.word	0x20000238
 8001d9c:	40005400 	.word	0x40005400
 8001da0:	000186a0 	.word	0x000186a0

08001da4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001da8:	4b12      	ldr	r3, [pc, #72]	@ (8001df4 <MX_I2C2_Init+0x50>)
 8001daa:	4a13      	ldr	r2, [pc, #76]	@ (8001df8 <MX_I2C2_Init+0x54>)
 8001dac:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001dae:	4b11      	ldr	r3, [pc, #68]	@ (8001df4 <MX_I2C2_Init+0x50>)
 8001db0:	4a12      	ldr	r2, [pc, #72]	@ (8001dfc <MX_I2C2_Init+0x58>)
 8001db2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001db4:	4b0f      	ldr	r3, [pc, #60]	@ (8001df4 <MX_I2C2_Init+0x50>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001dba:	4b0e      	ldr	r3, [pc, #56]	@ (8001df4 <MX_I2C2_Init+0x50>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001dc0:	4b0c      	ldr	r3, [pc, #48]	@ (8001df4 <MX_I2C2_Init+0x50>)
 8001dc2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001dc6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001dc8:	4b0a      	ldr	r3, [pc, #40]	@ (8001df4 <MX_I2C2_Init+0x50>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001dce:	4b09      	ldr	r3, [pc, #36]	@ (8001df4 <MX_I2C2_Init+0x50>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001dd4:	4b07      	ldr	r3, [pc, #28]	@ (8001df4 <MX_I2C2_Init+0x50>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001dda:	4b06      	ldr	r3, [pc, #24]	@ (8001df4 <MX_I2C2_Init+0x50>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001de0:	4804      	ldr	r0, [pc, #16]	@ (8001df4 <MX_I2C2_Init+0x50>)
 8001de2:	f001 fe77 	bl	8003ad4 <HAL_I2C_Init>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001dec:	f000 f906 	bl	8001ffc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001df0:	bf00      	nop
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	2000028c 	.word	0x2000028c
 8001df8:	40005800 	.word	0x40005800
 8001dfc:	00061a80 	.word	0x00061a80

08001e00 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b086      	sub	sp, #24
 8001e04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e06:	f107 0308 	add.w	r3, r7, #8
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	601a      	str	r2, [r3, #0]
 8001e0e:	605a      	str	r2, [r3, #4]
 8001e10:	609a      	str	r2, [r3, #8]
 8001e12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e14:	463b      	mov	r3, r7
 8001e16:	2200      	movs	r2, #0
 8001e18:	601a      	str	r2, [r3, #0]
 8001e1a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e1c:	4b1e      	ldr	r3, [pc, #120]	@ (8001e98 <MX_TIM1_Init+0x98>)
 8001e1e:	4a1f      	ldr	r2, [pc, #124]	@ (8001e9c <MX_TIM1_Init+0x9c>)
 8001e20:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001e22:	4b1d      	ldr	r3, [pc, #116]	@ (8001e98 <MX_TIM1_Init+0x98>)
 8001e24:	2247      	movs	r2, #71	@ 0x47
 8001e26:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e28:	4b1b      	ldr	r3, [pc, #108]	@ (8001e98 <MX_TIM1_Init+0x98>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001e2e:	4b1a      	ldr	r3, [pc, #104]	@ (8001e98 <MX_TIM1_Init+0x98>)
 8001e30:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e34:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e36:	4b18      	ldr	r3, [pc, #96]	@ (8001e98 <MX_TIM1_Init+0x98>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e3c:	4b16      	ldr	r3, [pc, #88]	@ (8001e98 <MX_TIM1_Init+0x98>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e42:	4b15      	ldr	r3, [pc, #84]	@ (8001e98 <MX_TIM1_Init+0x98>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001e48:	4813      	ldr	r0, [pc, #76]	@ (8001e98 <MX_TIM1_Init+0x98>)
 8001e4a:	f003 fd21 	bl	8005890 <HAL_TIM_Base_Init>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001e54:	f000 f8d2 	bl	8001ffc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e5c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001e5e:	f107 0308 	add.w	r3, r7, #8
 8001e62:	4619      	mov	r1, r3
 8001e64:	480c      	ldr	r0, [pc, #48]	@ (8001e98 <MX_TIM1_Init+0x98>)
 8001e66:	f003 fdad 	bl	80059c4 <HAL_TIM_ConfigClockSource>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001e70:	f000 f8c4 	bl	8001ffc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e74:	2300      	movs	r3, #0
 8001e76:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e7c:	463b      	mov	r3, r7
 8001e7e:	4619      	mov	r1, r3
 8001e80:	4805      	ldr	r0, [pc, #20]	@ (8001e98 <MX_TIM1_Init+0x98>)
 8001e82:	f003 ff6b 	bl	8005d5c <HAL_TIMEx_MasterConfigSynchronization>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001e8c:	f000 f8b6 	bl	8001ffc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001e90:	bf00      	nop
 8001e92:	3718      	adds	r7, #24
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	200002e0 	.word	0x200002e0
 8001e9c:	40012c00 	.word	0x40012c00

08001ea0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ea4:	4b11      	ldr	r3, [pc, #68]	@ (8001eec <MX_USART2_UART_Init+0x4c>)
 8001ea6:	4a12      	ldr	r2, [pc, #72]	@ (8001ef0 <MX_USART2_UART_Init+0x50>)
 8001ea8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001eaa:	4b10      	ldr	r3, [pc, #64]	@ (8001eec <MX_USART2_UART_Init+0x4c>)
 8001eac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001eb0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001eb2:	4b0e      	ldr	r3, [pc, #56]	@ (8001eec <MX_USART2_UART_Init+0x4c>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001eb8:	4b0c      	ldr	r3, [pc, #48]	@ (8001eec <MX_USART2_UART_Init+0x4c>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ebe:	4b0b      	ldr	r3, [pc, #44]	@ (8001eec <MX_USART2_UART_Init+0x4c>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ec4:	4b09      	ldr	r3, [pc, #36]	@ (8001eec <MX_USART2_UART_Init+0x4c>)
 8001ec6:	220c      	movs	r2, #12
 8001ec8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eca:	4b08      	ldr	r3, [pc, #32]	@ (8001eec <MX_USART2_UART_Init+0x4c>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ed0:	4b06      	ldr	r3, [pc, #24]	@ (8001eec <MX_USART2_UART_Init+0x4c>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ed6:	4805      	ldr	r0, [pc, #20]	@ (8001eec <MX_USART2_UART_Init+0x4c>)
 8001ed8:	f003 ff9e 	bl	8005e18 <HAL_UART_Init>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001ee2:	f000 f88b 	bl	8001ffc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ee6:	bf00      	nop
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	20000328 	.word	0x20000328
 8001ef0:	40004400 	.word	0x40004400

08001ef4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b088      	sub	sp, #32
 8001ef8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001efa:	f107 0310 	add.w	r3, r7, #16
 8001efe:	2200      	movs	r2, #0
 8001f00:	601a      	str	r2, [r3, #0]
 8001f02:	605a      	str	r2, [r3, #4]
 8001f04:	609a      	str	r2, [r3, #8]
 8001f06:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f08:	4b38      	ldr	r3, [pc, #224]	@ (8001fec <MX_GPIO_Init+0xf8>)
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	4a37      	ldr	r2, [pc, #220]	@ (8001fec <MX_GPIO_Init+0xf8>)
 8001f0e:	f043 0310 	orr.w	r3, r3, #16
 8001f12:	6193      	str	r3, [r2, #24]
 8001f14:	4b35      	ldr	r3, [pc, #212]	@ (8001fec <MX_GPIO_Init+0xf8>)
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	f003 0310 	and.w	r3, r3, #16
 8001f1c:	60fb      	str	r3, [r7, #12]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f20:	4b32      	ldr	r3, [pc, #200]	@ (8001fec <MX_GPIO_Init+0xf8>)
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	4a31      	ldr	r2, [pc, #196]	@ (8001fec <MX_GPIO_Init+0xf8>)
 8001f26:	f043 0320 	orr.w	r3, r3, #32
 8001f2a:	6193      	str	r3, [r2, #24]
 8001f2c:	4b2f      	ldr	r3, [pc, #188]	@ (8001fec <MX_GPIO_Init+0xf8>)
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	f003 0320 	and.w	r3, r3, #32
 8001f34:	60bb      	str	r3, [r7, #8]
 8001f36:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f38:	4b2c      	ldr	r3, [pc, #176]	@ (8001fec <MX_GPIO_Init+0xf8>)
 8001f3a:	699b      	ldr	r3, [r3, #24]
 8001f3c:	4a2b      	ldr	r2, [pc, #172]	@ (8001fec <MX_GPIO_Init+0xf8>)
 8001f3e:	f043 0304 	orr.w	r3, r3, #4
 8001f42:	6193      	str	r3, [r2, #24]
 8001f44:	4b29      	ldr	r3, [pc, #164]	@ (8001fec <MX_GPIO_Init+0xf8>)
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	f003 0304 	and.w	r3, r3, #4
 8001f4c:	607b      	str	r3, [r7, #4]
 8001f4e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f50:	4b26      	ldr	r3, [pc, #152]	@ (8001fec <MX_GPIO_Init+0xf8>)
 8001f52:	699b      	ldr	r3, [r3, #24]
 8001f54:	4a25      	ldr	r2, [pc, #148]	@ (8001fec <MX_GPIO_Init+0xf8>)
 8001f56:	f043 0308 	orr.w	r3, r3, #8
 8001f5a:	6193      	str	r3, [r2, #24]
 8001f5c:	4b23      	ldr	r3, [pc, #140]	@ (8001fec <MX_GPIO_Init+0xf8>)
 8001f5e:	699b      	ldr	r3, [r3, #24]
 8001f60:	f003 0308 	and.w	r3, r3, #8
 8001f64:	603b      	str	r3, [r7, #0]
 8001f66:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001f6e:	4820      	ldr	r0, [pc, #128]	@ (8001ff0 <MX_GPIO_Init+0xfc>)
 8001f70:	f001 fd7f 	bl	8003a72 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001f74:	2200      	movs	r2, #0
 8001f76:	2102      	movs	r1, #2
 8001f78:	481e      	ldr	r0, [pc, #120]	@ (8001ff4 <MX_GPIO_Init+0x100>)
 8001f7a:	f001 fd7a 	bl	8003a72 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_9, GPIO_PIN_RESET);
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f44f 5148 	mov.w	r1, #12800	@ 0x3200
 8001f84:	481c      	ldr	r0, [pc, #112]	@ (8001ff8 <MX_GPIO_Init+0x104>)
 8001f86:	f001 fd74 	bl	8003a72 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001f8a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f90:	2301      	movs	r3, #1
 8001f92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f94:	2300      	movs	r3, #0
 8001f96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f98:	2302      	movs	r3, #2
 8001f9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f9c:	f107 0310 	add.w	r3, r7, #16
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	4813      	ldr	r0, [pc, #76]	@ (8001ff0 <MX_GPIO_Init+0xfc>)
 8001fa4:	f001 fbca 	bl	800373c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001fa8:	2302      	movs	r3, #2
 8001faa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fac:	2301      	movs	r3, #1
 8001fae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb8:	f107 0310 	add.w	r3, r7, #16
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	480d      	ldr	r0, [pc, #52]	@ (8001ff4 <MX_GPIO_Init+0x100>)
 8001fc0:	f001 fbbc 	bl	800373c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_9;
 8001fc4:	f44f 5348 	mov.w	r3, #12800	@ 0x3200
 8001fc8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fd6:	f107 0310 	add.w	r3, r7, #16
 8001fda:	4619      	mov	r1, r3
 8001fdc:	4806      	ldr	r0, [pc, #24]	@ (8001ff8 <MX_GPIO_Init+0x104>)
 8001fde:	f001 fbad 	bl	800373c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001fe2:	bf00      	nop
 8001fe4:	3720      	adds	r7, #32
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	40011000 	.word	0x40011000
 8001ff4:	40010800 	.word	0x40010800
 8001ff8:	40010c00 	.word	0x40010c00

08001ffc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002000:	b672      	cpsid	i
}
 8002002:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002004:	bf00      	nop
 8002006:	e7fd      	b.n	8002004 <Error_Handler+0x8>

08002008 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800200e:	f000 fa1d 	bl	800244c <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c2, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8002012:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8002016:	2201      	movs	r2, #1
 8002018:	2178      	movs	r1, #120	@ 0x78
 800201a:	485b      	ldr	r0, [pc, #364]	@ (8002188 <SSD1306_Init+0x180>)
 800201c:	f002 fa08 	bl	8004430 <HAL_I2C_IsDeviceReady>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8002026:	2300      	movs	r3, #0
 8002028:	e0a9      	b.n	800217e <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 800202a:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800202e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002030:	e002      	b.n	8002038 <SSD1306_Init+0x30>
		p--;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	3b01      	subs	r3, #1
 8002036:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d1f9      	bne.n	8002032 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800203e:	22ae      	movs	r2, #174	@ 0xae
 8002040:	2100      	movs	r1, #0
 8002042:	2078      	movs	r0, #120	@ 0x78
 8002044:	f000 fa7c 	bl	8002540 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8002048:	2220      	movs	r2, #32
 800204a:	2100      	movs	r1, #0
 800204c:	2078      	movs	r0, #120	@ 0x78
 800204e:	f000 fa77 	bl	8002540 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8002052:	2210      	movs	r2, #16
 8002054:	2100      	movs	r1, #0
 8002056:	2078      	movs	r0, #120	@ 0x78
 8002058:	f000 fa72 	bl	8002540 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800205c:	22b0      	movs	r2, #176	@ 0xb0
 800205e:	2100      	movs	r1, #0
 8002060:	2078      	movs	r0, #120	@ 0x78
 8002062:	f000 fa6d 	bl	8002540 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8002066:	22c8      	movs	r2, #200	@ 0xc8
 8002068:	2100      	movs	r1, #0
 800206a:	2078      	movs	r0, #120	@ 0x78
 800206c:	f000 fa68 	bl	8002540 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8002070:	2200      	movs	r2, #0
 8002072:	2100      	movs	r1, #0
 8002074:	2078      	movs	r0, #120	@ 0x78
 8002076:	f000 fa63 	bl	8002540 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800207a:	2210      	movs	r2, #16
 800207c:	2100      	movs	r1, #0
 800207e:	2078      	movs	r0, #120	@ 0x78
 8002080:	f000 fa5e 	bl	8002540 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8002084:	2240      	movs	r2, #64	@ 0x40
 8002086:	2100      	movs	r1, #0
 8002088:	2078      	movs	r0, #120	@ 0x78
 800208a:	f000 fa59 	bl	8002540 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800208e:	2281      	movs	r2, #129	@ 0x81
 8002090:	2100      	movs	r1, #0
 8002092:	2078      	movs	r0, #120	@ 0x78
 8002094:	f000 fa54 	bl	8002540 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8002098:	22ff      	movs	r2, #255	@ 0xff
 800209a:	2100      	movs	r1, #0
 800209c:	2078      	movs	r0, #120	@ 0x78
 800209e:	f000 fa4f 	bl	8002540 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80020a2:	22a1      	movs	r2, #161	@ 0xa1
 80020a4:	2100      	movs	r1, #0
 80020a6:	2078      	movs	r0, #120	@ 0x78
 80020a8:	f000 fa4a 	bl	8002540 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80020ac:	22a6      	movs	r2, #166	@ 0xa6
 80020ae:	2100      	movs	r1, #0
 80020b0:	2078      	movs	r0, #120	@ 0x78
 80020b2:	f000 fa45 	bl	8002540 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80020b6:	22a8      	movs	r2, #168	@ 0xa8
 80020b8:	2100      	movs	r1, #0
 80020ba:	2078      	movs	r0, #120	@ 0x78
 80020bc:	f000 fa40 	bl	8002540 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80020c0:	223f      	movs	r2, #63	@ 0x3f
 80020c2:	2100      	movs	r1, #0
 80020c4:	2078      	movs	r0, #120	@ 0x78
 80020c6:	f000 fa3b 	bl	8002540 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80020ca:	22a4      	movs	r2, #164	@ 0xa4
 80020cc:	2100      	movs	r1, #0
 80020ce:	2078      	movs	r0, #120	@ 0x78
 80020d0:	f000 fa36 	bl	8002540 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80020d4:	22d3      	movs	r2, #211	@ 0xd3
 80020d6:	2100      	movs	r1, #0
 80020d8:	2078      	movs	r0, #120	@ 0x78
 80020da:	f000 fa31 	bl	8002540 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80020de:	2200      	movs	r2, #0
 80020e0:	2100      	movs	r1, #0
 80020e2:	2078      	movs	r0, #120	@ 0x78
 80020e4:	f000 fa2c 	bl	8002540 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80020e8:	22d5      	movs	r2, #213	@ 0xd5
 80020ea:	2100      	movs	r1, #0
 80020ec:	2078      	movs	r0, #120	@ 0x78
 80020ee:	f000 fa27 	bl	8002540 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80020f2:	22f0      	movs	r2, #240	@ 0xf0
 80020f4:	2100      	movs	r1, #0
 80020f6:	2078      	movs	r0, #120	@ 0x78
 80020f8:	f000 fa22 	bl	8002540 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80020fc:	22d9      	movs	r2, #217	@ 0xd9
 80020fe:	2100      	movs	r1, #0
 8002100:	2078      	movs	r0, #120	@ 0x78
 8002102:	f000 fa1d 	bl	8002540 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8002106:	2222      	movs	r2, #34	@ 0x22
 8002108:	2100      	movs	r1, #0
 800210a:	2078      	movs	r0, #120	@ 0x78
 800210c:	f000 fa18 	bl	8002540 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8002110:	22da      	movs	r2, #218	@ 0xda
 8002112:	2100      	movs	r1, #0
 8002114:	2078      	movs	r0, #120	@ 0x78
 8002116:	f000 fa13 	bl	8002540 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800211a:	2212      	movs	r2, #18
 800211c:	2100      	movs	r1, #0
 800211e:	2078      	movs	r0, #120	@ 0x78
 8002120:	f000 fa0e 	bl	8002540 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8002124:	22db      	movs	r2, #219	@ 0xdb
 8002126:	2100      	movs	r1, #0
 8002128:	2078      	movs	r0, #120	@ 0x78
 800212a:	f000 fa09 	bl	8002540 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800212e:	2220      	movs	r2, #32
 8002130:	2100      	movs	r1, #0
 8002132:	2078      	movs	r0, #120	@ 0x78
 8002134:	f000 fa04 	bl	8002540 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8002138:	228d      	movs	r2, #141	@ 0x8d
 800213a:	2100      	movs	r1, #0
 800213c:	2078      	movs	r0, #120	@ 0x78
 800213e:	f000 f9ff 	bl	8002540 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8002142:	2214      	movs	r2, #20
 8002144:	2100      	movs	r1, #0
 8002146:	2078      	movs	r0, #120	@ 0x78
 8002148:	f000 f9fa 	bl	8002540 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 800214c:	22af      	movs	r2, #175	@ 0xaf
 800214e:	2100      	movs	r1, #0
 8002150:	2078      	movs	r0, #120	@ 0x78
 8002152:	f000 f9f5 	bl	8002540 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8002156:	222e      	movs	r2, #46	@ 0x2e
 8002158:	2100      	movs	r1, #0
 800215a:	2078      	movs	r0, #120	@ 0x78
 800215c:	f000 f9f0 	bl	8002540 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002160:	2000      	movs	r0, #0
 8002162:	f000 f843 	bl	80021ec <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8002166:	f000 f813 	bl	8002190 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 800216a:	4b08      	ldr	r3, [pc, #32]	@ (800218c <SSD1306_Init+0x184>)
 800216c:	2200      	movs	r2, #0
 800216e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8002170:	4b06      	ldr	r3, [pc, #24]	@ (800218c <SSD1306_Init+0x184>)
 8002172:	2200      	movs	r2, #0
 8002174:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8002176:	4b05      	ldr	r3, [pc, #20]	@ (800218c <SSD1306_Init+0x184>)
 8002178:	2201      	movs	r2, #1
 800217a:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 800217c:	2301      	movs	r3, #1
}
 800217e:	4618      	mov	r0, r3
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	2000028c 	.word	0x2000028c
 800218c:	200007e4 	.word	0x200007e4

08002190 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8002196:	2300      	movs	r3, #0
 8002198:	71fb      	strb	r3, [r7, #7]
 800219a:	e01d      	b.n	80021d8 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 800219c:	79fb      	ldrb	r3, [r7, #7]
 800219e:	3b50      	subs	r3, #80	@ 0x50
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	461a      	mov	r2, r3
 80021a4:	2100      	movs	r1, #0
 80021a6:	2078      	movs	r0, #120	@ 0x78
 80021a8:	f000 f9ca 	bl	8002540 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80021ac:	2200      	movs	r2, #0
 80021ae:	2100      	movs	r1, #0
 80021b0:	2078      	movs	r0, #120	@ 0x78
 80021b2:	f000 f9c5 	bl	8002540 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80021b6:	2210      	movs	r2, #16
 80021b8:	2100      	movs	r1, #0
 80021ba:	2078      	movs	r0, #120	@ 0x78
 80021bc:	f000 f9c0 	bl	8002540 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80021c0:	79fb      	ldrb	r3, [r7, #7]
 80021c2:	01db      	lsls	r3, r3, #7
 80021c4:	4a08      	ldr	r2, [pc, #32]	@ (80021e8 <SSD1306_UpdateScreen+0x58>)
 80021c6:	441a      	add	r2, r3
 80021c8:	2380      	movs	r3, #128	@ 0x80
 80021ca:	2140      	movs	r1, #64	@ 0x40
 80021cc:	2078      	movs	r0, #120	@ 0x78
 80021ce:	f000 f951 	bl	8002474 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80021d2:	79fb      	ldrb	r3, [r7, #7]
 80021d4:	3301      	adds	r3, #1
 80021d6:	71fb      	strb	r3, [r7, #7]
 80021d8:	79fb      	ldrb	r3, [r7, #7]
 80021da:	2b07      	cmp	r3, #7
 80021dc:	d9de      	bls.n	800219c <SSD1306_UpdateScreen+0xc>
	}
}
 80021de:	bf00      	nop
 80021e0:	bf00      	nop
 80021e2:	3708      	adds	r7, #8
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	200003e4 	.word	0x200003e4

080021ec <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	4603      	mov	r3, r0
 80021f4:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80021f6:	79fb      	ldrb	r3, [r7, #7]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d101      	bne.n	8002200 <SSD1306_Fill+0x14>
 80021fc:	2300      	movs	r3, #0
 80021fe:	e000      	b.n	8002202 <SSD1306_Fill+0x16>
 8002200:	23ff      	movs	r3, #255	@ 0xff
 8002202:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002206:	4619      	mov	r1, r3
 8002208:	4803      	ldr	r0, [pc, #12]	@ (8002218 <SSD1306_Fill+0x2c>)
 800220a:	f005 faf8 	bl	80077fe <memset>
}
 800220e:	bf00      	nop
 8002210:	3708      	adds	r7, #8
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	200003e4 	.word	0x200003e4

0800221c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	4603      	mov	r3, r0
 8002224:	80fb      	strh	r3, [r7, #6]
 8002226:	460b      	mov	r3, r1
 8002228:	80bb      	strh	r3, [r7, #4]
 800222a:	4613      	mov	r3, r2
 800222c:	70fb      	strb	r3, [r7, #3]
	if (
 800222e:	88fb      	ldrh	r3, [r7, #6]
 8002230:	2b7f      	cmp	r3, #127	@ 0x7f
 8002232:	d848      	bhi.n	80022c6 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8002234:	88bb      	ldrh	r3, [r7, #4]
 8002236:	2b3f      	cmp	r3, #63	@ 0x3f
 8002238:	d845      	bhi.n	80022c6 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800223a:	4b25      	ldr	r3, [pc, #148]	@ (80022d0 <SSD1306_DrawPixel+0xb4>)
 800223c:	791b      	ldrb	r3, [r3, #4]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d006      	beq.n	8002250 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8002242:	78fb      	ldrb	r3, [r7, #3]
 8002244:	2b00      	cmp	r3, #0
 8002246:	bf0c      	ite	eq
 8002248:	2301      	moveq	r3, #1
 800224a:	2300      	movne	r3, #0
 800224c:	b2db      	uxtb	r3, r3
 800224e:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8002250:	78fb      	ldrb	r3, [r7, #3]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d11a      	bne.n	800228c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002256:	88fa      	ldrh	r2, [r7, #6]
 8002258:	88bb      	ldrh	r3, [r7, #4]
 800225a:	08db      	lsrs	r3, r3, #3
 800225c:	b298      	uxth	r0, r3
 800225e:	4603      	mov	r3, r0
 8002260:	01db      	lsls	r3, r3, #7
 8002262:	4413      	add	r3, r2
 8002264:	4a1b      	ldr	r2, [pc, #108]	@ (80022d4 <SSD1306_DrawPixel+0xb8>)
 8002266:	5cd3      	ldrb	r3, [r2, r3]
 8002268:	b25a      	sxtb	r2, r3
 800226a:	88bb      	ldrh	r3, [r7, #4]
 800226c:	f003 0307 	and.w	r3, r3, #7
 8002270:	2101      	movs	r1, #1
 8002272:	fa01 f303 	lsl.w	r3, r1, r3
 8002276:	b25b      	sxtb	r3, r3
 8002278:	4313      	orrs	r3, r2
 800227a:	b259      	sxtb	r1, r3
 800227c:	88fa      	ldrh	r2, [r7, #6]
 800227e:	4603      	mov	r3, r0
 8002280:	01db      	lsls	r3, r3, #7
 8002282:	4413      	add	r3, r2
 8002284:	b2c9      	uxtb	r1, r1
 8002286:	4a13      	ldr	r2, [pc, #76]	@ (80022d4 <SSD1306_DrawPixel+0xb8>)
 8002288:	54d1      	strb	r1, [r2, r3]
 800228a:	e01d      	b.n	80022c8 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800228c:	88fa      	ldrh	r2, [r7, #6]
 800228e:	88bb      	ldrh	r3, [r7, #4]
 8002290:	08db      	lsrs	r3, r3, #3
 8002292:	b298      	uxth	r0, r3
 8002294:	4603      	mov	r3, r0
 8002296:	01db      	lsls	r3, r3, #7
 8002298:	4413      	add	r3, r2
 800229a:	4a0e      	ldr	r2, [pc, #56]	@ (80022d4 <SSD1306_DrawPixel+0xb8>)
 800229c:	5cd3      	ldrb	r3, [r2, r3]
 800229e:	b25a      	sxtb	r2, r3
 80022a0:	88bb      	ldrh	r3, [r7, #4]
 80022a2:	f003 0307 	and.w	r3, r3, #7
 80022a6:	2101      	movs	r1, #1
 80022a8:	fa01 f303 	lsl.w	r3, r1, r3
 80022ac:	b25b      	sxtb	r3, r3
 80022ae:	43db      	mvns	r3, r3
 80022b0:	b25b      	sxtb	r3, r3
 80022b2:	4013      	ands	r3, r2
 80022b4:	b259      	sxtb	r1, r3
 80022b6:	88fa      	ldrh	r2, [r7, #6]
 80022b8:	4603      	mov	r3, r0
 80022ba:	01db      	lsls	r3, r3, #7
 80022bc:	4413      	add	r3, r2
 80022be:	b2c9      	uxtb	r1, r1
 80022c0:	4a04      	ldr	r2, [pc, #16]	@ (80022d4 <SSD1306_DrawPixel+0xb8>)
 80022c2:	54d1      	strb	r1, [r2, r3]
 80022c4:	e000      	b.n	80022c8 <SSD1306_DrawPixel+0xac>
		return;
 80022c6:	bf00      	nop
	}
}
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bc80      	pop	{r7}
 80022ce:	4770      	bx	lr
 80022d0:	200007e4 	.word	0x200007e4
 80022d4:	200003e4 	.word	0x200003e4

080022d8 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	4603      	mov	r3, r0
 80022e0:	460a      	mov	r2, r1
 80022e2:	80fb      	strh	r3, [r7, #6]
 80022e4:	4613      	mov	r3, r2
 80022e6:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80022e8:	4a05      	ldr	r2, [pc, #20]	@ (8002300 <SSD1306_GotoXY+0x28>)
 80022ea:	88fb      	ldrh	r3, [r7, #6]
 80022ec:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80022ee:	4a04      	ldr	r2, [pc, #16]	@ (8002300 <SSD1306_GotoXY+0x28>)
 80022f0:	88bb      	ldrh	r3, [r7, #4]
 80022f2:	8053      	strh	r3, [r2, #2]
}
 80022f4:	bf00      	nop
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bc80      	pop	{r7}
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	200007e4 	.word	0x200007e4

08002304 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002304:	b580      	push	{r7, lr}
 8002306:	b086      	sub	sp, #24
 8002308:	af00      	add	r7, sp, #0
 800230a:	4603      	mov	r3, r0
 800230c:	6039      	str	r1, [r7, #0]
 800230e:	71fb      	strb	r3, [r7, #7]
 8002310:	4613      	mov	r3, r2
 8002312:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002314:	4b39      	ldr	r3, [pc, #228]	@ (80023fc <SSD1306_Putc+0xf8>)
 8002316:	881b      	ldrh	r3, [r3, #0]
 8002318:	461a      	mov	r2, r3
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	4413      	add	r3, r2
	if (
 8002320:	2b7f      	cmp	r3, #127	@ 0x7f
 8002322:	dc07      	bgt.n	8002334 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8002324:	4b35      	ldr	r3, [pc, #212]	@ (80023fc <SSD1306_Putc+0xf8>)
 8002326:	885b      	ldrh	r3, [r3, #2]
 8002328:	461a      	mov	r2, r3
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	785b      	ldrb	r3, [r3, #1]
 800232e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002330:	2b3f      	cmp	r3, #63	@ 0x3f
 8002332:	dd01      	ble.n	8002338 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8002334:	2300      	movs	r3, #0
 8002336:	e05d      	b.n	80023f4 <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8002338:	2300      	movs	r3, #0
 800233a:	617b      	str	r3, [r7, #20]
 800233c:	e04b      	b.n	80023d6 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	685a      	ldr	r2, [r3, #4]
 8002342:	79fb      	ldrb	r3, [r7, #7]
 8002344:	3b20      	subs	r3, #32
 8002346:	6839      	ldr	r1, [r7, #0]
 8002348:	7849      	ldrb	r1, [r1, #1]
 800234a:	fb01 f303 	mul.w	r3, r1, r3
 800234e:	4619      	mov	r1, r3
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	440b      	add	r3, r1
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	4413      	add	r3, r2
 8002358:	881b      	ldrh	r3, [r3, #0]
 800235a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 800235c:	2300      	movs	r3, #0
 800235e:	613b      	str	r3, [r7, #16]
 8002360:	e030      	b.n	80023c4 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8002362:	68fa      	ldr	r2, [r7, #12]
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	fa02 f303 	lsl.w	r3, r2, r3
 800236a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d010      	beq.n	8002394 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8002372:	4b22      	ldr	r3, [pc, #136]	@ (80023fc <SSD1306_Putc+0xf8>)
 8002374:	881a      	ldrh	r2, [r3, #0]
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	b29b      	uxth	r3, r3
 800237a:	4413      	add	r3, r2
 800237c:	b298      	uxth	r0, r3
 800237e:	4b1f      	ldr	r3, [pc, #124]	@ (80023fc <SSD1306_Putc+0xf8>)
 8002380:	885a      	ldrh	r2, [r3, #2]
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	b29b      	uxth	r3, r3
 8002386:	4413      	add	r3, r2
 8002388:	b29b      	uxth	r3, r3
 800238a:	79ba      	ldrb	r2, [r7, #6]
 800238c:	4619      	mov	r1, r3
 800238e:	f7ff ff45 	bl	800221c <SSD1306_DrawPixel>
 8002392:	e014      	b.n	80023be <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8002394:	4b19      	ldr	r3, [pc, #100]	@ (80023fc <SSD1306_Putc+0xf8>)
 8002396:	881a      	ldrh	r2, [r3, #0]
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	b29b      	uxth	r3, r3
 800239c:	4413      	add	r3, r2
 800239e:	b298      	uxth	r0, r3
 80023a0:	4b16      	ldr	r3, [pc, #88]	@ (80023fc <SSD1306_Putc+0xf8>)
 80023a2:	885a      	ldrh	r2, [r3, #2]
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	4413      	add	r3, r2
 80023aa:	b299      	uxth	r1, r3
 80023ac:	79bb      	ldrb	r3, [r7, #6]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	bf0c      	ite	eq
 80023b2:	2301      	moveq	r3, #1
 80023b4:	2300      	movne	r3, #0
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	461a      	mov	r2, r3
 80023ba:	f7ff ff2f 	bl	800221c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	3301      	adds	r3, #1
 80023c2:	613b      	str	r3, [r7, #16]
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	461a      	mov	r2, r3
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d3c8      	bcc.n	8002362 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	3301      	adds	r3, #1
 80023d4:	617b      	str	r3, [r7, #20]
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	785b      	ldrb	r3, [r3, #1]
 80023da:	461a      	mov	r2, r3
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	4293      	cmp	r3, r2
 80023e0:	d3ad      	bcc.n	800233e <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80023e2:	4b06      	ldr	r3, [pc, #24]	@ (80023fc <SSD1306_Putc+0xf8>)
 80023e4:	881b      	ldrh	r3, [r3, #0]
 80023e6:	683a      	ldr	r2, [r7, #0]
 80023e8:	7812      	ldrb	r2, [r2, #0]
 80023ea:	4413      	add	r3, r2
 80023ec:	b29a      	uxth	r2, r3
 80023ee:	4b03      	ldr	r3, [pc, #12]	@ (80023fc <SSD1306_Putc+0xf8>)
 80023f0:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 80023f2:	79fb      	ldrb	r3, [r7, #7]
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3718      	adds	r7, #24
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	200007e4 	.word	0x200007e4

08002400 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	4613      	mov	r3, r2
 800240c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800240e:	e012      	b.n	8002436 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	79fa      	ldrb	r2, [r7, #7]
 8002416:	68b9      	ldr	r1, [r7, #8]
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff ff73 	bl	8002304 <SSD1306_Putc>
 800241e:	4603      	mov	r3, r0
 8002420:	461a      	mov	r2, r3
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	429a      	cmp	r2, r3
 8002428:	d002      	beq.n	8002430 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	e008      	b.n	8002442 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	3301      	adds	r3, #1
 8002434:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1e8      	bne.n	8002410 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	781b      	ldrb	r3, [r3, #0]
}
 8002442:	4618      	mov	r0, r3
 8002444:	3710      	adds	r7, #16
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
	...

0800244c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
	//MX_I2C2_Init();
	uint32_t p = 250000;
 8002452:	4b07      	ldr	r3, [pc, #28]	@ (8002470 <ssd1306_I2C_Init+0x24>)
 8002454:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002456:	e002      	b.n	800245e <ssd1306_I2C_Init+0x12>
		p--;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	3b01      	subs	r3, #1
 800245c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d1f9      	bne.n	8002458 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8002464:	bf00      	nop
 8002466:	bf00      	nop
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	bc80      	pop	{r7}
 800246e:	4770      	bx	lr
 8002470:	0003d090 	.word	0x0003d090

08002474 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8002474:	b590      	push	{r4, r7, lr}
 8002476:	b0c7      	sub	sp, #284	@ 0x11c
 8002478:	af02      	add	r7, sp, #8
 800247a:	4604      	mov	r4, r0
 800247c:	4608      	mov	r0, r1
 800247e:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8002482:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8002486:	600a      	str	r2, [r1, #0]
 8002488:	4619      	mov	r1, r3
 800248a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800248e:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8002492:	4622      	mov	r2, r4
 8002494:	701a      	strb	r2, [r3, #0]
 8002496:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800249a:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 800249e:	4602      	mov	r2, r0
 80024a0:	701a      	strb	r2, [r3, #0]
 80024a2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80024a6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80024aa:	460a      	mov	r2, r1
 80024ac:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80024ae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80024b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80024b6:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80024ba:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 80024be:	7812      	ldrb	r2, [r2, #0]
 80024c0:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80024c2:	2300      	movs	r3, #0
 80024c4:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80024c8:	e015      	b.n	80024f6 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80024ca:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80024ce:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80024d2:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 80024d6:	6812      	ldr	r2, [r2, #0]
 80024d8:	441a      	add	r2, r3
 80024da:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80024de:	3301      	adds	r3, #1
 80024e0:	7811      	ldrb	r1, [r2, #0]
 80024e2:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80024e6:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 80024ea:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80024ec:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80024f0:	3301      	adds	r3, #1
 80024f2:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80024f6:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002500:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8002504:	8812      	ldrh	r2, [r2, #0]
 8002506:	429a      	cmp	r2, r3
 8002508:	d8df      	bhi.n	80024ca <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c2, address, dt, count+1, 10);
 800250a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800250e:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	b299      	uxth	r1, r3
 8002516:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800251a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800251e:	881b      	ldrh	r3, [r3, #0]
 8002520:	3301      	adds	r3, #1
 8002522:	b29b      	uxth	r3, r3
 8002524:	f107 020c 	add.w	r2, r7, #12
 8002528:	200a      	movs	r0, #10
 800252a:	9000      	str	r0, [sp, #0]
 800252c:	4803      	ldr	r0, [pc, #12]	@ (800253c <ssd1306_I2C_WriteMulti+0xc8>)
 800252e:	f001 fc15 	bl	8003d5c <HAL_I2C_Master_Transmit>
}
 8002532:	bf00      	nop
 8002534:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8002538:	46bd      	mov	sp, r7
 800253a:	bd90      	pop	{r4, r7, pc}
 800253c:	2000028c 	.word	0x2000028c

08002540 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8002540:	b580      	push	{r7, lr}
 8002542:	b086      	sub	sp, #24
 8002544:	af02      	add	r7, sp, #8
 8002546:	4603      	mov	r3, r0
 8002548:	71fb      	strb	r3, [r7, #7]
 800254a:	460b      	mov	r3, r1
 800254c:	71bb      	strb	r3, [r7, #6]
 800254e:	4613      	mov	r3, r2
 8002550:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8002552:	79bb      	ldrb	r3, [r7, #6]
 8002554:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8002556:	797b      	ldrb	r3, [r7, #5]
 8002558:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c2, address, dt, 2, 10);
 800255a:	79fb      	ldrb	r3, [r7, #7]
 800255c:	b299      	uxth	r1, r3
 800255e:	f107 020c 	add.w	r2, r7, #12
 8002562:	230a      	movs	r3, #10
 8002564:	9300      	str	r3, [sp, #0]
 8002566:	2302      	movs	r3, #2
 8002568:	4803      	ldr	r0, [pc, #12]	@ (8002578 <ssd1306_I2C_Write+0x38>)
 800256a:	f001 fbf7 	bl	8003d5c <HAL_I2C_Master_Transmit>
}
 800256e:	bf00      	nop
 8002570:	3710      	adds	r7, #16
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	2000028c 	.word	0x2000028c

0800257c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800257c:	b480      	push	{r7}
 800257e:	b085      	sub	sp, #20
 8002580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002582:	4b15      	ldr	r3, [pc, #84]	@ (80025d8 <HAL_MspInit+0x5c>)
 8002584:	699b      	ldr	r3, [r3, #24]
 8002586:	4a14      	ldr	r2, [pc, #80]	@ (80025d8 <HAL_MspInit+0x5c>)
 8002588:	f043 0301 	orr.w	r3, r3, #1
 800258c:	6193      	str	r3, [r2, #24]
 800258e:	4b12      	ldr	r3, [pc, #72]	@ (80025d8 <HAL_MspInit+0x5c>)
 8002590:	699b      	ldr	r3, [r3, #24]
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	60bb      	str	r3, [r7, #8]
 8002598:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800259a:	4b0f      	ldr	r3, [pc, #60]	@ (80025d8 <HAL_MspInit+0x5c>)
 800259c:	69db      	ldr	r3, [r3, #28]
 800259e:	4a0e      	ldr	r2, [pc, #56]	@ (80025d8 <HAL_MspInit+0x5c>)
 80025a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025a4:	61d3      	str	r3, [r2, #28]
 80025a6:	4b0c      	ldr	r3, [pc, #48]	@ (80025d8 <HAL_MspInit+0x5c>)
 80025a8:	69db      	ldr	r3, [r3, #28]
 80025aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025ae:	607b      	str	r3, [r7, #4]
 80025b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80025b2:	4b0a      	ldr	r3, [pc, #40]	@ (80025dc <HAL_MspInit+0x60>)
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	60fb      	str	r3, [r7, #12]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80025be:	60fb      	str	r3, [r7, #12]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80025c6:	60fb      	str	r3, [r7, #12]
 80025c8:	4a04      	ldr	r2, [pc, #16]	@ (80025dc <HAL_MspInit+0x60>)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025ce:	bf00      	nop
 80025d0:	3714      	adds	r7, #20
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bc80      	pop	{r7}
 80025d6:	4770      	bx	lr
 80025d8:	40021000 	.word	0x40021000
 80025dc:	40010000 	.word	0x40010000

080025e0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b088      	sub	sp, #32
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025e8:	f107 0310 	add.w	r3, r7, #16
 80025ec:	2200      	movs	r2, #0
 80025ee:	601a      	str	r2, [r3, #0]
 80025f0:	605a      	str	r2, [r3, #4]
 80025f2:	609a      	str	r2, [r3, #8]
 80025f4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a14      	ldr	r2, [pc, #80]	@ (800264c <HAL_ADC_MspInit+0x6c>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d121      	bne.n	8002644 <HAL_ADC_MspInit+0x64>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002600:	4b13      	ldr	r3, [pc, #76]	@ (8002650 <HAL_ADC_MspInit+0x70>)
 8002602:	699b      	ldr	r3, [r3, #24]
 8002604:	4a12      	ldr	r2, [pc, #72]	@ (8002650 <HAL_ADC_MspInit+0x70>)
 8002606:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800260a:	6193      	str	r3, [r2, #24]
 800260c:	4b10      	ldr	r3, [pc, #64]	@ (8002650 <HAL_ADC_MspInit+0x70>)
 800260e:	699b      	ldr	r3, [r3, #24]
 8002610:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002614:	60fb      	str	r3, [r7, #12]
 8002616:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002618:	4b0d      	ldr	r3, [pc, #52]	@ (8002650 <HAL_ADC_MspInit+0x70>)
 800261a:	699b      	ldr	r3, [r3, #24]
 800261c:	4a0c      	ldr	r2, [pc, #48]	@ (8002650 <HAL_ADC_MspInit+0x70>)
 800261e:	f043 0304 	orr.w	r3, r3, #4
 8002622:	6193      	str	r3, [r2, #24]
 8002624:	4b0a      	ldr	r3, [pc, #40]	@ (8002650 <HAL_ADC_MspInit+0x70>)
 8002626:	699b      	ldr	r3, [r3, #24]
 8002628:	f003 0304 	and.w	r3, r3, #4
 800262c:	60bb      	str	r3, [r7, #8]
 800262e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002630:	2301      	movs	r3, #1
 8002632:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002634:	2303      	movs	r3, #3
 8002636:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002638:	f107 0310 	add.w	r3, r7, #16
 800263c:	4619      	mov	r1, r3
 800263e:	4805      	ldr	r0, [pc, #20]	@ (8002654 <HAL_ADC_MspInit+0x74>)
 8002640:	f001 f87c 	bl	800373c <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002644:	bf00      	nop
 8002646:	3720      	adds	r7, #32
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	40012400 	.word	0x40012400
 8002650:	40021000 	.word	0x40021000
 8002654:	40010800 	.word	0x40010800

08002658 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b08a      	sub	sp, #40	@ 0x28
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002660:	f107 0318 	add.w	r3, r7, #24
 8002664:	2200      	movs	r2, #0
 8002666:	601a      	str	r2, [r3, #0]
 8002668:	605a      	str	r2, [r3, #4]
 800266a:	609a      	str	r2, [r3, #8]
 800266c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a2b      	ldr	r2, [pc, #172]	@ (8002720 <HAL_I2C_MspInit+0xc8>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d124      	bne.n	80026c2 <HAL_I2C_MspInit+0x6a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002678:	4b2a      	ldr	r3, [pc, #168]	@ (8002724 <HAL_I2C_MspInit+0xcc>)
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	4a29      	ldr	r2, [pc, #164]	@ (8002724 <HAL_I2C_MspInit+0xcc>)
 800267e:	f043 0308 	orr.w	r3, r3, #8
 8002682:	6193      	str	r3, [r2, #24]
 8002684:	4b27      	ldr	r3, [pc, #156]	@ (8002724 <HAL_I2C_MspInit+0xcc>)
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	f003 0308 	and.w	r3, r3, #8
 800268c:	617b      	str	r3, [r7, #20]
 800268e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002690:	23c0      	movs	r3, #192	@ 0xc0
 8002692:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002694:	2312      	movs	r3, #18
 8002696:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002698:	2303      	movs	r3, #3
 800269a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800269c:	f107 0318 	add.w	r3, r7, #24
 80026a0:	4619      	mov	r1, r3
 80026a2:	4821      	ldr	r0, [pc, #132]	@ (8002728 <HAL_I2C_MspInit+0xd0>)
 80026a4:	f001 f84a 	bl	800373c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80026a8:	4b1e      	ldr	r3, [pc, #120]	@ (8002724 <HAL_I2C_MspInit+0xcc>)
 80026aa:	69db      	ldr	r3, [r3, #28]
 80026ac:	4a1d      	ldr	r2, [pc, #116]	@ (8002724 <HAL_I2C_MspInit+0xcc>)
 80026ae:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80026b2:	61d3      	str	r3, [r2, #28]
 80026b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002724 <HAL_I2C_MspInit+0xcc>)
 80026b6:	69db      	ldr	r3, [r3, #28]
 80026b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026bc:	613b      	str	r3, [r7, #16]
 80026be:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 80026c0:	e029      	b.n	8002716 <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a19      	ldr	r2, [pc, #100]	@ (800272c <HAL_I2C_MspInit+0xd4>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d124      	bne.n	8002716 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026cc:	4b15      	ldr	r3, [pc, #84]	@ (8002724 <HAL_I2C_MspInit+0xcc>)
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	4a14      	ldr	r2, [pc, #80]	@ (8002724 <HAL_I2C_MspInit+0xcc>)
 80026d2:	f043 0308 	orr.w	r3, r3, #8
 80026d6:	6193      	str	r3, [r2, #24]
 80026d8:	4b12      	ldr	r3, [pc, #72]	@ (8002724 <HAL_I2C_MspInit+0xcc>)
 80026da:	699b      	ldr	r3, [r3, #24]
 80026dc:	f003 0308 	and.w	r3, r3, #8
 80026e0:	60fb      	str	r3, [r7, #12]
 80026e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80026e4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80026e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026ea:	2312      	movs	r3, #18
 80026ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026ee:	2303      	movs	r3, #3
 80026f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026f2:	f107 0318 	add.w	r3, r7, #24
 80026f6:	4619      	mov	r1, r3
 80026f8:	480b      	ldr	r0, [pc, #44]	@ (8002728 <HAL_I2C_MspInit+0xd0>)
 80026fa:	f001 f81f 	bl	800373c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80026fe:	4b09      	ldr	r3, [pc, #36]	@ (8002724 <HAL_I2C_MspInit+0xcc>)
 8002700:	69db      	ldr	r3, [r3, #28]
 8002702:	4a08      	ldr	r2, [pc, #32]	@ (8002724 <HAL_I2C_MspInit+0xcc>)
 8002704:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002708:	61d3      	str	r3, [r2, #28]
 800270a:	4b06      	ldr	r3, [pc, #24]	@ (8002724 <HAL_I2C_MspInit+0xcc>)
 800270c:	69db      	ldr	r3, [r3, #28]
 800270e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002712:	60bb      	str	r3, [r7, #8]
 8002714:	68bb      	ldr	r3, [r7, #8]
}
 8002716:	bf00      	nop
 8002718:	3728      	adds	r7, #40	@ 0x28
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	40005400 	.word	0x40005400
 8002724:	40021000 	.word	0x40021000
 8002728:	40010c00 	.word	0x40010c00
 800272c:	40005800 	.word	0x40005800

08002730 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002730:	b480      	push	{r7}
 8002732:	b085      	sub	sp, #20
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a09      	ldr	r2, [pc, #36]	@ (8002764 <HAL_TIM_Base_MspInit+0x34>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d10b      	bne.n	800275a <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002742:	4b09      	ldr	r3, [pc, #36]	@ (8002768 <HAL_TIM_Base_MspInit+0x38>)
 8002744:	699b      	ldr	r3, [r3, #24]
 8002746:	4a08      	ldr	r2, [pc, #32]	@ (8002768 <HAL_TIM_Base_MspInit+0x38>)
 8002748:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800274c:	6193      	str	r3, [r2, #24]
 800274e:	4b06      	ldr	r3, [pc, #24]	@ (8002768 <HAL_TIM_Base_MspInit+0x38>)
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002756:	60fb      	str	r3, [r7, #12]
 8002758:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 800275a:	bf00      	nop
 800275c:	3714      	adds	r7, #20
 800275e:	46bd      	mov	sp, r7
 8002760:	bc80      	pop	{r7}
 8002762:	4770      	bx	lr
 8002764:	40012c00 	.word	0x40012c00
 8002768:	40021000 	.word	0x40021000

0800276c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b088      	sub	sp, #32
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002774:	f107 0310 	add.w	r3, r7, #16
 8002778:	2200      	movs	r2, #0
 800277a:	601a      	str	r2, [r3, #0]
 800277c:	605a      	str	r2, [r3, #4]
 800277e:	609a      	str	r2, [r3, #8]
 8002780:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a1f      	ldr	r2, [pc, #124]	@ (8002804 <HAL_UART_MspInit+0x98>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d137      	bne.n	80027fc <HAL_UART_MspInit+0x90>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800278c:	4b1e      	ldr	r3, [pc, #120]	@ (8002808 <HAL_UART_MspInit+0x9c>)
 800278e:	69db      	ldr	r3, [r3, #28]
 8002790:	4a1d      	ldr	r2, [pc, #116]	@ (8002808 <HAL_UART_MspInit+0x9c>)
 8002792:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002796:	61d3      	str	r3, [r2, #28]
 8002798:	4b1b      	ldr	r3, [pc, #108]	@ (8002808 <HAL_UART_MspInit+0x9c>)
 800279a:	69db      	ldr	r3, [r3, #28]
 800279c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027a0:	60fb      	str	r3, [r7, #12]
 80027a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027a4:	4b18      	ldr	r3, [pc, #96]	@ (8002808 <HAL_UART_MspInit+0x9c>)
 80027a6:	699b      	ldr	r3, [r3, #24]
 80027a8:	4a17      	ldr	r2, [pc, #92]	@ (8002808 <HAL_UART_MspInit+0x9c>)
 80027aa:	f043 0304 	orr.w	r3, r3, #4
 80027ae:	6193      	str	r3, [r2, #24]
 80027b0:	4b15      	ldr	r3, [pc, #84]	@ (8002808 <HAL_UART_MspInit+0x9c>)
 80027b2:	699b      	ldr	r3, [r3, #24]
 80027b4:	f003 0304 	and.w	r3, r3, #4
 80027b8:	60bb      	str	r3, [r7, #8]
 80027ba:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80027bc:	2304      	movs	r3, #4
 80027be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c0:	2302      	movs	r3, #2
 80027c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027c4:	2303      	movs	r3, #3
 80027c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027c8:	f107 0310 	add.w	r3, r7, #16
 80027cc:	4619      	mov	r1, r3
 80027ce:	480f      	ldr	r0, [pc, #60]	@ (800280c <HAL_UART_MspInit+0xa0>)
 80027d0:	f000 ffb4 	bl	800373c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80027d4:	2308      	movs	r3, #8
 80027d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027d8:	2300      	movs	r3, #0
 80027da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027dc:	2300      	movs	r3, #0
 80027de:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027e0:	f107 0310 	add.w	r3, r7, #16
 80027e4:	4619      	mov	r1, r3
 80027e6:	4809      	ldr	r0, [pc, #36]	@ (800280c <HAL_UART_MspInit+0xa0>)
 80027e8:	f000 ffa8 	bl	800373c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80027ec:	2200      	movs	r2, #0
 80027ee:	2100      	movs	r1, #0
 80027f0:	2026      	movs	r0, #38	@ 0x26
 80027f2:	f000 feba 	bl	800356a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80027f6:	2026      	movs	r0, #38	@ 0x26
 80027f8:	f000 fed3 	bl	80035a2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80027fc:	bf00      	nop
 80027fe:	3720      	adds	r7, #32
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	40004400 	.word	0x40004400
 8002808:	40021000 	.word	0x40021000
 800280c:	40010800 	.word	0x40010800

08002810 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002814:	bf00      	nop
 8002816:	e7fd      	b.n	8002814 <NMI_Handler+0x4>

08002818 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800281c:	bf00      	nop
 800281e:	e7fd      	b.n	800281c <HardFault_Handler+0x4>

08002820 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002824:	bf00      	nop
 8002826:	e7fd      	b.n	8002824 <MemManage_Handler+0x4>

08002828 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800282c:	bf00      	nop
 800282e:	e7fd      	b.n	800282c <BusFault_Handler+0x4>

08002830 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002834:	bf00      	nop
 8002836:	e7fd      	b.n	8002834 <UsageFault_Handler+0x4>

08002838 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800283c:	bf00      	nop
 800283e:	46bd      	mov	sp, r7
 8002840:	bc80      	pop	{r7}
 8002842:	4770      	bx	lr

08002844 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002848:	bf00      	nop
 800284a:	46bd      	mov	sp, r7
 800284c:	bc80      	pop	{r7}
 800284e:	4770      	bx	lr

08002850 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002854:	bf00      	nop
 8002856:	46bd      	mov	sp, r7
 8002858:	bc80      	pop	{r7}
 800285a:	4770      	bx	lr

0800285c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002860:	f000 f940 	bl	8002ae4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002864:	bf00      	nop
 8002866:	bd80      	pop	{r7, pc}

08002868 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800286c:	4802      	ldr	r0, [pc, #8]	@ (8002878 <USART2_IRQHandler+0x10>)
 800286e:	f003 fbd3 	bl	8006018 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002872:	bf00      	nop
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	20000328 	.word	0x20000328

0800287c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  return 1;
 8002880:	2301      	movs	r3, #1
}
 8002882:	4618      	mov	r0, r3
 8002884:	46bd      	mov	sp, r7
 8002886:	bc80      	pop	{r7}
 8002888:	4770      	bx	lr

0800288a <_kill>:

int _kill(int pid, int sig)
{
 800288a:	b580      	push	{r7, lr}
 800288c:	b082      	sub	sp, #8
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
 8002892:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002894:	f005 f82c 	bl	80078f0 <__errno>
 8002898:	4603      	mov	r3, r0
 800289a:	2216      	movs	r2, #22
 800289c:	601a      	str	r2, [r3, #0]
  return -1;
 800289e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <_exit>:

void _exit (int status)
{
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b082      	sub	sp, #8
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80028b2:	f04f 31ff 	mov.w	r1, #4294967295
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f7ff ffe7 	bl	800288a <_kill>
  while (1) {}    /* Make sure we hang here */
 80028bc:	bf00      	nop
 80028be:	e7fd      	b.n	80028bc <_exit+0x12>

080028c0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b086      	sub	sp, #24
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028cc:	2300      	movs	r3, #0
 80028ce:	617b      	str	r3, [r7, #20]
 80028d0:	e00a      	b.n	80028e8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80028d2:	f3af 8000 	nop.w
 80028d6:	4601      	mov	r1, r0
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	1c5a      	adds	r2, r3, #1
 80028dc:	60ba      	str	r2, [r7, #8]
 80028de:	b2ca      	uxtb	r2, r1
 80028e0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	3301      	adds	r3, #1
 80028e6:	617b      	str	r3, [r7, #20]
 80028e8:	697a      	ldr	r2, [r7, #20]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	dbf0      	blt.n	80028d2 <_read+0x12>
  }

  return len;
 80028f0:	687b      	ldr	r3, [r7, #4]
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3718      	adds	r7, #24
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b086      	sub	sp, #24
 80028fe:	af00      	add	r7, sp, #0
 8002900:	60f8      	str	r0, [r7, #12]
 8002902:	60b9      	str	r1, [r7, #8]
 8002904:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002906:	2300      	movs	r3, #0
 8002908:	617b      	str	r3, [r7, #20]
 800290a:	e009      	b.n	8002920 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	1c5a      	adds	r2, r3, #1
 8002910:	60ba      	str	r2, [r7, #8]
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	4618      	mov	r0, r3
 8002916:	f7fe fcb3 	bl	8001280 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	3301      	adds	r3, #1
 800291e:	617b      	str	r3, [r7, #20]
 8002920:	697a      	ldr	r2, [r7, #20]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	429a      	cmp	r2, r3
 8002926:	dbf1      	blt.n	800290c <_write+0x12>
  }
  return len;
 8002928:	687b      	ldr	r3, [r7, #4]
}
 800292a:	4618      	mov	r0, r3
 800292c:	3718      	adds	r7, #24
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}

08002932 <_close>:

int _close(int file)
{
 8002932:	b480      	push	{r7}
 8002934:	b083      	sub	sp, #12
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800293a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800293e:	4618      	mov	r0, r3
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	bc80      	pop	{r7}
 8002946:	4770      	bx	lr

08002948 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002958:	605a      	str	r2, [r3, #4]
  return 0;
 800295a:	2300      	movs	r3, #0
}
 800295c:	4618      	mov	r0, r3
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	bc80      	pop	{r7}
 8002964:	4770      	bx	lr

08002966 <_isatty>:

int _isatty(int file)
{
 8002966:	b480      	push	{r7}
 8002968:	b083      	sub	sp, #12
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800296e:	2301      	movs	r3, #1
}
 8002970:	4618      	mov	r0, r3
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	bc80      	pop	{r7}
 8002978:	4770      	bx	lr

0800297a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800297a:	b480      	push	{r7}
 800297c:	b085      	sub	sp, #20
 800297e:	af00      	add	r7, sp, #0
 8002980:	60f8      	str	r0, [r7, #12]
 8002982:	60b9      	str	r1, [r7, #8]
 8002984:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002986:	2300      	movs	r3, #0
}
 8002988:	4618      	mov	r0, r3
 800298a:	3714      	adds	r7, #20
 800298c:	46bd      	mov	sp, r7
 800298e:	bc80      	pop	{r7}
 8002990:	4770      	bx	lr
	...

08002994 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b086      	sub	sp, #24
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800299c:	4a14      	ldr	r2, [pc, #80]	@ (80029f0 <_sbrk+0x5c>)
 800299e:	4b15      	ldr	r3, [pc, #84]	@ (80029f4 <_sbrk+0x60>)
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029a8:	4b13      	ldr	r3, [pc, #76]	@ (80029f8 <_sbrk+0x64>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d102      	bne.n	80029b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029b0:	4b11      	ldr	r3, [pc, #68]	@ (80029f8 <_sbrk+0x64>)
 80029b2:	4a12      	ldr	r2, [pc, #72]	@ (80029fc <_sbrk+0x68>)
 80029b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029b6:	4b10      	ldr	r3, [pc, #64]	@ (80029f8 <_sbrk+0x64>)
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4413      	add	r3, r2
 80029be:	693a      	ldr	r2, [r7, #16]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d207      	bcs.n	80029d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029c4:	f004 ff94 	bl	80078f0 <__errno>
 80029c8:	4603      	mov	r3, r0
 80029ca:	220c      	movs	r2, #12
 80029cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029ce:	f04f 33ff 	mov.w	r3, #4294967295
 80029d2:	e009      	b.n	80029e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029d4:	4b08      	ldr	r3, [pc, #32]	@ (80029f8 <_sbrk+0x64>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029da:	4b07      	ldr	r3, [pc, #28]	@ (80029f8 <_sbrk+0x64>)
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4413      	add	r3, r2
 80029e2:	4a05      	ldr	r2, [pc, #20]	@ (80029f8 <_sbrk+0x64>)
 80029e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029e6:	68fb      	ldr	r3, [r7, #12]
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3718      	adds	r7, #24
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	20005000 	.word	0x20005000
 80029f4:	00000400 	.word	0x00000400
 80029f8:	200007ec 	.word	0x200007ec
 80029fc:	20000940 	.word	0x20000940

08002a00 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a04:	bf00      	nop
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bc80      	pop	{r7}
 8002a0a:	4770      	bx	lr

08002a0c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002a0c:	f7ff fff8 	bl	8002a00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a10:	480b      	ldr	r0, [pc, #44]	@ (8002a40 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002a12:	490c      	ldr	r1, [pc, #48]	@ (8002a44 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002a14:	4a0c      	ldr	r2, [pc, #48]	@ (8002a48 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002a16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a18:	e002      	b.n	8002a20 <LoopCopyDataInit>

08002a1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a1e:	3304      	adds	r3, #4

08002a20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a24:	d3f9      	bcc.n	8002a1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a26:	4a09      	ldr	r2, [pc, #36]	@ (8002a4c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002a28:	4c09      	ldr	r4, [pc, #36]	@ (8002a50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a2c:	e001      	b.n	8002a32 <LoopFillZerobss>

08002a2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a30:	3204      	adds	r2, #4

08002a32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a34:	d3fb      	bcc.n	8002a2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a36:	f004 ff61 	bl	80078fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a3a:	f7fe fd71 	bl	8001520 <main>
  bx lr
 8002a3e:	4770      	bx	lr
  ldr r0, =_sdata
 8002a40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a44:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8002a48:	0800a48c 	.word	0x0800a48c
  ldr r2, =_sbss
 8002a4c:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8002a50:	20000940 	.word	0x20000940

08002a54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a54:	e7fe      	b.n	8002a54 <ADC1_2_IRQHandler>
	...

08002a58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a5c:	4b08      	ldr	r3, [pc, #32]	@ (8002a80 <HAL_Init+0x28>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a07      	ldr	r2, [pc, #28]	@ (8002a80 <HAL_Init+0x28>)
 8002a62:	f043 0310 	orr.w	r3, r3, #16
 8002a66:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a68:	2003      	movs	r0, #3
 8002a6a:	f000 fd73 	bl	8003554 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a6e:	200f      	movs	r0, #15
 8002a70:	f000 f808 	bl	8002a84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a74:	f7ff fd82 	bl	800257c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	40022000 	.word	0x40022000

08002a84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a8c:	4b12      	ldr	r3, [pc, #72]	@ (8002ad8 <HAL_InitTick+0x54>)
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	4b12      	ldr	r3, [pc, #72]	@ (8002adc <HAL_InitTick+0x58>)
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	4619      	mov	r1, r3
 8002a96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f000 fd8b 	bl	80035be <HAL_SYSTICK_Config>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e00e      	b.n	8002ad0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2b0f      	cmp	r3, #15
 8002ab6:	d80a      	bhi.n	8002ace <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ab8:	2200      	movs	r2, #0
 8002aba:	6879      	ldr	r1, [r7, #4]
 8002abc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ac0:	f000 fd53 	bl	800356a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ac4:	4a06      	ldr	r2, [pc, #24]	@ (8002ae0 <HAL_InitTick+0x5c>)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002aca:	2300      	movs	r3, #0
 8002acc:	e000      	b.n	8002ad0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3708      	adds	r7, #8
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	20000018 	.word	0x20000018
 8002adc:	20000020 	.word	0x20000020
 8002ae0:	2000001c 	.word	0x2000001c

08002ae4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ae8:	4b05      	ldr	r3, [pc, #20]	@ (8002b00 <HAL_IncTick+0x1c>)
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	461a      	mov	r2, r3
 8002aee:	4b05      	ldr	r3, [pc, #20]	@ (8002b04 <HAL_IncTick+0x20>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4413      	add	r3, r2
 8002af4:	4a03      	ldr	r2, [pc, #12]	@ (8002b04 <HAL_IncTick+0x20>)
 8002af6:	6013      	str	r3, [r2, #0]
}
 8002af8:	bf00      	nop
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bc80      	pop	{r7}
 8002afe:	4770      	bx	lr
 8002b00:	20000020 	.word	0x20000020
 8002b04:	200007f0 	.word	0x200007f0

08002b08 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  return uwTick;
 8002b0c:	4b02      	ldr	r3, [pc, #8]	@ (8002b18 <HAL_GetTick+0x10>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bc80      	pop	{r7}
 8002b16:	4770      	bx	lr
 8002b18:	200007f0 	.word	0x200007f0

08002b1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b24:	f7ff fff0 	bl	8002b08 <HAL_GetTick>
 8002b28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b34:	d005      	beq.n	8002b42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b36:	4b0a      	ldr	r3, [pc, #40]	@ (8002b60 <HAL_Delay+0x44>)
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	4413      	add	r3, r2
 8002b40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b42:	bf00      	nop
 8002b44:	f7ff ffe0 	bl	8002b08 <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d8f7      	bhi.n	8002b44 <HAL_Delay+0x28>
  {
  }
}
 8002b54:	bf00      	nop
 8002b56:	bf00      	nop
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	20000020 	.word	0x20000020

08002b64 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b086      	sub	sp, #24
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002b70:	2300      	movs	r3, #0
 8002b72:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002b74:	2300      	movs	r3, #0
 8002b76:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d101      	bne.n	8002b86 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e0be      	b.n	8002d04 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d109      	bne.n	8002ba8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f7ff fd1c 	bl	80025e0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f000 fbc5 	bl	8003338 <ADC_ConversionStop_Disable>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bb6:	f003 0310 	and.w	r3, r3, #16
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f040 8099 	bne.w	8002cf2 <HAL_ADC_Init+0x18e>
 8002bc0:	7dfb      	ldrb	r3, [r7, #23]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	f040 8095 	bne.w	8002cf2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bcc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002bd0:	f023 0302 	bic.w	r3, r3, #2
 8002bd4:	f043 0202 	orr.w	r2, r3, #2
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002be4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	7b1b      	ldrb	r3, [r3, #12]
 8002bea:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002bec:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002bee:	68ba      	ldr	r2, [r7, #8]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002bfc:	d003      	beq.n	8002c06 <HAL_ADC_Init+0xa2>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d102      	bne.n	8002c0c <HAL_ADC_Init+0xa8>
 8002c06:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c0a:	e000      	b.n	8002c0e <HAL_ADC_Init+0xaa>
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	693a      	ldr	r2, [r7, #16]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	7d1b      	ldrb	r3, [r3, #20]
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d119      	bne.n	8002c50 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	7b1b      	ldrb	r3, [r3, #12]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d109      	bne.n	8002c38 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	3b01      	subs	r3, #1
 8002c2a:	035a      	lsls	r2, r3, #13
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002c34:	613b      	str	r3, [r7, #16]
 8002c36:	e00b      	b.n	8002c50 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c3c:	f043 0220 	orr.w	r2, r3, #32
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c48:	f043 0201 	orr.w	r2, r3, #1
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	693a      	ldr	r2, [r7, #16]
 8002c60:	430a      	orrs	r2, r1
 8002c62:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	689a      	ldr	r2, [r3, #8]
 8002c6a:	4b28      	ldr	r3, [pc, #160]	@ (8002d0c <HAL_ADC_Init+0x1a8>)
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	6812      	ldr	r2, [r2, #0]
 8002c72:	68b9      	ldr	r1, [r7, #8]
 8002c74:	430b      	orrs	r3, r1
 8002c76:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c80:	d003      	beq.n	8002c8a <HAL_ADC_Init+0x126>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d104      	bne.n	8002c94 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	051b      	lsls	r3, r3, #20
 8002c92:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c9a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	689a      	ldr	r2, [r3, #8]
 8002cae:	4b18      	ldr	r3, [pc, #96]	@ (8002d10 <HAL_ADC_Init+0x1ac>)
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	68ba      	ldr	r2, [r7, #8]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d10b      	bne.n	8002cd0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cc2:	f023 0303 	bic.w	r3, r3, #3
 8002cc6:	f043 0201 	orr.w	r2, r3, #1
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002cce:	e018      	b.n	8002d02 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cd4:	f023 0312 	bic.w	r3, r3, #18
 8002cd8:	f043 0210 	orr.w	r2, r3, #16
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ce4:	f043 0201 	orr.w	r2, r3, #1
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002cf0:	e007      	b.n	8002d02 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cf6:	f043 0210 	orr.w	r2, r3, #16
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002d02:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3718      	adds	r7, #24
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	ffe1f7fd 	.word	0xffe1f7fd
 8002d10:	ff1f0efe 	.word	0xff1f0efe

08002d14 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d101      	bne.n	8002d2e <HAL_ADC_Start+0x1a>
 8002d2a:	2302      	movs	r3, #2
 8002d2c:	e098      	b.n	8002e60 <HAL_ADC_Start+0x14c>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2201      	movs	r2, #1
 8002d32:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 faa4 	bl	8003284 <ADC_Enable>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002d40:	7bfb      	ldrb	r3, [r7, #15]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	f040 8087 	bne.w	8002e56 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d50:	f023 0301 	bic.w	r3, r3, #1
 8002d54:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a41      	ldr	r2, [pc, #260]	@ (8002e68 <HAL_ADC_Start+0x154>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d105      	bne.n	8002d72 <HAL_ADC_Start+0x5e>
 8002d66:	4b41      	ldr	r3, [pc, #260]	@ (8002e6c <HAL_ADC_Start+0x158>)
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d115      	bne.n	8002d9e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d76:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d026      	beq.n	8002dda <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d90:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002d94:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002d9c:	e01d      	b.n	8002dda <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002da2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a2f      	ldr	r2, [pc, #188]	@ (8002e6c <HAL_ADC_Start+0x158>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d004      	beq.n	8002dbe <HAL_ADC_Start+0xaa>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a2b      	ldr	r2, [pc, #172]	@ (8002e68 <HAL_ADC_Start+0x154>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d10d      	bne.n	8002dda <HAL_ADC_Start+0xc6>
 8002dbe:	4b2b      	ldr	r3, [pc, #172]	@ (8002e6c <HAL_ADC_Start+0x158>)
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d007      	beq.n	8002dda <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dce:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002dd2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dde:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d006      	beq.n	8002df4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dea:	f023 0206 	bic.w	r2, r3, #6
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002df2:	e002      	b.n	8002dfa <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f06f 0202 	mvn.w	r2, #2
 8002e0a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002e16:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002e1a:	d113      	bne.n	8002e44 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002e20:	4a11      	ldr	r2, [pc, #68]	@ (8002e68 <HAL_ADC_Start+0x154>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d105      	bne.n	8002e32 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002e26:	4b11      	ldr	r3, [pc, #68]	@ (8002e6c <HAL_ADC_Start+0x158>)
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d108      	bne.n	8002e44 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	689a      	ldr	r2, [r3, #8]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002e40:	609a      	str	r2, [r3, #8]
 8002e42:	e00c      	b.n	8002e5e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	689a      	ldr	r2, [r3, #8]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002e52:	609a      	str	r2, [r3, #8]
 8002e54:	e003      	b.n	8002e5e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3710      	adds	r7, #16
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	40012800 	.word	0x40012800
 8002e6c:	40012400 	.word	0x40012400

08002e70 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002e70:	b590      	push	{r4, r7, lr}
 8002e72:	b087      	sub	sp, #28
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002e82:	2300      	movs	r3, #0
 8002e84:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002e86:	f7ff fe3f 	bl	8002b08 <HAL_GetTick>
 8002e8a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00b      	beq.n	8002eb2 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e9e:	f043 0220 	orr.w	r2, r3, #32
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e0d3      	b.n	800305a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d131      	bne.n	8002f24 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ec6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d12a      	bne.n	8002f24 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002ece:	e021      	b.n	8002f14 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed6:	d01d      	beq.n	8002f14 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d007      	beq.n	8002eee <HAL_ADC_PollForConversion+0x7e>
 8002ede:	f7ff fe13 	bl	8002b08 <HAL_GetTick>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	683a      	ldr	r2, [r7, #0]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d212      	bcs.n	8002f14 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0302 	and.w	r3, r3, #2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d10b      	bne.n	8002f14 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f00:	f043 0204 	orr.w	r2, r3, #4
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e0a2      	b.n	800305a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d0d6      	beq.n	8002ed0 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002f22:	e070      	b.n	8003006 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002f24:	4b4f      	ldr	r3, [pc, #316]	@ (8003064 <HAL_ADC_PollForConversion+0x1f4>)
 8002f26:	681c      	ldr	r4, [r3, #0]
 8002f28:	2002      	movs	r0, #2
 8002f2a:	f002 fbfb 	bl	8005724 <HAL_RCCEx_GetPeriphCLKFreq>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	6919      	ldr	r1, [r3, #16]
 8002f3a:	4b4b      	ldr	r3, [pc, #300]	@ (8003068 <HAL_ADC_PollForConversion+0x1f8>)
 8002f3c:	400b      	ands	r3, r1
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d118      	bne.n	8002f74 <HAL_ADC_PollForConversion+0x104>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	68d9      	ldr	r1, [r3, #12]
 8002f48:	4b48      	ldr	r3, [pc, #288]	@ (800306c <HAL_ADC_PollForConversion+0x1fc>)
 8002f4a:	400b      	ands	r3, r1
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d111      	bne.n	8002f74 <HAL_ADC_PollForConversion+0x104>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	6919      	ldr	r1, [r3, #16]
 8002f56:	4b46      	ldr	r3, [pc, #280]	@ (8003070 <HAL_ADC_PollForConversion+0x200>)
 8002f58:	400b      	ands	r3, r1
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d108      	bne.n	8002f70 <HAL_ADC_PollForConversion+0x100>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68d9      	ldr	r1, [r3, #12]
 8002f64:	4b43      	ldr	r3, [pc, #268]	@ (8003074 <HAL_ADC_PollForConversion+0x204>)
 8002f66:	400b      	ands	r3, r1
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d101      	bne.n	8002f70 <HAL_ADC_PollForConversion+0x100>
 8002f6c:	2314      	movs	r3, #20
 8002f6e:	e020      	b.n	8002fb2 <HAL_ADC_PollForConversion+0x142>
 8002f70:	2329      	movs	r3, #41	@ 0x29
 8002f72:	e01e      	b.n	8002fb2 <HAL_ADC_PollForConversion+0x142>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	6919      	ldr	r1, [r3, #16]
 8002f7a:	4b3d      	ldr	r3, [pc, #244]	@ (8003070 <HAL_ADC_PollForConversion+0x200>)
 8002f7c:	400b      	ands	r3, r1
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d106      	bne.n	8002f90 <HAL_ADC_PollForConversion+0x120>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68d9      	ldr	r1, [r3, #12]
 8002f88:	4b3a      	ldr	r3, [pc, #232]	@ (8003074 <HAL_ADC_PollForConversion+0x204>)
 8002f8a:	400b      	ands	r3, r1
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d00d      	beq.n	8002fac <HAL_ADC_PollForConversion+0x13c>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	6919      	ldr	r1, [r3, #16]
 8002f96:	4b38      	ldr	r3, [pc, #224]	@ (8003078 <HAL_ADC_PollForConversion+0x208>)
 8002f98:	400b      	ands	r3, r1
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d108      	bne.n	8002fb0 <HAL_ADC_PollForConversion+0x140>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68d9      	ldr	r1, [r3, #12]
 8002fa4:	4b34      	ldr	r3, [pc, #208]	@ (8003078 <HAL_ADC_PollForConversion+0x208>)
 8002fa6:	400b      	ands	r3, r1
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d101      	bne.n	8002fb0 <HAL_ADC_PollForConversion+0x140>
 8002fac:	2354      	movs	r3, #84	@ 0x54
 8002fae:	e000      	b.n	8002fb2 <HAL_ADC_PollForConversion+0x142>
 8002fb0:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002fb2:	fb02 f303 	mul.w	r3, r2, r3
 8002fb6:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002fb8:	e021      	b.n	8002ffe <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fc0:	d01a      	beq.n	8002ff8 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d007      	beq.n	8002fd8 <HAL_ADC_PollForConversion+0x168>
 8002fc8:	f7ff fd9e 	bl	8002b08 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	683a      	ldr	r2, [r7, #0]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d20f      	bcs.n	8002ff8 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	693a      	ldr	r2, [r7, #16]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d90b      	bls.n	8002ff8 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fe4:	f043 0204 	orr.w	r2, r3, #4
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	e030      	b.n	800305a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	693a      	ldr	r2, [r7, #16]
 8003002:	429a      	cmp	r2, r3
 8003004:	d8d9      	bhi.n	8002fba <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f06f 0212 	mvn.w	r2, #18
 800300e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003014:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8003026:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800302a:	d115      	bne.n	8003058 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003030:	2b00      	cmp	r3, #0
 8003032:	d111      	bne.n	8003058 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003038:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003044:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d105      	bne.n	8003058 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003050:	f043 0201 	orr.w	r2, r3, #1
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	371c      	adds	r7, #28
 800305e:	46bd      	mov	sp, r7
 8003060:	bd90      	pop	{r4, r7, pc}
 8003062:	bf00      	nop
 8003064:	20000018 	.word	0x20000018
 8003068:	24924924 	.word	0x24924924
 800306c:	00924924 	.word	0x00924924
 8003070:	12492492 	.word	0x12492492
 8003074:	00492492 	.word	0x00492492
 8003078:	00249249 	.word	0x00249249

0800307c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800308a:	4618      	mov	r0, r3
 800308c:	370c      	adds	r7, #12
 800308e:	46bd      	mov	sp, r7
 8003090:	bc80      	pop	{r7}
 8003092:	4770      	bx	lr

08003094 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003094:	b480      	push	{r7}
 8003096:	b085      	sub	sp, #20
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800309e:	2300      	movs	r3, #0
 80030a0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80030a2:	2300      	movs	r3, #0
 80030a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d101      	bne.n	80030b4 <HAL_ADC_ConfigChannel+0x20>
 80030b0:	2302      	movs	r3, #2
 80030b2:	e0dc      	b.n	800326e <HAL_ADC_ConfigChannel+0x1da>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	2b06      	cmp	r3, #6
 80030c2:	d81c      	bhi.n	80030fe <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	685a      	ldr	r2, [r3, #4]
 80030ce:	4613      	mov	r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	4413      	add	r3, r2
 80030d4:	3b05      	subs	r3, #5
 80030d6:	221f      	movs	r2, #31
 80030d8:	fa02 f303 	lsl.w	r3, r2, r3
 80030dc:	43db      	mvns	r3, r3
 80030de:	4019      	ands	r1, r3
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	6818      	ldr	r0, [r3, #0]
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685a      	ldr	r2, [r3, #4]
 80030e8:	4613      	mov	r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	4413      	add	r3, r2
 80030ee:	3b05      	subs	r3, #5
 80030f0:	fa00 f203 	lsl.w	r2, r0, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	430a      	orrs	r2, r1
 80030fa:	635a      	str	r2, [r3, #52]	@ 0x34
 80030fc:	e03c      	b.n	8003178 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	2b0c      	cmp	r3, #12
 8003104:	d81c      	bhi.n	8003140 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	685a      	ldr	r2, [r3, #4]
 8003110:	4613      	mov	r3, r2
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	4413      	add	r3, r2
 8003116:	3b23      	subs	r3, #35	@ 0x23
 8003118:	221f      	movs	r2, #31
 800311a:	fa02 f303 	lsl.w	r3, r2, r3
 800311e:	43db      	mvns	r3, r3
 8003120:	4019      	ands	r1, r3
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	6818      	ldr	r0, [r3, #0]
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	685a      	ldr	r2, [r3, #4]
 800312a:	4613      	mov	r3, r2
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	4413      	add	r3, r2
 8003130:	3b23      	subs	r3, #35	@ 0x23
 8003132:	fa00 f203 	lsl.w	r2, r0, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	430a      	orrs	r2, r1
 800313c:	631a      	str	r2, [r3, #48]	@ 0x30
 800313e:	e01b      	b.n	8003178 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	685a      	ldr	r2, [r3, #4]
 800314a:	4613      	mov	r3, r2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	4413      	add	r3, r2
 8003150:	3b41      	subs	r3, #65	@ 0x41
 8003152:	221f      	movs	r2, #31
 8003154:	fa02 f303 	lsl.w	r3, r2, r3
 8003158:	43db      	mvns	r3, r3
 800315a:	4019      	ands	r1, r3
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	6818      	ldr	r0, [r3, #0]
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	685a      	ldr	r2, [r3, #4]
 8003164:	4613      	mov	r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	4413      	add	r3, r2
 800316a:	3b41      	subs	r3, #65	@ 0x41
 800316c:	fa00 f203 	lsl.w	r2, r0, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	430a      	orrs	r2, r1
 8003176:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2b09      	cmp	r3, #9
 800317e:	d91c      	bls.n	80031ba <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68d9      	ldr	r1, [r3, #12]
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	4613      	mov	r3, r2
 800318c:	005b      	lsls	r3, r3, #1
 800318e:	4413      	add	r3, r2
 8003190:	3b1e      	subs	r3, #30
 8003192:	2207      	movs	r2, #7
 8003194:	fa02 f303 	lsl.w	r3, r2, r3
 8003198:	43db      	mvns	r3, r3
 800319a:	4019      	ands	r1, r3
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	6898      	ldr	r0, [r3, #8]
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	4613      	mov	r3, r2
 80031a6:	005b      	lsls	r3, r3, #1
 80031a8:	4413      	add	r3, r2
 80031aa:	3b1e      	subs	r3, #30
 80031ac:	fa00 f203 	lsl.w	r2, r0, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	430a      	orrs	r2, r1
 80031b6:	60da      	str	r2, [r3, #12]
 80031b8:	e019      	b.n	80031ee <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	6919      	ldr	r1, [r3, #16]
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	4613      	mov	r3, r2
 80031c6:	005b      	lsls	r3, r3, #1
 80031c8:	4413      	add	r3, r2
 80031ca:	2207      	movs	r2, #7
 80031cc:	fa02 f303 	lsl.w	r3, r2, r3
 80031d0:	43db      	mvns	r3, r3
 80031d2:	4019      	ands	r1, r3
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	6898      	ldr	r0, [r3, #8]
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	4613      	mov	r3, r2
 80031de:	005b      	lsls	r3, r3, #1
 80031e0:	4413      	add	r3, r2
 80031e2:	fa00 f203 	lsl.w	r2, r0, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	430a      	orrs	r2, r1
 80031ec:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2b10      	cmp	r3, #16
 80031f4:	d003      	beq.n	80031fe <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80031fa:	2b11      	cmp	r3, #17
 80031fc:	d132      	bne.n	8003264 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a1d      	ldr	r2, [pc, #116]	@ (8003278 <HAL_ADC_ConfigChannel+0x1e4>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d125      	bne.n	8003254 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d126      	bne.n	8003264 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	689a      	ldr	r2, [r3, #8]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8003224:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2b10      	cmp	r3, #16
 800322c:	d11a      	bne.n	8003264 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800322e:	4b13      	ldr	r3, [pc, #76]	@ (800327c <HAL_ADC_ConfigChannel+0x1e8>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a13      	ldr	r2, [pc, #76]	@ (8003280 <HAL_ADC_ConfigChannel+0x1ec>)
 8003234:	fba2 2303 	umull	r2, r3, r2, r3
 8003238:	0c9a      	lsrs	r2, r3, #18
 800323a:	4613      	mov	r3, r2
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	4413      	add	r3, r2
 8003240:	005b      	lsls	r3, r3, #1
 8003242:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003244:	e002      	b.n	800324c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	3b01      	subs	r3, #1
 800324a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d1f9      	bne.n	8003246 <HAL_ADC_ConfigChannel+0x1b2>
 8003252:	e007      	b.n	8003264 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003258:	f043 0220 	orr.w	r2, r3, #32
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800326c:	7bfb      	ldrb	r3, [r7, #15]
}
 800326e:	4618      	mov	r0, r3
 8003270:	3714      	adds	r7, #20
 8003272:	46bd      	mov	sp, r7
 8003274:	bc80      	pop	{r7}
 8003276:	4770      	bx	lr
 8003278:	40012400 	.word	0x40012400
 800327c:	20000018 	.word	0x20000018
 8003280:	431bde83 	.word	0x431bde83

08003284 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800328c:	2300      	movs	r3, #0
 800328e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003290:	2300      	movs	r3, #0
 8003292:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d040      	beq.n	8003324 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	689a      	ldr	r2, [r3, #8]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f042 0201 	orr.w	r2, r2, #1
 80032b0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80032b2:	4b1f      	ldr	r3, [pc, #124]	@ (8003330 <ADC_Enable+0xac>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a1f      	ldr	r2, [pc, #124]	@ (8003334 <ADC_Enable+0xb0>)
 80032b8:	fba2 2303 	umull	r2, r3, r2, r3
 80032bc:	0c9b      	lsrs	r3, r3, #18
 80032be:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80032c0:	e002      	b.n	80032c8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	3b01      	subs	r3, #1
 80032c6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d1f9      	bne.n	80032c2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80032ce:	f7ff fc1b 	bl	8002b08 <HAL_GetTick>
 80032d2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80032d4:	e01f      	b.n	8003316 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80032d6:	f7ff fc17 	bl	8002b08 <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d918      	bls.n	8003316 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d011      	beq.n	8003316 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032f6:	f043 0210 	orr.w	r2, r3, #16
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003302:	f043 0201 	orr.w	r2, r3, #1
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e007      	b.n	8003326 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	f003 0301 	and.w	r3, r3, #1
 8003320:	2b01      	cmp	r3, #1
 8003322:	d1d8      	bne.n	80032d6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003324:	2300      	movs	r3, #0
}
 8003326:	4618      	mov	r0, r3
 8003328:	3710      	adds	r7, #16
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	20000018 	.word	0x20000018
 8003334:	431bde83 	.word	0x431bde83

08003338 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003340:	2300      	movs	r3, #0
 8003342:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f003 0301 	and.w	r3, r3, #1
 800334e:	2b01      	cmp	r3, #1
 8003350:	d12e      	bne.n	80033b0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	689a      	ldr	r2, [r3, #8]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f022 0201 	bic.w	r2, r2, #1
 8003360:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003362:	f7ff fbd1 	bl	8002b08 <HAL_GetTick>
 8003366:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003368:	e01b      	b.n	80033a2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800336a:	f7ff fbcd 	bl	8002b08 <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	2b02      	cmp	r3, #2
 8003376:	d914      	bls.n	80033a2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f003 0301 	and.w	r3, r3, #1
 8003382:	2b01      	cmp	r3, #1
 8003384:	d10d      	bne.n	80033a2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800338a:	f043 0210 	orr.w	r2, r3, #16
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003396:	f043 0201 	orr.w	r2, r3, #1
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e007      	b.n	80033b2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f003 0301 	and.w	r3, r3, #1
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d0dc      	beq.n	800336a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3710      	adds	r7, #16
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
	...

080033bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033bc:	b480      	push	{r7}
 80033be:	b085      	sub	sp, #20
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f003 0307 	and.w	r3, r3, #7
 80033ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003400 <__NVIC_SetPriorityGrouping+0x44>)
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033d2:	68ba      	ldr	r2, [r7, #8]
 80033d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80033d8:	4013      	ands	r3, r2
 80033da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80033e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033ee:	4a04      	ldr	r2, [pc, #16]	@ (8003400 <__NVIC_SetPriorityGrouping+0x44>)
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	60d3      	str	r3, [r2, #12]
}
 80033f4:	bf00      	nop
 80033f6:	3714      	adds	r7, #20
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bc80      	pop	{r7}
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	e000ed00 	.word	0xe000ed00

08003404 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003404:	b480      	push	{r7}
 8003406:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003408:	4b04      	ldr	r3, [pc, #16]	@ (800341c <__NVIC_GetPriorityGrouping+0x18>)
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	0a1b      	lsrs	r3, r3, #8
 800340e:	f003 0307 	and.w	r3, r3, #7
}
 8003412:	4618      	mov	r0, r3
 8003414:	46bd      	mov	sp, r7
 8003416:	bc80      	pop	{r7}
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	e000ed00 	.word	0xe000ed00

08003420 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	4603      	mov	r3, r0
 8003428:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800342a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800342e:	2b00      	cmp	r3, #0
 8003430:	db0b      	blt.n	800344a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003432:	79fb      	ldrb	r3, [r7, #7]
 8003434:	f003 021f 	and.w	r2, r3, #31
 8003438:	4906      	ldr	r1, [pc, #24]	@ (8003454 <__NVIC_EnableIRQ+0x34>)
 800343a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800343e:	095b      	lsrs	r3, r3, #5
 8003440:	2001      	movs	r0, #1
 8003442:	fa00 f202 	lsl.w	r2, r0, r2
 8003446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800344a:	bf00      	nop
 800344c:	370c      	adds	r7, #12
 800344e:	46bd      	mov	sp, r7
 8003450:	bc80      	pop	{r7}
 8003452:	4770      	bx	lr
 8003454:	e000e100 	.word	0xe000e100

08003458 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	4603      	mov	r3, r0
 8003460:	6039      	str	r1, [r7, #0]
 8003462:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003468:	2b00      	cmp	r3, #0
 800346a:	db0a      	blt.n	8003482 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	b2da      	uxtb	r2, r3
 8003470:	490c      	ldr	r1, [pc, #48]	@ (80034a4 <__NVIC_SetPriority+0x4c>)
 8003472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003476:	0112      	lsls	r2, r2, #4
 8003478:	b2d2      	uxtb	r2, r2
 800347a:	440b      	add	r3, r1
 800347c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003480:	e00a      	b.n	8003498 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	b2da      	uxtb	r2, r3
 8003486:	4908      	ldr	r1, [pc, #32]	@ (80034a8 <__NVIC_SetPriority+0x50>)
 8003488:	79fb      	ldrb	r3, [r7, #7]
 800348a:	f003 030f 	and.w	r3, r3, #15
 800348e:	3b04      	subs	r3, #4
 8003490:	0112      	lsls	r2, r2, #4
 8003492:	b2d2      	uxtb	r2, r2
 8003494:	440b      	add	r3, r1
 8003496:	761a      	strb	r2, [r3, #24]
}
 8003498:	bf00      	nop
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	bc80      	pop	{r7}
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	e000e100 	.word	0xe000e100
 80034a8:	e000ed00 	.word	0xe000ed00

080034ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b089      	sub	sp, #36	@ 0x24
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f003 0307 	and.w	r3, r3, #7
 80034be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	f1c3 0307 	rsb	r3, r3, #7
 80034c6:	2b04      	cmp	r3, #4
 80034c8:	bf28      	it	cs
 80034ca:	2304      	movcs	r3, #4
 80034cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	3304      	adds	r3, #4
 80034d2:	2b06      	cmp	r3, #6
 80034d4:	d902      	bls.n	80034dc <NVIC_EncodePriority+0x30>
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	3b03      	subs	r3, #3
 80034da:	e000      	b.n	80034de <NVIC_EncodePriority+0x32>
 80034dc:	2300      	movs	r3, #0
 80034de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034e0:	f04f 32ff 	mov.w	r2, #4294967295
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ea:	43da      	mvns	r2, r3
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	401a      	ands	r2, r3
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034f4:	f04f 31ff 	mov.w	r1, #4294967295
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	fa01 f303 	lsl.w	r3, r1, r3
 80034fe:	43d9      	mvns	r1, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003504:	4313      	orrs	r3, r2
         );
}
 8003506:	4618      	mov	r0, r3
 8003508:	3724      	adds	r7, #36	@ 0x24
 800350a:	46bd      	mov	sp, r7
 800350c:	bc80      	pop	{r7}
 800350e:	4770      	bx	lr

08003510 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	3b01      	subs	r3, #1
 800351c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003520:	d301      	bcc.n	8003526 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003522:	2301      	movs	r3, #1
 8003524:	e00f      	b.n	8003546 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003526:	4a0a      	ldr	r2, [pc, #40]	@ (8003550 <SysTick_Config+0x40>)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	3b01      	subs	r3, #1
 800352c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800352e:	210f      	movs	r1, #15
 8003530:	f04f 30ff 	mov.w	r0, #4294967295
 8003534:	f7ff ff90 	bl	8003458 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003538:	4b05      	ldr	r3, [pc, #20]	@ (8003550 <SysTick_Config+0x40>)
 800353a:	2200      	movs	r2, #0
 800353c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800353e:	4b04      	ldr	r3, [pc, #16]	@ (8003550 <SysTick_Config+0x40>)
 8003540:	2207      	movs	r2, #7
 8003542:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003544:	2300      	movs	r3, #0
}
 8003546:	4618      	mov	r0, r3
 8003548:	3708      	adds	r7, #8
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	e000e010 	.word	0xe000e010

08003554 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f7ff ff2d 	bl	80033bc <__NVIC_SetPriorityGrouping>
}
 8003562:	bf00      	nop
 8003564:	3708      	adds	r7, #8
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}

0800356a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800356a:	b580      	push	{r7, lr}
 800356c:	b086      	sub	sp, #24
 800356e:	af00      	add	r7, sp, #0
 8003570:	4603      	mov	r3, r0
 8003572:	60b9      	str	r1, [r7, #8]
 8003574:	607a      	str	r2, [r7, #4]
 8003576:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003578:	2300      	movs	r3, #0
 800357a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800357c:	f7ff ff42 	bl	8003404 <__NVIC_GetPriorityGrouping>
 8003580:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	68b9      	ldr	r1, [r7, #8]
 8003586:	6978      	ldr	r0, [r7, #20]
 8003588:	f7ff ff90 	bl	80034ac <NVIC_EncodePriority>
 800358c:	4602      	mov	r2, r0
 800358e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003592:	4611      	mov	r1, r2
 8003594:	4618      	mov	r0, r3
 8003596:	f7ff ff5f 	bl	8003458 <__NVIC_SetPriority>
}
 800359a:	bf00      	nop
 800359c:	3718      	adds	r7, #24
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}

080035a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035a2:	b580      	push	{r7, lr}
 80035a4:	b082      	sub	sp, #8
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	4603      	mov	r3, r0
 80035aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035b0:	4618      	mov	r0, r3
 80035b2:	f7ff ff35 	bl	8003420 <__NVIC_EnableIRQ>
}
 80035b6:	bf00      	nop
 80035b8:	3708      	adds	r7, #8
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035be:	b580      	push	{r7, lr}
 80035c0:	b082      	sub	sp, #8
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f7ff ffa2 	bl	8003510 <SysTick_Config>
 80035cc:	4603      	mov	r3, r0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3708      	adds	r7, #8
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80035d6:	b480      	push	{r7}
 80035d8:	b085      	sub	sp, #20
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035de:	2300      	movs	r3, #0
 80035e0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d008      	beq.n	8003600 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2204      	movs	r2, #4
 80035f2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e020      	b.n	8003642 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f022 020e 	bic.w	r2, r2, #14
 800360e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f022 0201 	bic.w	r2, r2, #1
 800361e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003628:	2101      	movs	r1, #1
 800362a:	fa01 f202 	lsl.w	r2, r1, r2
 800362e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2201      	movs	r2, #1
 8003634:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003640:	7bfb      	ldrb	r3, [r7, #15]
}
 8003642:	4618      	mov	r0, r3
 8003644:	3714      	adds	r7, #20
 8003646:	46bd      	mov	sp, r7
 8003648:	bc80      	pop	{r7}
 800364a:	4770      	bx	lr

0800364c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003654:	2300      	movs	r3, #0
 8003656:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800365e:	b2db      	uxtb	r3, r3
 8003660:	2b02      	cmp	r3, #2
 8003662:	d005      	beq.n	8003670 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2204      	movs	r2, #4
 8003668:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	73fb      	strb	r3, [r7, #15]
 800366e:	e051      	b.n	8003714 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f022 020e 	bic.w	r2, r2, #14
 800367e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f022 0201 	bic.w	r2, r2, #1
 800368e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a22      	ldr	r2, [pc, #136]	@ (8003720 <HAL_DMA_Abort_IT+0xd4>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d029      	beq.n	80036ee <HAL_DMA_Abort_IT+0xa2>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a21      	ldr	r2, [pc, #132]	@ (8003724 <HAL_DMA_Abort_IT+0xd8>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d022      	beq.n	80036ea <HAL_DMA_Abort_IT+0x9e>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a1f      	ldr	r2, [pc, #124]	@ (8003728 <HAL_DMA_Abort_IT+0xdc>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d01a      	beq.n	80036e4 <HAL_DMA_Abort_IT+0x98>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a1e      	ldr	r2, [pc, #120]	@ (800372c <HAL_DMA_Abort_IT+0xe0>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d012      	beq.n	80036de <HAL_DMA_Abort_IT+0x92>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a1c      	ldr	r2, [pc, #112]	@ (8003730 <HAL_DMA_Abort_IT+0xe4>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d00a      	beq.n	80036d8 <HAL_DMA_Abort_IT+0x8c>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a1b      	ldr	r2, [pc, #108]	@ (8003734 <HAL_DMA_Abort_IT+0xe8>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d102      	bne.n	80036d2 <HAL_DMA_Abort_IT+0x86>
 80036cc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80036d0:	e00e      	b.n	80036f0 <HAL_DMA_Abort_IT+0xa4>
 80036d2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80036d6:	e00b      	b.n	80036f0 <HAL_DMA_Abort_IT+0xa4>
 80036d8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80036dc:	e008      	b.n	80036f0 <HAL_DMA_Abort_IT+0xa4>
 80036de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80036e2:	e005      	b.n	80036f0 <HAL_DMA_Abort_IT+0xa4>
 80036e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80036e8:	e002      	b.n	80036f0 <HAL_DMA_Abort_IT+0xa4>
 80036ea:	2310      	movs	r3, #16
 80036ec:	e000      	b.n	80036f0 <HAL_DMA_Abort_IT+0xa4>
 80036ee:	2301      	movs	r3, #1
 80036f0:	4a11      	ldr	r2, [pc, #68]	@ (8003738 <HAL_DMA_Abort_IT+0xec>)
 80036f2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003708:	2b00      	cmp	r3, #0
 800370a:	d003      	beq.n	8003714 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	4798      	blx	r3
    } 
  }
  return status;
 8003714:	7bfb      	ldrb	r3, [r7, #15]
}
 8003716:	4618      	mov	r0, r3
 8003718:	3710      	adds	r7, #16
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	40020008 	.word	0x40020008
 8003724:	4002001c 	.word	0x4002001c
 8003728:	40020030 	.word	0x40020030
 800372c:	40020044 	.word	0x40020044
 8003730:	40020058 	.word	0x40020058
 8003734:	4002006c 	.word	0x4002006c
 8003738:	40020000 	.word	0x40020000

0800373c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800373c:	b480      	push	{r7}
 800373e:	b08b      	sub	sp, #44	@ 0x2c
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003746:	2300      	movs	r3, #0
 8003748:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800374a:	2300      	movs	r3, #0
 800374c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800374e:	e169      	b.n	8003a24 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003750:	2201      	movs	r2, #1
 8003752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003754:	fa02 f303 	lsl.w	r3, r2, r3
 8003758:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	69fa      	ldr	r2, [r7, #28]
 8003760:	4013      	ands	r3, r2
 8003762:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003764:	69ba      	ldr	r2, [r7, #24]
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	429a      	cmp	r2, r3
 800376a:	f040 8158 	bne.w	8003a1e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	4a9a      	ldr	r2, [pc, #616]	@ (80039dc <HAL_GPIO_Init+0x2a0>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d05e      	beq.n	8003836 <HAL_GPIO_Init+0xfa>
 8003778:	4a98      	ldr	r2, [pc, #608]	@ (80039dc <HAL_GPIO_Init+0x2a0>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d875      	bhi.n	800386a <HAL_GPIO_Init+0x12e>
 800377e:	4a98      	ldr	r2, [pc, #608]	@ (80039e0 <HAL_GPIO_Init+0x2a4>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d058      	beq.n	8003836 <HAL_GPIO_Init+0xfa>
 8003784:	4a96      	ldr	r2, [pc, #600]	@ (80039e0 <HAL_GPIO_Init+0x2a4>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d86f      	bhi.n	800386a <HAL_GPIO_Init+0x12e>
 800378a:	4a96      	ldr	r2, [pc, #600]	@ (80039e4 <HAL_GPIO_Init+0x2a8>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d052      	beq.n	8003836 <HAL_GPIO_Init+0xfa>
 8003790:	4a94      	ldr	r2, [pc, #592]	@ (80039e4 <HAL_GPIO_Init+0x2a8>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d869      	bhi.n	800386a <HAL_GPIO_Init+0x12e>
 8003796:	4a94      	ldr	r2, [pc, #592]	@ (80039e8 <HAL_GPIO_Init+0x2ac>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d04c      	beq.n	8003836 <HAL_GPIO_Init+0xfa>
 800379c:	4a92      	ldr	r2, [pc, #584]	@ (80039e8 <HAL_GPIO_Init+0x2ac>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d863      	bhi.n	800386a <HAL_GPIO_Init+0x12e>
 80037a2:	4a92      	ldr	r2, [pc, #584]	@ (80039ec <HAL_GPIO_Init+0x2b0>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d046      	beq.n	8003836 <HAL_GPIO_Init+0xfa>
 80037a8:	4a90      	ldr	r2, [pc, #576]	@ (80039ec <HAL_GPIO_Init+0x2b0>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d85d      	bhi.n	800386a <HAL_GPIO_Init+0x12e>
 80037ae:	2b12      	cmp	r3, #18
 80037b0:	d82a      	bhi.n	8003808 <HAL_GPIO_Init+0xcc>
 80037b2:	2b12      	cmp	r3, #18
 80037b4:	d859      	bhi.n	800386a <HAL_GPIO_Init+0x12e>
 80037b6:	a201      	add	r2, pc, #4	@ (adr r2, 80037bc <HAL_GPIO_Init+0x80>)
 80037b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037bc:	08003837 	.word	0x08003837
 80037c0:	08003811 	.word	0x08003811
 80037c4:	08003823 	.word	0x08003823
 80037c8:	08003865 	.word	0x08003865
 80037cc:	0800386b 	.word	0x0800386b
 80037d0:	0800386b 	.word	0x0800386b
 80037d4:	0800386b 	.word	0x0800386b
 80037d8:	0800386b 	.word	0x0800386b
 80037dc:	0800386b 	.word	0x0800386b
 80037e0:	0800386b 	.word	0x0800386b
 80037e4:	0800386b 	.word	0x0800386b
 80037e8:	0800386b 	.word	0x0800386b
 80037ec:	0800386b 	.word	0x0800386b
 80037f0:	0800386b 	.word	0x0800386b
 80037f4:	0800386b 	.word	0x0800386b
 80037f8:	0800386b 	.word	0x0800386b
 80037fc:	0800386b 	.word	0x0800386b
 8003800:	08003819 	.word	0x08003819
 8003804:	0800382d 	.word	0x0800382d
 8003808:	4a79      	ldr	r2, [pc, #484]	@ (80039f0 <HAL_GPIO_Init+0x2b4>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d013      	beq.n	8003836 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800380e:	e02c      	b.n	800386a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	623b      	str	r3, [r7, #32]
          break;
 8003816:	e029      	b.n	800386c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	3304      	adds	r3, #4
 800381e:	623b      	str	r3, [r7, #32]
          break;
 8003820:	e024      	b.n	800386c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	3308      	adds	r3, #8
 8003828:	623b      	str	r3, [r7, #32]
          break;
 800382a:	e01f      	b.n	800386c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	330c      	adds	r3, #12
 8003832:	623b      	str	r3, [r7, #32]
          break;
 8003834:	e01a      	b.n	800386c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d102      	bne.n	8003844 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800383e:	2304      	movs	r3, #4
 8003840:	623b      	str	r3, [r7, #32]
          break;
 8003842:	e013      	b.n	800386c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	2b01      	cmp	r3, #1
 800384a:	d105      	bne.n	8003858 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800384c:	2308      	movs	r3, #8
 800384e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	69fa      	ldr	r2, [r7, #28]
 8003854:	611a      	str	r2, [r3, #16]
          break;
 8003856:	e009      	b.n	800386c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003858:	2308      	movs	r3, #8
 800385a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	69fa      	ldr	r2, [r7, #28]
 8003860:	615a      	str	r2, [r3, #20]
          break;
 8003862:	e003      	b.n	800386c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003864:	2300      	movs	r3, #0
 8003866:	623b      	str	r3, [r7, #32]
          break;
 8003868:	e000      	b.n	800386c <HAL_GPIO_Init+0x130>
          break;
 800386a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	2bff      	cmp	r3, #255	@ 0xff
 8003870:	d801      	bhi.n	8003876 <HAL_GPIO_Init+0x13a>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	e001      	b.n	800387a <HAL_GPIO_Init+0x13e>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	3304      	adds	r3, #4
 800387a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	2bff      	cmp	r3, #255	@ 0xff
 8003880:	d802      	bhi.n	8003888 <HAL_GPIO_Init+0x14c>
 8003882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	e002      	b.n	800388e <HAL_GPIO_Init+0x152>
 8003888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800388a:	3b08      	subs	r3, #8
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	210f      	movs	r1, #15
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	fa01 f303 	lsl.w	r3, r1, r3
 800389c:	43db      	mvns	r3, r3
 800389e:	401a      	ands	r2, r3
 80038a0:	6a39      	ldr	r1, [r7, #32]
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	fa01 f303 	lsl.w	r3, r1, r3
 80038a8:	431a      	orrs	r2, r3
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	f000 80b1 	beq.w	8003a1e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80038bc:	4b4d      	ldr	r3, [pc, #308]	@ (80039f4 <HAL_GPIO_Init+0x2b8>)
 80038be:	699b      	ldr	r3, [r3, #24]
 80038c0:	4a4c      	ldr	r2, [pc, #304]	@ (80039f4 <HAL_GPIO_Init+0x2b8>)
 80038c2:	f043 0301 	orr.w	r3, r3, #1
 80038c6:	6193      	str	r3, [r2, #24]
 80038c8:	4b4a      	ldr	r3, [pc, #296]	@ (80039f4 <HAL_GPIO_Init+0x2b8>)
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	f003 0301 	and.w	r3, r3, #1
 80038d0:	60bb      	str	r3, [r7, #8]
 80038d2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80038d4:	4a48      	ldr	r2, [pc, #288]	@ (80039f8 <HAL_GPIO_Init+0x2bc>)
 80038d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038d8:	089b      	lsrs	r3, r3, #2
 80038da:	3302      	adds	r3, #2
 80038dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038e0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80038e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e4:	f003 0303 	and.w	r3, r3, #3
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	220f      	movs	r2, #15
 80038ec:	fa02 f303 	lsl.w	r3, r2, r3
 80038f0:	43db      	mvns	r3, r3
 80038f2:	68fa      	ldr	r2, [r7, #12]
 80038f4:	4013      	ands	r3, r2
 80038f6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	4a40      	ldr	r2, [pc, #256]	@ (80039fc <HAL_GPIO_Init+0x2c0>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d013      	beq.n	8003928 <HAL_GPIO_Init+0x1ec>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4a3f      	ldr	r2, [pc, #252]	@ (8003a00 <HAL_GPIO_Init+0x2c4>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d00d      	beq.n	8003924 <HAL_GPIO_Init+0x1e8>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4a3e      	ldr	r2, [pc, #248]	@ (8003a04 <HAL_GPIO_Init+0x2c8>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d007      	beq.n	8003920 <HAL_GPIO_Init+0x1e4>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4a3d      	ldr	r2, [pc, #244]	@ (8003a08 <HAL_GPIO_Init+0x2cc>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d101      	bne.n	800391c <HAL_GPIO_Init+0x1e0>
 8003918:	2303      	movs	r3, #3
 800391a:	e006      	b.n	800392a <HAL_GPIO_Init+0x1ee>
 800391c:	2304      	movs	r3, #4
 800391e:	e004      	b.n	800392a <HAL_GPIO_Init+0x1ee>
 8003920:	2302      	movs	r3, #2
 8003922:	e002      	b.n	800392a <HAL_GPIO_Init+0x1ee>
 8003924:	2301      	movs	r3, #1
 8003926:	e000      	b.n	800392a <HAL_GPIO_Init+0x1ee>
 8003928:	2300      	movs	r3, #0
 800392a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800392c:	f002 0203 	and.w	r2, r2, #3
 8003930:	0092      	lsls	r2, r2, #2
 8003932:	4093      	lsls	r3, r2
 8003934:	68fa      	ldr	r2, [r7, #12]
 8003936:	4313      	orrs	r3, r2
 8003938:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800393a:	492f      	ldr	r1, [pc, #188]	@ (80039f8 <HAL_GPIO_Init+0x2bc>)
 800393c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800393e:	089b      	lsrs	r3, r3, #2
 8003940:	3302      	adds	r3, #2
 8003942:	68fa      	ldr	r2, [r7, #12]
 8003944:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d006      	beq.n	8003962 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003954:	4b2d      	ldr	r3, [pc, #180]	@ (8003a0c <HAL_GPIO_Init+0x2d0>)
 8003956:	689a      	ldr	r2, [r3, #8]
 8003958:	492c      	ldr	r1, [pc, #176]	@ (8003a0c <HAL_GPIO_Init+0x2d0>)
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	4313      	orrs	r3, r2
 800395e:	608b      	str	r3, [r1, #8]
 8003960:	e006      	b.n	8003970 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003962:	4b2a      	ldr	r3, [pc, #168]	@ (8003a0c <HAL_GPIO_Init+0x2d0>)
 8003964:	689a      	ldr	r2, [r3, #8]
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	43db      	mvns	r3, r3
 800396a:	4928      	ldr	r1, [pc, #160]	@ (8003a0c <HAL_GPIO_Init+0x2d0>)
 800396c:	4013      	ands	r3, r2
 800396e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d006      	beq.n	800398a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800397c:	4b23      	ldr	r3, [pc, #140]	@ (8003a0c <HAL_GPIO_Init+0x2d0>)
 800397e:	68da      	ldr	r2, [r3, #12]
 8003980:	4922      	ldr	r1, [pc, #136]	@ (8003a0c <HAL_GPIO_Init+0x2d0>)
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	4313      	orrs	r3, r2
 8003986:	60cb      	str	r3, [r1, #12]
 8003988:	e006      	b.n	8003998 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800398a:	4b20      	ldr	r3, [pc, #128]	@ (8003a0c <HAL_GPIO_Init+0x2d0>)
 800398c:	68da      	ldr	r2, [r3, #12]
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	43db      	mvns	r3, r3
 8003992:	491e      	ldr	r1, [pc, #120]	@ (8003a0c <HAL_GPIO_Init+0x2d0>)
 8003994:	4013      	ands	r3, r2
 8003996:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d006      	beq.n	80039b2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80039a4:	4b19      	ldr	r3, [pc, #100]	@ (8003a0c <HAL_GPIO_Init+0x2d0>)
 80039a6:	685a      	ldr	r2, [r3, #4]
 80039a8:	4918      	ldr	r1, [pc, #96]	@ (8003a0c <HAL_GPIO_Init+0x2d0>)
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	604b      	str	r3, [r1, #4]
 80039b0:	e006      	b.n	80039c0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80039b2:	4b16      	ldr	r3, [pc, #88]	@ (8003a0c <HAL_GPIO_Init+0x2d0>)
 80039b4:	685a      	ldr	r2, [r3, #4]
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	43db      	mvns	r3, r3
 80039ba:	4914      	ldr	r1, [pc, #80]	@ (8003a0c <HAL_GPIO_Init+0x2d0>)
 80039bc:	4013      	ands	r3, r2
 80039be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d021      	beq.n	8003a10 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80039cc:	4b0f      	ldr	r3, [pc, #60]	@ (8003a0c <HAL_GPIO_Init+0x2d0>)
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	490e      	ldr	r1, [pc, #56]	@ (8003a0c <HAL_GPIO_Init+0x2d0>)
 80039d2:	69bb      	ldr	r3, [r7, #24]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	600b      	str	r3, [r1, #0]
 80039d8:	e021      	b.n	8003a1e <HAL_GPIO_Init+0x2e2>
 80039da:	bf00      	nop
 80039dc:	10320000 	.word	0x10320000
 80039e0:	10310000 	.word	0x10310000
 80039e4:	10220000 	.word	0x10220000
 80039e8:	10210000 	.word	0x10210000
 80039ec:	10120000 	.word	0x10120000
 80039f0:	10110000 	.word	0x10110000
 80039f4:	40021000 	.word	0x40021000
 80039f8:	40010000 	.word	0x40010000
 80039fc:	40010800 	.word	0x40010800
 8003a00:	40010c00 	.word	0x40010c00
 8003a04:	40011000 	.word	0x40011000
 8003a08:	40011400 	.word	0x40011400
 8003a0c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003a10:	4b0b      	ldr	r3, [pc, #44]	@ (8003a40 <HAL_GPIO_Init+0x304>)
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	43db      	mvns	r3, r3
 8003a18:	4909      	ldr	r1, [pc, #36]	@ (8003a40 <HAL_GPIO_Init+0x304>)
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a20:	3301      	adds	r3, #1
 8003a22:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a2a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	f47f ae8e 	bne.w	8003750 <HAL_GPIO_Init+0x14>
  }
}
 8003a34:	bf00      	nop
 8003a36:	bf00      	nop
 8003a38:	372c      	adds	r7, #44	@ 0x2c
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bc80      	pop	{r7}
 8003a3e:	4770      	bx	lr
 8003a40:	40010400 	.word	0x40010400

08003a44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b085      	sub	sp, #20
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	689a      	ldr	r2, [r3, #8]
 8003a54:	887b      	ldrh	r3, [r7, #2]
 8003a56:	4013      	ands	r3, r2
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d002      	beq.n	8003a62 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	73fb      	strb	r3, [r7, #15]
 8003a60:	e001      	b.n	8003a66 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a62:	2300      	movs	r3, #0
 8003a64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3714      	adds	r7, #20
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bc80      	pop	{r7}
 8003a70:	4770      	bx	lr

08003a72 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a72:	b480      	push	{r7}
 8003a74:	b083      	sub	sp, #12
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
 8003a7a:	460b      	mov	r3, r1
 8003a7c:	807b      	strh	r3, [r7, #2]
 8003a7e:	4613      	mov	r3, r2
 8003a80:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a82:	787b      	ldrb	r3, [r7, #1]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d003      	beq.n	8003a90 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a88:	887a      	ldrh	r2, [r7, #2]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003a8e:	e003      	b.n	8003a98 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003a90:	887b      	ldrh	r3, [r7, #2]
 8003a92:	041a      	lsls	r2, r3, #16
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	611a      	str	r2, [r3, #16]
}
 8003a98:	bf00      	nop
 8003a9a:	370c      	adds	r7, #12
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bc80      	pop	{r7}
 8003aa0:	4770      	bx	lr

08003aa2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003aa2:	b480      	push	{r7}
 8003aa4:	b085      	sub	sp, #20
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
 8003aaa:	460b      	mov	r3, r1
 8003aac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003ab4:	887a      	ldrh	r2, [r7, #2]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	4013      	ands	r3, r2
 8003aba:	041a      	lsls	r2, r3, #16
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	43d9      	mvns	r1, r3
 8003ac0:	887b      	ldrh	r3, [r7, #2]
 8003ac2:	400b      	ands	r3, r1
 8003ac4:	431a      	orrs	r2, r3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	611a      	str	r2, [r3, #16]
}
 8003aca:	bf00      	nop
 8003acc:	3714      	adds	r7, #20
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bc80      	pop	{r7}
 8003ad2:	4770      	bx	lr

08003ad4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d101      	bne.n	8003ae6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e12b      	b.n	8003d3e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d106      	bne.n	8003b00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f7fe fdac 	bl	8002658 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2224      	movs	r2, #36	@ 0x24
 8003b04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f022 0201 	bic.w	r2, r2, #1
 8003b16:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b26:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003b36:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b38:	f001 fcf8 	bl	800552c <HAL_RCC_GetPCLK1Freq>
 8003b3c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	4a81      	ldr	r2, [pc, #516]	@ (8003d48 <HAL_I2C_Init+0x274>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d807      	bhi.n	8003b58 <HAL_I2C_Init+0x84>
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	4a80      	ldr	r2, [pc, #512]	@ (8003d4c <HAL_I2C_Init+0x278>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	bf94      	ite	ls
 8003b50:	2301      	movls	r3, #1
 8003b52:	2300      	movhi	r3, #0
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	e006      	b.n	8003b66 <HAL_I2C_Init+0x92>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	4a7d      	ldr	r2, [pc, #500]	@ (8003d50 <HAL_I2C_Init+0x27c>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	bf94      	ite	ls
 8003b60:	2301      	movls	r3, #1
 8003b62:	2300      	movhi	r3, #0
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d001      	beq.n	8003b6e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e0e7      	b.n	8003d3e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	4a78      	ldr	r2, [pc, #480]	@ (8003d54 <HAL_I2C_Init+0x280>)
 8003b72:	fba2 2303 	umull	r2, r3, r2, r3
 8003b76:	0c9b      	lsrs	r3, r3, #18
 8003b78:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	68ba      	ldr	r2, [r7, #8]
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	6a1b      	ldr	r3, [r3, #32]
 8003b94:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	4a6a      	ldr	r2, [pc, #424]	@ (8003d48 <HAL_I2C_Init+0x274>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d802      	bhi.n	8003ba8 <HAL_I2C_Init+0xd4>
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	e009      	b.n	8003bbc <HAL_I2C_Init+0xe8>
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003bae:	fb02 f303 	mul.w	r3, r2, r3
 8003bb2:	4a69      	ldr	r2, [pc, #420]	@ (8003d58 <HAL_I2C_Init+0x284>)
 8003bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb8:	099b      	lsrs	r3, r3, #6
 8003bba:	3301      	adds	r3, #1
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	6812      	ldr	r2, [r2, #0]
 8003bc0:	430b      	orrs	r3, r1
 8003bc2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	69db      	ldr	r3, [r3, #28]
 8003bca:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003bce:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	495c      	ldr	r1, [pc, #368]	@ (8003d48 <HAL_I2C_Init+0x274>)
 8003bd8:	428b      	cmp	r3, r1
 8003bda:	d819      	bhi.n	8003c10 <HAL_I2C_Init+0x13c>
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	1e59      	subs	r1, r3, #1
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	005b      	lsls	r3, r3, #1
 8003be6:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bea:	1c59      	adds	r1, r3, #1
 8003bec:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003bf0:	400b      	ands	r3, r1
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d00a      	beq.n	8003c0c <HAL_I2C_Init+0x138>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	1e59      	subs	r1, r3, #1
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	005b      	lsls	r3, r3, #1
 8003c00:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c04:	3301      	adds	r3, #1
 8003c06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c0a:	e051      	b.n	8003cb0 <HAL_I2C_Init+0x1dc>
 8003c0c:	2304      	movs	r3, #4
 8003c0e:	e04f      	b.n	8003cb0 <HAL_I2C_Init+0x1dc>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d111      	bne.n	8003c3c <HAL_I2C_Init+0x168>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	1e58      	subs	r0, r3, #1
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6859      	ldr	r1, [r3, #4]
 8003c20:	460b      	mov	r3, r1
 8003c22:	005b      	lsls	r3, r3, #1
 8003c24:	440b      	add	r3, r1
 8003c26:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	bf0c      	ite	eq
 8003c34:	2301      	moveq	r3, #1
 8003c36:	2300      	movne	r3, #0
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	e012      	b.n	8003c62 <HAL_I2C_Init+0x18e>
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	1e58      	subs	r0, r3, #1
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6859      	ldr	r1, [r3, #4]
 8003c44:	460b      	mov	r3, r1
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	440b      	add	r3, r1
 8003c4a:	0099      	lsls	r1, r3, #2
 8003c4c:	440b      	add	r3, r1
 8003c4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c52:	3301      	adds	r3, #1
 8003c54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	bf0c      	ite	eq
 8003c5c:	2301      	moveq	r3, #1
 8003c5e:	2300      	movne	r3, #0
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d001      	beq.n	8003c6a <HAL_I2C_Init+0x196>
 8003c66:	2301      	movs	r3, #1
 8003c68:	e022      	b.n	8003cb0 <HAL_I2C_Init+0x1dc>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d10e      	bne.n	8003c90 <HAL_I2C_Init+0x1bc>
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	1e58      	subs	r0, r3, #1
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6859      	ldr	r1, [r3, #4]
 8003c7a:	460b      	mov	r3, r1
 8003c7c:	005b      	lsls	r3, r3, #1
 8003c7e:	440b      	add	r3, r1
 8003c80:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c84:	3301      	adds	r3, #1
 8003c86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c8e:	e00f      	b.n	8003cb0 <HAL_I2C_Init+0x1dc>
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	1e58      	subs	r0, r3, #1
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6859      	ldr	r1, [r3, #4]
 8003c98:	460b      	mov	r3, r1
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	440b      	add	r3, r1
 8003c9e:	0099      	lsls	r1, r3, #2
 8003ca0:	440b      	add	r3, r1
 8003ca2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003cb0:	6879      	ldr	r1, [r7, #4]
 8003cb2:	6809      	ldr	r1, [r1, #0]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	69da      	ldr	r2, [r3, #28]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a1b      	ldr	r3, [r3, #32]
 8003cca:	431a      	orrs	r2, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	430a      	orrs	r2, r1
 8003cd2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003cde:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	6911      	ldr	r1, [r2, #16]
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	68d2      	ldr	r2, [r2, #12]
 8003cea:	4311      	orrs	r1, r2
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	6812      	ldr	r2, [r2, #0]
 8003cf0:	430b      	orrs	r3, r1
 8003cf2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	695a      	ldr	r2, [r3, #20]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	699b      	ldr	r3, [r3, #24]
 8003d06:	431a      	orrs	r2, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	430a      	orrs	r2, r1
 8003d0e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f042 0201 	orr.w	r2, r2, #1
 8003d1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2220      	movs	r2, #32
 8003d2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3710      	adds	r7, #16
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	000186a0 	.word	0x000186a0
 8003d4c:	001e847f 	.word	0x001e847f
 8003d50:	003d08ff 	.word	0x003d08ff
 8003d54:	431bde83 	.word	0x431bde83
 8003d58:	10624dd3 	.word	0x10624dd3

08003d5c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b088      	sub	sp, #32
 8003d60:	af02      	add	r7, sp, #8
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	607a      	str	r2, [r7, #4]
 8003d66:	461a      	mov	r2, r3
 8003d68:	460b      	mov	r3, r1
 8003d6a:	817b      	strh	r3, [r7, #10]
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d70:	f7fe feca 	bl	8002b08 <HAL_GetTick>
 8003d74:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	2b20      	cmp	r3, #32
 8003d80:	f040 80e0 	bne.w	8003f44 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	9300      	str	r3, [sp, #0]
 8003d88:	2319      	movs	r3, #25
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	4970      	ldr	r1, [pc, #448]	@ (8003f50 <HAL_I2C_Master_Transmit+0x1f4>)
 8003d8e:	68f8      	ldr	r0, [r7, #12]
 8003d90:	f000 fdcc 	bl	800492c <I2C_WaitOnFlagUntilTimeout>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d001      	beq.n	8003d9e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003d9a:	2302      	movs	r3, #2
 8003d9c:	e0d3      	b.n	8003f46 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d101      	bne.n	8003dac <HAL_I2C_Master_Transmit+0x50>
 8003da8:	2302      	movs	r3, #2
 8003daa:	e0cc      	b.n	8003f46 <HAL_I2C_Master_Transmit+0x1ea>
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0301 	and.w	r3, r3, #1
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d007      	beq.n	8003dd2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f042 0201 	orr.w	r2, r2, #1
 8003dd0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003de0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2221      	movs	r2, #33	@ 0x21
 8003de6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2210      	movs	r2, #16
 8003dee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	893a      	ldrh	r2, [r7, #8]
 8003e02:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e08:	b29a      	uxth	r2, r3
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	4a50      	ldr	r2, [pc, #320]	@ (8003f54 <HAL_I2C_Master_Transmit+0x1f8>)
 8003e12:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003e14:	8979      	ldrh	r1, [r7, #10]
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	6a3a      	ldr	r2, [r7, #32]
 8003e1a:	68f8      	ldr	r0, [r7, #12]
 8003e1c:	f000 fc36 	bl	800468c <I2C_MasterRequestWrite>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d001      	beq.n	8003e2a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e08d      	b.n	8003f46 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	613b      	str	r3, [r7, #16]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	695b      	ldr	r3, [r3, #20]
 8003e34:	613b      	str	r3, [r7, #16]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	699b      	ldr	r3, [r3, #24]
 8003e3c:	613b      	str	r3, [r7, #16]
 8003e3e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003e40:	e066      	b.n	8003f10 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e42:	697a      	ldr	r2, [r7, #20]
 8003e44:	6a39      	ldr	r1, [r7, #32]
 8003e46:	68f8      	ldr	r0, [r7, #12]
 8003e48:	f000 fe8a 	bl	8004b60 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00d      	beq.n	8003e6e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e56:	2b04      	cmp	r3, #4
 8003e58:	d107      	bne.n	8003e6a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e68:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e06b      	b.n	8003f46 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e72:	781a      	ldrb	r2, [r3, #0]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e7e:	1c5a      	adds	r2, r3, #1
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	b29a      	uxth	r2, r3
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e96:	3b01      	subs	r3, #1
 8003e98:	b29a      	uxth	r2, r3
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	695b      	ldr	r3, [r3, #20]
 8003ea4:	f003 0304 	and.w	r3, r3, #4
 8003ea8:	2b04      	cmp	r3, #4
 8003eaa:	d11b      	bne.n	8003ee4 <HAL_I2C_Master_Transmit+0x188>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d017      	beq.n	8003ee4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb8:	781a      	ldrb	r2, [r3, #0]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec4:	1c5a      	adds	r2, r3, #1
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	3b01      	subs	r3, #1
 8003ed2:	b29a      	uxth	r2, r3
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003edc:	3b01      	subs	r3, #1
 8003ede:	b29a      	uxth	r2, r3
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ee4:	697a      	ldr	r2, [r7, #20]
 8003ee6:	6a39      	ldr	r1, [r7, #32]
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	f000 fe81 	bl	8004bf0 <I2C_WaitOnBTFFlagUntilTimeout>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d00d      	beq.n	8003f10 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef8:	2b04      	cmp	r3, #4
 8003efa:	d107      	bne.n	8003f0c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f0a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e01a      	b.n	8003f46 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d194      	bne.n	8003e42 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2220      	movs	r2, #32
 8003f2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003f40:	2300      	movs	r3, #0
 8003f42:	e000      	b.n	8003f46 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003f44:	2302      	movs	r3, #2
  }
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3718      	adds	r7, #24
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	00100002 	.word	0x00100002
 8003f54:	ffff0000 	.word	0xffff0000

08003f58 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b08c      	sub	sp, #48	@ 0x30
 8003f5c:	af02      	add	r7, sp, #8
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	607a      	str	r2, [r7, #4]
 8003f62:	461a      	mov	r2, r3
 8003f64:	460b      	mov	r3, r1
 8003f66:	817b      	strh	r3, [r7, #10]
 8003f68:	4613      	mov	r3, r2
 8003f6a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f70:	f7fe fdca 	bl	8002b08 <HAL_GetTick>
 8003f74:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	2b20      	cmp	r3, #32
 8003f80:	f040 824b 	bne.w	800441a <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f86:	9300      	str	r3, [sp, #0]
 8003f88:	2319      	movs	r3, #25
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	497f      	ldr	r1, [pc, #508]	@ (800418c <HAL_I2C_Master_Receive+0x234>)
 8003f8e:	68f8      	ldr	r0, [r7, #12]
 8003f90:	f000 fccc 	bl	800492c <I2C_WaitOnFlagUntilTimeout>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d001      	beq.n	8003f9e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8003f9a:	2302      	movs	r3, #2
 8003f9c:	e23e      	b.n	800441c <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d101      	bne.n	8003fac <HAL_I2C_Master_Receive+0x54>
 8003fa8:	2302      	movs	r3, #2
 8003faa:	e237      	b.n	800441c <HAL_I2C_Master_Receive+0x4c4>
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0301 	and.w	r3, r3, #1
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d007      	beq.n	8003fd2 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f042 0201 	orr.w	r2, r2, #1
 8003fd0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003fe0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2222      	movs	r2, #34	@ 0x22
 8003fe6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2210      	movs	r2, #16
 8003fee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	893a      	ldrh	r2, [r7, #8]
 8004002:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004008:	b29a      	uxth	r2, r3
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	4a5f      	ldr	r2, [pc, #380]	@ (8004190 <HAL_I2C_Master_Receive+0x238>)
 8004012:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004014:	8979      	ldrh	r1, [r7, #10]
 8004016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004018:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800401a:	68f8      	ldr	r0, [r7, #12]
 800401c:	f000 fbb8 	bl	8004790 <I2C_MasterRequestRead>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d001      	beq.n	800402a <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e1f8      	b.n	800441c <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800402e:	2b00      	cmp	r3, #0
 8004030:	d113      	bne.n	800405a <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004032:	2300      	movs	r3, #0
 8004034:	61fb      	str	r3, [r7, #28]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	695b      	ldr	r3, [r3, #20]
 800403c:	61fb      	str	r3, [r7, #28]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	699b      	ldr	r3, [r3, #24]
 8004044:	61fb      	str	r3, [r7, #28]
 8004046:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004056:	601a      	str	r2, [r3, #0]
 8004058:	e1cc      	b.n	80043f4 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800405e:	2b01      	cmp	r3, #1
 8004060:	d11e      	bne.n	80040a0 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004070:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004072:	b672      	cpsid	i
}
 8004074:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004076:	2300      	movs	r3, #0
 8004078:	61bb      	str	r3, [r7, #24]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	695b      	ldr	r3, [r3, #20]
 8004080:	61bb      	str	r3, [r7, #24]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	699b      	ldr	r3, [r3, #24]
 8004088:	61bb      	str	r3, [r7, #24]
 800408a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800409a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800409c:	b662      	cpsie	i
}
 800409e:	e035      	b.n	800410c <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d11e      	bne.n	80040e6 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80040b6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80040b8:	b672      	cpsid	i
}
 80040ba:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040bc:	2300      	movs	r3, #0
 80040be:	617b      	str	r3, [r7, #20]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	695b      	ldr	r3, [r3, #20]
 80040c6:	617b      	str	r3, [r7, #20]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	699b      	ldr	r3, [r3, #24]
 80040ce:	617b      	str	r3, [r7, #20]
 80040d0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040e0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80040e2:	b662      	cpsie	i
}
 80040e4:	e012      	b.n	800410c <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80040f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040f6:	2300      	movs	r3, #0
 80040f8:	613b      	str	r3, [r7, #16]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	695b      	ldr	r3, [r3, #20]
 8004100:	613b      	str	r3, [r7, #16]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	699b      	ldr	r3, [r3, #24]
 8004108:	613b      	str	r3, [r7, #16]
 800410a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800410c:	e172      	b.n	80043f4 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004112:	2b03      	cmp	r3, #3
 8004114:	f200 811f 	bhi.w	8004356 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800411c:	2b01      	cmp	r3, #1
 800411e:	d123      	bne.n	8004168 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004120:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004122:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004124:	68f8      	ldr	r0, [r7, #12]
 8004126:	f000 fdab 	bl	8004c80 <I2C_WaitOnRXNEFlagUntilTimeout>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d001      	beq.n	8004134 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e173      	b.n	800441c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	691a      	ldr	r2, [r3, #16]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800413e:	b2d2      	uxtb	r2, r2
 8004140:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004146:	1c5a      	adds	r2, r3, #1
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004150:	3b01      	subs	r3, #1
 8004152:	b29a      	uxth	r2, r3
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800415c:	b29b      	uxth	r3, r3
 800415e:	3b01      	subs	r3, #1
 8004160:	b29a      	uxth	r2, r3
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004166:	e145      	b.n	80043f4 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800416c:	2b02      	cmp	r3, #2
 800416e:	d152      	bne.n	8004216 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004172:	9300      	str	r3, [sp, #0]
 8004174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004176:	2200      	movs	r2, #0
 8004178:	4906      	ldr	r1, [pc, #24]	@ (8004194 <HAL_I2C_Master_Receive+0x23c>)
 800417a:	68f8      	ldr	r0, [r7, #12]
 800417c:	f000 fbd6 	bl	800492c <I2C_WaitOnFlagUntilTimeout>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d008      	beq.n	8004198 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e148      	b.n	800441c <HAL_I2C_Master_Receive+0x4c4>
 800418a:	bf00      	nop
 800418c:	00100002 	.word	0x00100002
 8004190:	ffff0000 	.word	0xffff0000
 8004194:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004198:	b672      	cpsid	i
}
 800419a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	691a      	ldr	r2, [r3, #16]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b6:	b2d2      	uxtb	r2, r2
 80041b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041be:	1c5a      	adds	r2, r3, #1
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041c8:	3b01      	subs	r3, #1
 80041ca:	b29a      	uxth	r2, r3
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	3b01      	subs	r3, #1
 80041d8:	b29a      	uxth	r2, r3
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80041de:	b662      	cpsie	i
}
 80041e0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	691a      	ldr	r2, [r3, #16]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ec:	b2d2      	uxtb	r2, r2
 80041ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f4:	1c5a      	adds	r2, r3, #1
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041fe:	3b01      	subs	r3, #1
 8004200:	b29a      	uxth	r2, r3
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800420a:	b29b      	uxth	r3, r3
 800420c:	3b01      	subs	r3, #1
 800420e:	b29a      	uxth	r2, r3
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004214:	e0ee      	b.n	80043f4 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004218:	9300      	str	r3, [sp, #0]
 800421a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800421c:	2200      	movs	r2, #0
 800421e:	4981      	ldr	r1, [pc, #516]	@ (8004424 <HAL_I2C_Master_Receive+0x4cc>)
 8004220:	68f8      	ldr	r0, [r7, #12]
 8004222:	f000 fb83 	bl	800492c <I2C_WaitOnFlagUntilTimeout>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d001      	beq.n	8004230 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e0f5      	b.n	800441c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800423e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004240:	b672      	cpsid	i
}
 8004242:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	691a      	ldr	r2, [r3, #16]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800424e:	b2d2      	uxtb	r2, r2
 8004250:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004256:	1c5a      	adds	r2, r3, #1
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004260:	3b01      	subs	r3, #1
 8004262:	b29a      	uxth	r2, r3
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800426c:	b29b      	uxth	r3, r3
 800426e:	3b01      	subs	r3, #1
 8004270:	b29a      	uxth	r2, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004276:	4b6c      	ldr	r3, [pc, #432]	@ (8004428 <HAL_I2C_Master_Receive+0x4d0>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	08db      	lsrs	r3, r3, #3
 800427c:	4a6b      	ldr	r2, [pc, #428]	@ (800442c <HAL_I2C_Master_Receive+0x4d4>)
 800427e:	fba2 2303 	umull	r2, r3, r2, r3
 8004282:	0a1a      	lsrs	r2, r3, #8
 8004284:	4613      	mov	r3, r2
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	4413      	add	r3, r2
 800428a:	00da      	lsls	r2, r3, #3
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004290:	6a3b      	ldr	r3, [r7, #32]
 8004292:	3b01      	subs	r3, #1
 8004294:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004296:	6a3b      	ldr	r3, [r7, #32]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d118      	bne.n	80042ce <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2200      	movs	r2, #0
 80042a0:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2220      	movs	r2, #32
 80042a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b6:	f043 0220 	orr.w	r2, r3, #32
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80042be:	b662      	cpsie	i
}
 80042c0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e0a6      	b.n	800441c <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	695b      	ldr	r3, [r3, #20]
 80042d4:	f003 0304 	and.w	r3, r3, #4
 80042d8:	2b04      	cmp	r3, #4
 80042da:	d1d9      	bne.n	8004290 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	691a      	ldr	r2, [r3, #16]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042f6:	b2d2      	uxtb	r2, r2
 80042f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042fe:	1c5a      	adds	r2, r3, #1
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004308:	3b01      	subs	r3, #1
 800430a:	b29a      	uxth	r2, r3
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004314:	b29b      	uxth	r3, r3
 8004316:	3b01      	subs	r3, #1
 8004318:	b29a      	uxth	r2, r3
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800431e:	b662      	cpsie	i
}
 8004320:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	691a      	ldr	r2, [r3, #16]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800432c:	b2d2      	uxtb	r2, r2
 800432e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004334:	1c5a      	adds	r2, r3, #1
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800433e:	3b01      	subs	r3, #1
 8004340:	b29a      	uxth	r2, r3
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800434a:	b29b      	uxth	r3, r3
 800434c:	3b01      	subs	r3, #1
 800434e:	b29a      	uxth	r2, r3
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004354:	e04e      	b.n	80043f4 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004356:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004358:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800435a:	68f8      	ldr	r0, [r7, #12]
 800435c:	f000 fc90 	bl	8004c80 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d001      	beq.n	800436a <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e058      	b.n	800441c <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	691a      	ldr	r2, [r3, #16]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004374:	b2d2      	uxtb	r2, r2
 8004376:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800437c:	1c5a      	adds	r2, r3, #1
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004386:	3b01      	subs	r3, #1
 8004388:	b29a      	uxth	r2, r3
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004392:	b29b      	uxth	r3, r3
 8004394:	3b01      	subs	r3, #1
 8004396:	b29a      	uxth	r2, r3
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	695b      	ldr	r3, [r3, #20]
 80043a2:	f003 0304 	and.w	r3, r3, #4
 80043a6:	2b04      	cmp	r3, #4
 80043a8:	d124      	bne.n	80043f4 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043ae:	2b03      	cmp	r3, #3
 80043b0:	d107      	bne.n	80043c2 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043c0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	691a      	ldr	r2, [r3, #16]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043cc:	b2d2      	uxtb	r2, r2
 80043ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043d4:	1c5a      	adds	r2, r3, #1
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043de:	3b01      	subs	r3, #1
 80043e0:	b29a      	uxth	r2, r3
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	3b01      	subs	r3, #1
 80043ee:	b29a      	uxth	r2, r3
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	f47f ae88 	bne.w	800410e <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2220      	movs	r2, #32
 8004402:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004416:	2300      	movs	r3, #0
 8004418:	e000      	b.n	800441c <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 800441a:	2302      	movs	r3, #2
  }
}
 800441c:	4618      	mov	r0, r3
 800441e:	3728      	adds	r7, #40	@ 0x28
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	00010004 	.word	0x00010004
 8004428:	20000018 	.word	0x20000018
 800442c:	14f8b589 	.word	0x14f8b589

08004430 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b08a      	sub	sp, #40	@ 0x28
 8004434:	af02      	add	r7, sp, #8
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	607a      	str	r2, [r7, #4]
 800443a:	603b      	str	r3, [r7, #0]
 800443c:	460b      	mov	r3, r1
 800443e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004440:	f7fe fb62 	bl	8002b08 <HAL_GetTick>
 8004444:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004446:	2300      	movs	r3, #0
 8004448:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004450:	b2db      	uxtb	r3, r3
 8004452:	2b20      	cmp	r3, #32
 8004454:	f040 8111 	bne.w	800467a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	9300      	str	r3, [sp, #0]
 800445c:	2319      	movs	r3, #25
 800445e:	2201      	movs	r2, #1
 8004460:	4988      	ldr	r1, [pc, #544]	@ (8004684 <HAL_I2C_IsDeviceReady+0x254>)
 8004462:	68f8      	ldr	r0, [r7, #12]
 8004464:	f000 fa62 	bl	800492c <I2C_WaitOnFlagUntilTimeout>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d001      	beq.n	8004472 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800446e:	2302      	movs	r3, #2
 8004470:	e104      	b.n	800467c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004478:	2b01      	cmp	r3, #1
 800447a:	d101      	bne.n	8004480 <HAL_I2C_IsDeviceReady+0x50>
 800447c:	2302      	movs	r3, #2
 800447e:	e0fd      	b.n	800467c <HAL_I2C_IsDeviceReady+0x24c>
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 0301 	and.w	r3, r3, #1
 8004492:	2b01      	cmp	r3, #1
 8004494:	d007      	beq.n	80044a6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f042 0201 	orr.w	r2, r2, #1
 80044a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80044b4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2224      	movs	r2, #36	@ 0x24
 80044ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2200      	movs	r2, #0
 80044c2:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	4a70      	ldr	r2, [pc, #448]	@ (8004688 <HAL_I2C_IsDeviceReady+0x258>)
 80044c8:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80044d8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	9300      	str	r3, [sp, #0]
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80044e6:	68f8      	ldr	r0, [r7, #12]
 80044e8:	f000 fa20 	bl	800492c <I2C_WaitOnFlagUntilTimeout>
 80044ec:	4603      	mov	r3, r0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d00d      	beq.n	800450e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004500:	d103      	bne.n	800450a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004508:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e0b6      	b.n	800467c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800450e:	897b      	ldrh	r3, [r7, #10]
 8004510:	b2db      	uxtb	r3, r3
 8004512:	461a      	mov	r2, r3
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800451c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800451e:	f7fe faf3 	bl	8002b08 <HAL_GetTick>
 8004522:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	695b      	ldr	r3, [r3, #20]
 800452a:	f003 0302 	and.w	r3, r3, #2
 800452e:	2b02      	cmp	r3, #2
 8004530:	bf0c      	ite	eq
 8004532:	2301      	moveq	r3, #1
 8004534:	2300      	movne	r3, #0
 8004536:	b2db      	uxtb	r3, r3
 8004538:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	695b      	ldr	r3, [r3, #20]
 8004540:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004544:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004548:	bf0c      	ite	eq
 800454a:	2301      	moveq	r3, #1
 800454c:	2300      	movne	r3, #0
 800454e:	b2db      	uxtb	r3, r3
 8004550:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004552:	e025      	b.n	80045a0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004554:	f7fe fad8 	bl	8002b08 <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	683a      	ldr	r2, [r7, #0]
 8004560:	429a      	cmp	r2, r3
 8004562:	d302      	bcc.n	800456a <HAL_I2C_IsDeviceReady+0x13a>
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d103      	bne.n	8004572 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	22a0      	movs	r2, #160	@ 0xa0
 800456e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	695b      	ldr	r3, [r3, #20]
 8004578:	f003 0302 	and.w	r3, r3, #2
 800457c:	2b02      	cmp	r3, #2
 800457e:	bf0c      	ite	eq
 8004580:	2301      	moveq	r3, #1
 8004582:	2300      	movne	r3, #0
 8004584:	b2db      	uxtb	r3, r3
 8004586:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	695b      	ldr	r3, [r3, #20]
 800458e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004592:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004596:	bf0c      	ite	eq
 8004598:	2301      	moveq	r3, #1
 800459a:	2300      	movne	r3, #0
 800459c:	b2db      	uxtb	r3, r3
 800459e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	2ba0      	cmp	r3, #160	@ 0xa0
 80045aa:	d005      	beq.n	80045b8 <HAL_I2C_IsDeviceReady+0x188>
 80045ac:	7dfb      	ldrb	r3, [r7, #23]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d102      	bne.n	80045b8 <HAL_I2C_IsDeviceReady+0x188>
 80045b2:	7dbb      	ldrb	r3, [r7, #22]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d0cd      	beq.n	8004554 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2220      	movs	r2, #32
 80045bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	695b      	ldr	r3, [r3, #20]
 80045c6:	f003 0302 	and.w	r3, r3, #2
 80045ca:	2b02      	cmp	r3, #2
 80045cc:	d129      	bne.n	8004622 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045dc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045de:	2300      	movs	r3, #0
 80045e0:	613b      	str	r3, [r7, #16]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	695b      	ldr	r3, [r3, #20]
 80045e8:	613b      	str	r3, [r7, #16]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	699b      	ldr	r3, [r3, #24]
 80045f0:	613b      	str	r3, [r7, #16]
 80045f2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	9300      	str	r3, [sp, #0]
 80045f8:	2319      	movs	r3, #25
 80045fa:	2201      	movs	r2, #1
 80045fc:	4921      	ldr	r1, [pc, #132]	@ (8004684 <HAL_I2C_IsDeviceReady+0x254>)
 80045fe:	68f8      	ldr	r0, [r7, #12]
 8004600:	f000 f994 	bl	800492c <I2C_WaitOnFlagUntilTimeout>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d001      	beq.n	800460e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e036      	b.n	800467c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2220      	movs	r2, #32
 8004612:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2200      	movs	r2, #0
 800461a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800461e:	2300      	movs	r3, #0
 8004620:	e02c      	b.n	800467c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004630:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800463a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	9300      	str	r3, [sp, #0]
 8004640:	2319      	movs	r3, #25
 8004642:	2201      	movs	r2, #1
 8004644:	490f      	ldr	r1, [pc, #60]	@ (8004684 <HAL_I2C_IsDeviceReady+0x254>)
 8004646:	68f8      	ldr	r0, [r7, #12]
 8004648:	f000 f970 	bl	800492c <I2C_WaitOnFlagUntilTimeout>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d001      	beq.n	8004656 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e012      	b.n	800467c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	3301      	adds	r3, #1
 800465a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800465c:	69ba      	ldr	r2, [r7, #24]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	429a      	cmp	r2, r3
 8004662:	f4ff af32 	bcc.w	80044ca <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2220      	movs	r2, #32
 800466a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e000      	b.n	800467c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800467a:	2302      	movs	r3, #2
  }
}
 800467c:	4618      	mov	r0, r3
 800467e:	3720      	adds	r7, #32
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}
 8004684:	00100002 	.word	0x00100002
 8004688:	ffff0000 	.word	0xffff0000

0800468c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b088      	sub	sp, #32
 8004690:	af02      	add	r7, sp, #8
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	607a      	str	r2, [r7, #4]
 8004696:	603b      	str	r3, [r7, #0]
 8004698:	460b      	mov	r3, r1
 800469a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046a0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	2b08      	cmp	r3, #8
 80046a6:	d006      	beq.n	80046b6 <I2C_MasterRequestWrite+0x2a>
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d003      	beq.n	80046b6 <I2C_MasterRequestWrite+0x2a>
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80046b4:	d108      	bne.n	80046c8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80046c4:	601a      	str	r2, [r3, #0]
 80046c6:	e00b      	b.n	80046e0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046cc:	2b12      	cmp	r3, #18
 80046ce:	d107      	bne.n	80046e0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80046de:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	9300      	str	r3, [sp, #0]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80046ec:	68f8      	ldr	r0, [r7, #12]
 80046ee:	f000 f91d 	bl	800492c <I2C_WaitOnFlagUntilTimeout>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d00d      	beq.n	8004714 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004702:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004706:	d103      	bne.n	8004710 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800470e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	e035      	b.n	8004780 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	691b      	ldr	r3, [r3, #16]
 8004718:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800471c:	d108      	bne.n	8004730 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800471e:	897b      	ldrh	r3, [r7, #10]
 8004720:	b2db      	uxtb	r3, r3
 8004722:	461a      	mov	r2, r3
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800472c:	611a      	str	r2, [r3, #16]
 800472e:	e01b      	b.n	8004768 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004730:	897b      	ldrh	r3, [r7, #10]
 8004732:	11db      	asrs	r3, r3, #7
 8004734:	b2db      	uxtb	r3, r3
 8004736:	f003 0306 	and.w	r3, r3, #6
 800473a:	b2db      	uxtb	r3, r3
 800473c:	f063 030f 	orn	r3, r3, #15
 8004740:	b2da      	uxtb	r2, r3
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	490e      	ldr	r1, [pc, #56]	@ (8004788 <I2C_MasterRequestWrite+0xfc>)
 800474e:	68f8      	ldr	r0, [r7, #12]
 8004750:	f000 f966 	bl	8004a20 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004754:	4603      	mov	r3, r0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d001      	beq.n	800475e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e010      	b.n	8004780 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800475e:	897b      	ldrh	r3, [r7, #10]
 8004760:	b2da      	uxtb	r2, r3
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	4907      	ldr	r1, [pc, #28]	@ (800478c <I2C_MasterRequestWrite+0x100>)
 800476e:	68f8      	ldr	r0, [r7, #12]
 8004770:	f000 f956 	bl	8004a20 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d001      	beq.n	800477e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e000      	b.n	8004780 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800477e:	2300      	movs	r3, #0
}
 8004780:	4618      	mov	r0, r3
 8004782:	3718      	adds	r7, #24
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}
 8004788:	00010008 	.word	0x00010008
 800478c:	00010002 	.word	0x00010002

08004790 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b088      	sub	sp, #32
 8004794:	af02      	add	r7, sp, #8
 8004796:	60f8      	str	r0, [r7, #12]
 8004798:	607a      	str	r2, [r7, #4]
 800479a:	603b      	str	r3, [r7, #0]
 800479c:	460b      	mov	r3, r1
 800479e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047a4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80047b4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	2b08      	cmp	r3, #8
 80047ba:	d006      	beq.n	80047ca <I2C_MasterRequestRead+0x3a>
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d003      	beq.n	80047ca <I2C_MasterRequestRead+0x3a>
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80047c8:	d108      	bne.n	80047dc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047d8:	601a      	str	r2, [r3, #0]
 80047da:	e00b      	b.n	80047f4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047e0:	2b11      	cmp	r3, #17
 80047e2:	d107      	bne.n	80047f4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047f2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	9300      	str	r3, [sp, #0]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004800:	68f8      	ldr	r0, [r7, #12]
 8004802:	f000 f893 	bl	800492c <I2C_WaitOnFlagUntilTimeout>
 8004806:	4603      	mov	r3, r0
 8004808:	2b00      	cmp	r3, #0
 800480a:	d00d      	beq.n	8004828 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004816:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800481a:	d103      	bne.n	8004824 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004822:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e079      	b.n	800491c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	691b      	ldr	r3, [r3, #16]
 800482c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004830:	d108      	bne.n	8004844 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004832:	897b      	ldrh	r3, [r7, #10]
 8004834:	b2db      	uxtb	r3, r3
 8004836:	f043 0301 	orr.w	r3, r3, #1
 800483a:	b2da      	uxtb	r2, r3
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	611a      	str	r2, [r3, #16]
 8004842:	e05f      	b.n	8004904 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004844:	897b      	ldrh	r3, [r7, #10]
 8004846:	11db      	asrs	r3, r3, #7
 8004848:	b2db      	uxtb	r3, r3
 800484a:	f003 0306 	and.w	r3, r3, #6
 800484e:	b2db      	uxtb	r3, r3
 8004850:	f063 030f 	orn	r3, r3, #15
 8004854:	b2da      	uxtb	r2, r3
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	4930      	ldr	r1, [pc, #192]	@ (8004924 <I2C_MasterRequestRead+0x194>)
 8004862:	68f8      	ldr	r0, [r7, #12]
 8004864:	f000 f8dc 	bl	8004a20 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004868:	4603      	mov	r3, r0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d001      	beq.n	8004872 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e054      	b.n	800491c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004872:	897b      	ldrh	r3, [r7, #10]
 8004874:	b2da      	uxtb	r2, r3
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	4929      	ldr	r1, [pc, #164]	@ (8004928 <I2C_MasterRequestRead+0x198>)
 8004882:	68f8      	ldr	r0, [r7, #12]
 8004884:	f000 f8cc 	bl	8004a20 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004888:	4603      	mov	r3, r0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d001      	beq.n	8004892 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e044      	b.n	800491c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004892:	2300      	movs	r3, #0
 8004894:	613b      	str	r3, [r7, #16]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	695b      	ldr	r3, [r3, #20]
 800489c:	613b      	str	r3, [r7, #16]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	699b      	ldr	r3, [r3, #24]
 80048a4:	613b      	str	r3, [r7, #16]
 80048a6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80048b6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	9300      	str	r3, [sp, #0]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80048c4:	68f8      	ldr	r0, [r7, #12]
 80048c6:	f000 f831 	bl	800492c <I2C_WaitOnFlagUntilTimeout>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d00d      	beq.n	80048ec <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048de:	d103      	bne.n	80048e8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80048e6:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80048e8:	2303      	movs	r3, #3
 80048ea:	e017      	b.n	800491c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80048ec:	897b      	ldrh	r3, [r7, #10]
 80048ee:	11db      	asrs	r3, r3, #7
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	f003 0306 	and.w	r3, r3, #6
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	f063 030e 	orn	r3, r3, #14
 80048fc:	b2da      	uxtb	r2, r3
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	4907      	ldr	r1, [pc, #28]	@ (8004928 <I2C_MasterRequestRead+0x198>)
 800490a:	68f8      	ldr	r0, [r7, #12]
 800490c:	f000 f888 	bl	8004a20 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d001      	beq.n	800491a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e000      	b.n	800491c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800491a:	2300      	movs	r3, #0
}
 800491c:	4618      	mov	r0, r3
 800491e:	3718      	adds	r7, #24
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}
 8004924:	00010008 	.word	0x00010008
 8004928:	00010002 	.word	0x00010002

0800492c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	60b9      	str	r1, [r7, #8]
 8004936:	603b      	str	r3, [r7, #0]
 8004938:	4613      	mov	r3, r2
 800493a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800493c:	e048      	b.n	80049d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004944:	d044      	beq.n	80049d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004946:	f7fe f8df 	bl	8002b08 <HAL_GetTick>
 800494a:	4602      	mov	r2, r0
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	683a      	ldr	r2, [r7, #0]
 8004952:	429a      	cmp	r2, r3
 8004954:	d302      	bcc.n	800495c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d139      	bne.n	80049d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	0c1b      	lsrs	r3, r3, #16
 8004960:	b2db      	uxtb	r3, r3
 8004962:	2b01      	cmp	r3, #1
 8004964:	d10d      	bne.n	8004982 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	695b      	ldr	r3, [r3, #20]
 800496c:	43da      	mvns	r2, r3
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	4013      	ands	r3, r2
 8004972:	b29b      	uxth	r3, r3
 8004974:	2b00      	cmp	r3, #0
 8004976:	bf0c      	ite	eq
 8004978:	2301      	moveq	r3, #1
 800497a:	2300      	movne	r3, #0
 800497c:	b2db      	uxtb	r3, r3
 800497e:	461a      	mov	r2, r3
 8004980:	e00c      	b.n	800499c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	699b      	ldr	r3, [r3, #24]
 8004988:	43da      	mvns	r2, r3
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	4013      	ands	r3, r2
 800498e:	b29b      	uxth	r3, r3
 8004990:	2b00      	cmp	r3, #0
 8004992:	bf0c      	ite	eq
 8004994:	2301      	moveq	r3, #1
 8004996:	2300      	movne	r3, #0
 8004998:	b2db      	uxtb	r3, r3
 800499a:	461a      	mov	r2, r3
 800499c:	79fb      	ldrb	r3, [r7, #7]
 800499e:	429a      	cmp	r2, r3
 80049a0:	d116      	bne.n	80049d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2200      	movs	r2, #0
 80049a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2220      	movs	r2, #32
 80049ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049bc:	f043 0220 	orr.w	r2, r3, #32
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e023      	b.n	8004a18 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	0c1b      	lsrs	r3, r3, #16
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d10d      	bne.n	80049f6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	695b      	ldr	r3, [r3, #20]
 80049e0:	43da      	mvns	r2, r3
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	4013      	ands	r3, r2
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	bf0c      	ite	eq
 80049ec:	2301      	moveq	r3, #1
 80049ee:	2300      	movne	r3, #0
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	461a      	mov	r2, r3
 80049f4:	e00c      	b.n	8004a10 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	699b      	ldr	r3, [r3, #24]
 80049fc:	43da      	mvns	r2, r3
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	4013      	ands	r3, r2
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	bf0c      	ite	eq
 8004a08:	2301      	moveq	r3, #1
 8004a0a:	2300      	movne	r3, #0
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	461a      	mov	r2, r3
 8004a10:	79fb      	ldrb	r3, [r7, #7]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d093      	beq.n	800493e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a16:	2300      	movs	r3, #0
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3710      	adds	r7, #16
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	60f8      	str	r0, [r7, #12]
 8004a28:	60b9      	str	r1, [r7, #8]
 8004a2a:	607a      	str	r2, [r7, #4]
 8004a2c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a2e:	e071      	b.n	8004b14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	695b      	ldr	r3, [r3, #20]
 8004a36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a3e:	d123      	bne.n	8004a88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a4e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004a58:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2220      	movs	r2, #32
 8004a64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a74:	f043 0204 	orr.w	r2, r3, #4
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e067      	b.n	8004b58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a8e:	d041      	beq.n	8004b14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a90:	f7fe f83a 	bl	8002b08 <HAL_GetTick>
 8004a94:	4602      	mov	r2, r0
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d302      	bcc.n	8004aa6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d136      	bne.n	8004b14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	0c1b      	lsrs	r3, r3, #16
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d10c      	bne.n	8004aca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	695b      	ldr	r3, [r3, #20]
 8004ab6:	43da      	mvns	r2, r3
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	4013      	ands	r3, r2
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	bf14      	ite	ne
 8004ac2:	2301      	movne	r3, #1
 8004ac4:	2300      	moveq	r3, #0
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	e00b      	b.n	8004ae2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	699b      	ldr	r3, [r3, #24]
 8004ad0:	43da      	mvns	r2, r3
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	bf14      	ite	ne
 8004adc:	2301      	movne	r3, #1
 8004ade:	2300      	moveq	r3, #0
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d016      	beq.n	8004b14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2220      	movs	r2, #32
 8004af0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b00:	f043 0220 	orr.w	r2, r3, #32
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	e021      	b.n	8004b58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	0c1b      	lsrs	r3, r3, #16
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d10c      	bne.n	8004b38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	695b      	ldr	r3, [r3, #20]
 8004b24:	43da      	mvns	r2, r3
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	4013      	ands	r3, r2
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	bf14      	ite	ne
 8004b30:	2301      	movne	r3, #1
 8004b32:	2300      	moveq	r3, #0
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	e00b      	b.n	8004b50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	699b      	ldr	r3, [r3, #24]
 8004b3e:	43da      	mvns	r2, r3
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	4013      	ands	r3, r2
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	bf14      	ite	ne
 8004b4a:	2301      	movne	r3, #1
 8004b4c:	2300      	moveq	r3, #0
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	f47f af6d 	bne.w	8004a30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004b56:	2300      	movs	r3, #0
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3710      	adds	r7, #16
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b084      	sub	sp, #16
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b6c:	e034      	b.n	8004bd8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b6e:	68f8      	ldr	r0, [r7, #12]
 8004b70:	f000 f8e3 	bl	8004d3a <I2C_IsAcknowledgeFailed>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d001      	beq.n	8004b7e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e034      	b.n	8004be8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b84:	d028      	beq.n	8004bd8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b86:	f7fd ffbf 	bl	8002b08 <HAL_GetTick>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	1ad3      	subs	r3, r2, r3
 8004b90:	68ba      	ldr	r2, [r7, #8]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d302      	bcc.n	8004b9c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d11d      	bne.n	8004bd8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	695b      	ldr	r3, [r3, #20]
 8004ba2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ba6:	2b80      	cmp	r3, #128	@ 0x80
 8004ba8:	d016      	beq.n	8004bd8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2200      	movs	r2, #0
 8004bae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2220      	movs	r2, #32
 8004bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bc4:	f043 0220 	orr.w	r2, r3, #32
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e007      	b.n	8004be8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	695b      	ldr	r3, [r3, #20]
 8004bde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004be2:	2b80      	cmp	r3, #128	@ 0x80
 8004be4:	d1c3      	bne.n	8004b6e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004be6:	2300      	movs	r3, #0
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3710      	adds	r7, #16
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	60f8      	str	r0, [r7, #12]
 8004bf8:	60b9      	str	r1, [r7, #8]
 8004bfa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004bfc:	e034      	b.n	8004c68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004bfe:	68f8      	ldr	r0, [r7, #12]
 8004c00:	f000 f89b 	bl	8004d3a <I2C_IsAcknowledgeFailed>
 8004c04:	4603      	mov	r3, r0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d001      	beq.n	8004c0e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e034      	b.n	8004c78 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c14:	d028      	beq.n	8004c68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c16:	f7fd ff77 	bl	8002b08 <HAL_GetTick>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	68ba      	ldr	r2, [r7, #8]
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d302      	bcc.n	8004c2c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d11d      	bne.n	8004c68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	695b      	ldr	r3, [r3, #20]
 8004c32:	f003 0304 	and.w	r3, r3, #4
 8004c36:	2b04      	cmp	r3, #4
 8004c38:	d016      	beq.n	8004c68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2220      	movs	r2, #32
 8004c44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c54:	f043 0220 	orr.w	r2, r3, #32
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e007      	b.n	8004c78 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	695b      	ldr	r3, [r3, #20]
 8004c6e:	f003 0304 	and.w	r3, r3, #4
 8004c72:	2b04      	cmp	r3, #4
 8004c74:	d1c3      	bne.n	8004bfe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004c76:	2300      	movs	r3, #0
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3710      	adds	r7, #16
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c8c:	e049      	b.n	8004d22 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	695b      	ldr	r3, [r3, #20]
 8004c94:	f003 0310 	and.w	r3, r3, #16
 8004c98:	2b10      	cmp	r3, #16
 8004c9a:	d119      	bne.n	8004cd0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f06f 0210 	mvn.w	r2, #16
 8004ca4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2220      	movs	r2, #32
 8004cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e030      	b.n	8004d32 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cd0:	f7fd ff1a 	bl	8002b08 <HAL_GetTick>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	68ba      	ldr	r2, [r7, #8]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d302      	bcc.n	8004ce6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d11d      	bne.n	8004d22 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	695b      	ldr	r3, [r3, #20]
 8004cec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cf0:	2b40      	cmp	r3, #64	@ 0x40
 8004cf2:	d016      	beq.n	8004d22 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2220      	movs	r2, #32
 8004cfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d0e:	f043 0220 	orr.w	r2, r3, #32
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e007      	b.n	8004d32 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	695b      	ldr	r3, [r3, #20]
 8004d28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d2c:	2b40      	cmp	r3, #64	@ 0x40
 8004d2e:	d1ae      	bne.n	8004c8e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d30:	2300      	movs	r3, #0
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3710      	adds	r7, #16
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}

08004d3a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004d3a:	b480      	push	{r7}
 8004d3c:	b083      	sub	sp, #12
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	695b      	ldr	r3, [r3, #20]
 8004d48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d50:	d11b      	bne.n	8004d8a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004d5a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2220      	movs	r2, #32
 8004d66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d76:	f043 0204 	orr.w	r2, r3, #4
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e000      	b.n	8004d8c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004d8a:	2300      	movs	r3, #0
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	370c      	adds	r7, #12
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bc80      	pop	{r7}
 8004d94:	4770      	bx	lr
	...

08004d98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b086      	sub	sp, #24
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d101      	bne.n	8004daa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e272      	b.n	8005290 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 0301 	and.w	r3, r3, #1
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	f000 8087 	beq.w	8004ec6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004db8:	4b92      	ldr	r3, [pc, #584]	@ (8005004 <HAL_RCC_OscConfig+0x26c>)
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	f003 030c 	and.w	r3, r3, #12
 8004dc0:	2b04      	cmp	r3, #4
 8004dc2:	d00c      	beq.n	8004dde <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004dc4:	4b8f      	ldr	r3, [pc, #572]	@ (8005004 <HAL_RCC_OscConfig+0x26c>)
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	f003 030c 	and.w	r3, r3, #12
 8004dcc:	2b08      	cmp	r3, #8
 8004dce:	d112      	bne.n	8004df6 <HAL_RCC_OscConfig+0x5e>
 8004dd0:	4b8c      	ldr	r3, [pc, #560]	@ (8005004 <HAL_RCC_OscConfig+0x26c>)
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004dd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ddc:	d10b      	bne.n	8004df6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dde:	4b89      	ldr	r3, [pc, #548]	@ (8005004 <HAL_RCC_OscConfig+0x26c>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d06c      	beq.n	8004ec4 <HAL_RCC_OscConfig+0x12c>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d168      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e24c      	b.n	8005290 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dfe:	d106      	bne.n	8004e0e <HAL_RCC_OscConfig+0x76>
 8004e00:	4b80      	ldr	r3, [pc, #512]	@ (8005004 <HAL_RCC_OscConfig+0x26c>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a7f      	ldr	r2, [pc, #508]	@ (8005004 <HAL_RCC_OscConfig+0x26c>)
 8004e06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e0a:	6013      	str	r3, [r2, #0]
 8004e0c:	e02e      	b.n	8004e6c <HAL_RCC_OscConfig+0xd4>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d10c      	bne.n	8004e30 <HAL_RCC_OscConfig+0x98>
 8004e16:	4b7b      	ldr	r3, [pc, #492]	@ (8005004 <HAL_RCC_OscConfig+0x26c>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a7a      	ldr	r2, [pc, #488]	@ (8005004 <HAL_RCC_OscConfig+0x26c>)
 8004e1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e20:	6013      	str	r3, [r2, #0]
 8004e22:	4b78      	ldr	r3, [pc, #480]	@ (8005004 <HAL_RCC_OscConfig+0x26c>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a77      	ldr	r2, [pc, #476]	@ (8005004 <HAL_RCC_OscConfig+0x26c>)
 8004e28:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e2c:	6013      	str	r3, [r2, #0]
 8004e2e:	e01d      	b.n	8004e6c <HAL_RCC_OscConfig+0xd4>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004e38:	d10c      	bne.n	8004e54 <HAL_RCC_OscConfig+0xbc>
 8004e3a:	4b72      	ldr	r3, [pc, #456]	@ (8005004 <HAL_RCC_OscConfig+0x26c>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a71      	ldr	r2, [pc, #452]	@ (8005004 <HAL_RCC_OscConfig+0x26c>)
 8004e40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004e44:	6013      	str	r3, [r2, #0]
 8004e46:	4b6f      	ldr	r3, [pc, #444]	@ (8005004 <HAL_RCC_OscConfig+0x26c>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a6e      	ldr	r2, [pc, #440]	@ (8005004 <HAL_RCC_OscConfig+0x26c>)
 8004e4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e50:	6013      	str	r3, [r2, #0]
 8004e52:	e00b      	b.n	8004e6c <HAL_RCC_OscConfig+0xd4>
 8004e54:	4b6b      	ldr	r3, [pc, #428]	@ (8005004 <HAL_RCC_OscConfig+0x26c>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a6a      	ldr	r2, [pc, #424]	@ (8005004 <HAL_RCC_OscConfig+0x26c>)
 8004e5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e5e:	6013      	str	r3, [r2, #0]
 8004e60:	4b68      	ldr	r3, [pc, #416]	@ (8005004 <HAL_RCC_OscConfig+0x26c>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a67      	ldr	r2, [pc, #412]	@ (8005004 <HAL_RCC_OscConfig+0x26c>)
 8004e66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e6a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d013      	beq.n	8004e9c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e74:	f7fd fe48 	bl	8002b08 <HAL_GetTick>
 8004e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e7a:	e008      	b.n	8004e8e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e7c:	f7fd fe44 	bl	8002b08 <HAL_GetTick>
 8004e80:	4602      	mov	r2, r0
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	2b64      	cmp	r3, #100	@ 0x64
 8004e88:	d901      	bls.n	8004e8e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e200      	b.n	8005290 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e8e:	4b5d      	ldr	r3, [pc, #372]	@ (8005004 <HAL_RCC_OscConfig+0x26c>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d0f0      	beq.n	8004e7c <HAL_RCC_OscConfig+0xe4>
 8004e9a:	e014      	b.n	8004ec6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e9c:	f7fd fe34 	bl	8002b08 <HAL_GetTick>
 8004ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ea2:	e008      	b.n	8004eb6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ea4:	f7fd fe30 	bl	8002b08 <HAL_GetTick>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	2b64      	cmp	r3, #100	@ 0x64
 8004eb0:	d901      	bls.n	8004eb6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e1ec      	b.n	8005290 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004eb6:	4b53      	ldr	r3, [pc, #332]	@ (8005004 <HAL_RCC_OscConfig+0x26c>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d1f0      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x10c>
 8004ec2:	e000      	b.n	8004ec6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ec4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 0302 	and.w	r3, r3, #2
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d063      	beq.n	8004f9a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004ed2:	4b4c      	ldr	r3, [pc, #304]	@ (8005004 <HAL_RCC_OscConfig+0x26c>)
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	f003 030c 	and.w	r3, r3, #12
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d00b      	beq.n	8004ef6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004ede:	4b49      	ldr	r3, [pc, #292]	@ (8005004 <HAL_RCC_OscConfig+0x26c>)
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	f003 030c 	and.w	r3, r3, #12
 8004ee6:	2b08      	cmp	r3, #8
 8004ee8:	d11c      	bne.n	8004f24 <HAL_RCC_OscConfig+0x18c>
 8004eea:	4b46      	ldr	r3, [pc, #280]	@ (8005004 <HAL_RCC_OscConfig+0x26c>)
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d116      	bne.n	8004f24 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ef6:	4b43      	ldr	r3, [pc, #268]	@ (8005004 <HAL_RCC_OscConfig+0x26c>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 0302 	and.w	r3, r3, #2
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d005      	beq.n	8004f0e <HAL_RCC_OscConfig+0x176>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	691b      	ldr	r3, [r3, #16]
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d001      	beq.n	8004f0e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e1c0      	b.n	8005290 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f0e:	4b3d      	ldr	r3, [pc, #244]	@ (8005004 <HAL_RCC_OscConfig+0x26c>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	695b      	ldr	r3, [r3, #20]
 8004f1a:	00db      	lsls	r3, r3, #3
 8004f1c:	4939      	ldr	r1, [pc, #228]	@ (8005004 <HAL_RCC_OscConfig+0x26c>)
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f22:	e03a      	b.n	8004f9a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	691b      	ldr	r3, [r3, #16]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d020      	beq.n	8004f6e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f2c:	4b36      	ldr	r3, [pc, #216]	@ (8005008 <HAL_RCC_OscConfig+0x270>)
 8004f2e:	2201      	movs	r2, #1
 8004f30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f32:	f7fd fde9 	bl	8002b08 <HAL_GetTick>
 8004f36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f38:	e008      	b.n	8004f4c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f3a:	f7fd fde5 	bl	8002b08 <HAL_GetTick>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	1ad3      	subs	r3, r2, r3
 8004f44:	2b02      	cmp	r3, #2
 8004f46:	d901      	bls.n	8004f4c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004f48:	2303      	movs	r3, #3
 8004f4a:	e1a1      	b.n	8005290 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f4c:	4b2d      	ldr	r3, [pc, #180]	@ (8005004 <HAL_RCC_OscConfig+0x26c>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 0302 	and.w	r3, r3, #2
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d0f0      	beq.n	8004f3a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f58:	4b2a      	ldr	r3, [pc, #168]	@ (8005004 <HAL_RCC_OscConfig+0x26c>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	695b      	ldr	r3, [r3, #20]
 8004f64:	00db      	lsls	r3, r3, #3
 8004f66:	4927      	ldr	r1, [pc, #156]	@ (8005004 <HAL_RCC_OscConfig+0x26c>)
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	600b      	str	r3, [r1, #0]
 8004f6c:	e015      	b.n	8004f9a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f6e:	4b26      	ldr	r3, [pc, #152]	@ (8005008 <HAL_RCC_OscConfig+0x270>)
 8004f70:	2200      	movs	r2, #0
 8004f72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f74:	f7fd fdc8 	bl	8002b08 <HAL_GetTick>
 8004f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f7a:	e008      	b.n	8004f8e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f7c:	f7fd fdc4 	bl	8002b08 <HAL_GetTick>
 8004f80:	4602      	mov	r2, r0
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	2b02      	cmp	r3, #2
 8004f88:	d901      	bls.n	8004f8e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	e180      	b.n	8005290 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f8e:	4b1d      	ldr	r3, [pc, #116]	@ (8005004 <HAL_RCC_OscConfig+0x26c>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 0302 	and.w	r3, r3, #2
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d1f0      	bne.n	8004f7c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 0308 	and.w	r3, r3, #8
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d03a      	beq.n	800501c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	699b      	ldr	r3, [r3, #24]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d019      	beq.n	8004fe2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fae:	4b17      	ldr	r3, [pc, #92]	@ (800500c <HAL_RCC_OscConfig+0x274>)
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fb4:	f7fd fda8 	bl	8002b08 <HAL_GetTick>
 8004fb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fba:	e008      	b.n	8004fce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fbc:	f7fd fda4 	bl	8002b08 <HAL_GetTick>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	2b02      	cmp	r3, #2
 8004fc8:	d901      	bls.n	8004fce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004fca:	2303      	movs	r3, #3
 8004fcc:	e160      	b.n	8005290 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fce:	4b0d      	ldr	r3, [pc, #52]	@ (8005004 <HAL_RCC_OscConfig+0x26c>)
 8004fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fd2:	f003 0302 	and.w	r3, r3, #2
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d0f0      	beq.n	8004fbc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004fda:	2001      	movs	r0, #1
 8004fdc:	f000 face 	bl	800557c <RCC_Delay>
 8004fe0:	e01c      	b.n	800501c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fe2:	4b0a      	ldr	r3, [pc, #40]	@ (800500c <HAL_RCC_OscConfig+0x274>)
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fe8:	f7fd fd8e 	bl	8002b08 <HAL_GetTick>
 8004fec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fee:	e00f      	b.n	8005010 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ff0:	f7fd fd8a 	bl	8002b08 <HAL_GetTick>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	1ad3      	subs	r3, r2, r3
 8004ffa:	2b02      	cmp	r3, #2
 8004ffc:	d908      	bls.n	8005010 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	e146      	b.n	8005290 <HAL_RCC_OscConfig+0x4f8>
 8005002:	bf00      	nop
 8005004:	40021000 	.word	0x40021000
 8005008:	42420000 	.word	0x42420000
 800500c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005010:	4b92      	ldr	r3, [pc, #584]	@ (800525c <HAL_RCC_OscConfig+0x4c4>)
 8005012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005014:	f003 0302 	and.w	r3, r3, #2
 8005018:	2b00      	cmp	r3, #0
 800501a:	d1e9      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 0304 	and.w	r3, r3, #4
 8005024:	2b00      	cmp	r3, #0
 8005026:	f000 80a6 	beq.w	8005176 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800502a:	2300      	movs	r3, #0
 800502c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800502e:	4b8b      	ldr	r3, [pc, #556]	@ (800525c <HAL_RCC_OscConfig+0x4c4>)
 8005030:	69db      	ldr	r3, [r3, #28]
 8005032:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005036:	2b00      	cmp	r3, #0
 8005038:	d10d      	bne.n	8005056 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800503a:	4b88      	ldr	r3, [pc, #544]	@ (800525c <HAL_RCC_OscConfig+0x4c4>)
 800503c:	69db      	ldr	r3, [r3, #28]
 800503e:	4a87      	ldr	r2, [pc, #540]	@ (800525c <HAL_RCC_OscConfig+0x4c4>)
 8005040:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005044:	61d3      	str	r3, [r2, #28]
 8005046:	4b85      	ldr	r3, [pc, #532]	@ (800525c <HAL_RCC_OscConfig+0x4c4>)
 8005048:	69db      	ldr	r3, [r3, #28]
 800504a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800504e:	60bb      	str	r3, [r7, #8]
 8005050:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005052:	2301      	movs	r3, #1
 8005054:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005056:	4b82      	ldr	r3, [pc, #520]	@ (8005260 <HAL_RCC_OscConfig+0x4c8>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800505e:	2b00      	cmp	r3, #0
 8005060:	d118      	bne.n	8005094 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005062:	4b7f      	ldr	r3, [pc, #508]	@ (8005260 <HAL_RCC_OscConfig+0x4c8>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a7e      	ldr	r2, [pc, #504]	@ (8005260 <HAL_RCC_OscConfig+0x4c8>)
 8005068:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800506c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800506e:	f7fd fd4b 	bl	8002b08 <HAL_GetTick>
 8005072:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005074:	e008      	b.n	8005088 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005076:	f7fd fd47 	bl	8002b08 <HAL_GetTick>
 800507a:	4602      	mov	r2, r0
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	1ad3      	subs	r3, r2, r3
 8005080:	2b64      	cmp	r3, #100	@ 0x64
 8005082:	d901      	bls.n	8005088 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005084:	2303      	movs	r3, #3
 8005086:	e103      	b.n	8005290 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005088:	4b75      	ldr	r3, [pc, #468]	@ (8005260 <HAL_RCC_OscConfig+0x4c8>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005090:	2b00      	cmp	r3, #0
 8005092:	d0f0      	beq.n	8005076 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	2b01      	cmp	r3, #1
 800509a:	d106      	bne.n	80050aa <HAL_RCC_OscConfig+0x312>
 800509c:	4b6f      	ldr	r3, [pc, #444]	@ (800525c <HAL_RCC_OscConfig+0x4c4>)
 800509e:	6a1b      	ldr	r3, [r3, #32]
 80050a0:	4a6e      	ldr	r2, [pc, #440]	@ (800525c <HAL_RCC_OscConfig+0x4c4>)
 80050a2:	f043 0301 	orr.w	r3, r3, #1
 80050a6:	6213      	str	r3, [r2, #32]
 80050a8:	e02d      	b.n	8005106 <HAL_RCC_OscConfig+0x36e>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d10c      	bne.n	80050cc <HAL_RCC_OscConfig+0x334>
 80050b2:	4b6a      	ldr	r3, [pc, #424]	@ (800525c <HAL_RCC_OscConfig+0x4c4>)
 80050b4:	6a1b      	ldr	r3, [r3, #32]
 80050b6:	4a69      	ldr	r2, [pc, #420]	@ (800525c <HAL_RCC_OscConfig+0x4c4>)
 80050b8:	f023 0301 	bic.w	r3, r3, #1
 80050bc:	6213      	str	r3, [r2, #32]
 80050be:	4b67      	ldr	r3, [pc, #412]	@ (800525c <HAL_RCC_OscConfig+0x4c4>)
 80050c0:	6a1b      	ldr	r3, [r3, #32]
 80050c2:	4a66      	ldr	r2, [pc, #408]	@ (800525c <HAL_RCC_OscConfig+0x4c4>)
 80050c4:	f023 0304 	bic.w	r3, r3, #4
 80050c8:	6213      	str	r3, [r2, #32]
 80050ca:	e01c      	b.n	8005106 <HAL_RCC_OscConfig+0x36e>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	2b05      	cmp	r3, #5
 80050d2:	d10c      	bne.n	80050ee <HAL_RCC_OscConfig+0x356>
 80050d4:	4b61      	ldr	r3, [pc, #388]	@ (800525c <HAL_RCC_OscConfig+0x4c4>)
 80050d6:	6a1b      	ldr	r3, [r3, #32]
 80050d8:	4a60      	ldr	r2, [pc, #384]	@ (800525c <HAL_RCC_OscConfig+0x4c4>)
 80050da:	f043 0304 	orr.w	r3, r3, #4
 80050de:	6213      	str	r3, [r2, #32]
 80050e0:	4b5e      	ldr	r3, [pc, #376]	@ (800525c <HAL_RCC_OscConfig+0x4c4>)
 80050e2:	6a1b      	ldr	r3, [r3, #32]
 80050e4:	4a5d      	ldr	r2, [pc, #372]	@ (800525c <HAL_RCC_OscConfig+0x4c4>)
 80050e6:	f043 0301 	orr.w	r3, r3, #1
 80050ea:	6213      	str	r3, [r2, #32]
 80050ec:	e00b      	b.n	8005106 <HAL_RCC_OscConfig+0x36e>
 80050ee:	4b5b      	ldr	r3, [pc, #364]	@ (800525c <HAL_RCC_OscConfig+0x4c4>)
 80050f0:	6a1b      	ldr	r3, [r3, #32]
 80050f2:	4a5a      	ldr	r2, [pc, #360]	@ (800525c <HAL_RCC_OscConfig+0x4c4>)
 80050f4:	f023 0301 	bic.w	r3, r3, #1
 80050f8:	6213      	str	r3, [r2, #32]
 80050fa:	4b58      	ldr	r3, [pc, #352]	@ (800525c <HAL_RCC_OscConfig+0x4c4>)
 80050fc:	6a1b      	ldr	r3, [r3, #32]
 80050fe:	4a57      	ldr	r2, [pc, #348]	@ (800525c <HAL_RCC_OscConfig+0x4c4>)
 8005100:	f023 0304 	bic.w	r3, r3, #4
 8005104:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d015      	beq.n	800513a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800510e:	f7fd fcfb 	bl	8002b08 <HAL_GetTick>
 8005112:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005114:	e00a      	b.n	800512c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005116:	f7fd fcf7 	bl	8002b08 <HAL_GetTick>
 800511a:	4602      	mov	r2, r0
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	1ad3      	subs	r3, r2, r3
 8005120:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005124:	4293      	cmp	r3, r2
 8005126:	d901      	bls.n	800512c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005128:	2303      	movs	r3, #3
 800512a:	e0b1      	b.n	8005290 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800512c:	4b4b      	ldr	r3, [pc, #300]	@ (800525c <HAL_RCC_OscConfig+0x4c4>)
 800512e:	6a1b      	ldr	r3, [r3, #32]
 8005130:	f003 0302 	and.w	r3, r3, #2
 8005134:	2b00      	cmp	r3, #0
 8005136:	d0ee      	beq.n	8005116 <HAL_RCC_OscConfig+0x37e>
 8005138:	e014      	b.n	8005164 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800513a:	f7fd fce5 	bl	8002b08 <HAL_GetTick>
 800513e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005140:	e00a      	b.n	8005158 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005142:	f7fd fce1 	bl	8002b08 <HAL_GetTick>
 8005146:	4602      	mov	r2, r0
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	1ad3      	subs	r3, r2, r3
 800514c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005150:	4293      	cmp	r3, r2
 8005152:	d901      	bls.n	8005158 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005154:	2303      	movs	r3, #3
 8005156:	e09b      	b.n	8005290 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005158:	4b40      	ldr	r3, [pc, #256]	@ (800525c <HAL_RCC_OscConfig+0x4c4>)
 800515a:	6a1b      	ldr	r3, [r3, #32]
 800515c:	f003 0302 	and.w	r3, r3, #2
 8005160:	2b00      	cmp	r3, #0
 8005162:	d1ee      	bne.n	8005142 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005164:	7dfb      	ldrb	r3, [r7, #23]
 8005166:	2b01      	cmp	r3, #1
 8005168:	d105      	bne.n	8005176 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800516a:	4b3c      	ldr	r3, [pc, #240]	@ (800525c <HAL_RCC_OscConfig+0x4c4>)
 800516c:	69db      	ldr	r3, [r3, #28]
 800516e:	4a3b      	ldr	r2, [pc, #236]	@ (800525c <HAL_RCC_OscConfig+0x4c4>)
 8005170:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005174:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	69db      	ldr	r3, [r3, #28]
 800517a:	2b00      	cmp	r3, #0
 800517c:	f000 8087 	beq.w	800528e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005180:	4b36      	ldr	r3, [pc, #216]	@ (800525c <HAL_RCC_OscConfig+0x4c4>)
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	f003 030c 	and.w	r3, r3, #12
 8005188:	2b08      	cmp	r3, #8
 800518a:	d061      	beq.n	8005250 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	69db      	ldr	r3, [r3, #28]
 8005190:	2b02      	cmp	r3, #2
 8005192:	d146      	bne.n	8005222 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005194:	4b33      	ldr	r3, [pc, #204]	@ (8005264 <HAL_RCC_OscConfig+0x4cc>)
 8005196:	2200      	movs	r2, #0
 8005198:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800519a:	f7fd fcb5 	bl	8002b08 <HAL_GetTick>
 800519e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051a0:	e008      	b.n	80051b4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051a2:	f7fd fcb1 	bl	8002b08 <HAL_GetTick>
 80051a6:	4602      	mov	r2, r0
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	1ad3      	subs	r3, r2, r3
 80051ac:	2b02      	cmp	r3, #2
 80051ae:	d901      	bls.n	80051b4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80051b0:	2303      	movs	r3, #3
 80051b2:	e06d      	b.n	8005290 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051b4:	4b29      	ldr	r3, [pc, #164]	@ (800525c <HAL_RCC_OscConfig+0x4c4>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d1f0      	bne.n	80051a2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6a1b      	ldr	r3, [r3, #32]
 80051c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051c8:	d108      	bne.n	80051dc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80051ca:	4b24      	ldr	r3, [pc, #144]	@ (800525c <HAL_RCC_OscConfig+0x4c4>)
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	4921      	ldr	r1, [pc, #132]	@ (800525c <HAL_RCC_OscConfig+0x4c4>)
 80051d8:	4313      	orrs	r3, r2
 80051da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051dc:	4b1f      	ldr	r3, [pc, #124]	@ (800525c <HAL_RCC_OscConfig+0x4c4>)
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6a19      	ldr	r1, [r3, #32]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ec:	430b      	orrs	r3, r1
 80051ee:	491b      	ldr	r1, [pc, #108]	@ (800525c <HAL_RCC_OscConfig+0x4c4>)
 80051f0:	4313      	orrs	r3, r2
 80051f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051f4:	4b1b      	ldr	r3, [pc, #108]	@ (8005264 <HAL_RCC_OscConfig+0x4cc>)
 80051f6:	2201      	movs	r2, #1
 80051f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051fa:	f7fd fc85 	bl	8002b08 <HAL_GetTick>
 80051fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005200:	e008      	b.n	8005214 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005202:	f7fd fc81 	bl	8002b08 <HAL_GetTick>
 8005206:	4602      	mov	r2, r0
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	1ad3      	subs	r3, r2, r3
 800520c:	2b02      	cmp	r3, #2
 800520e:	d901      	bls.n	8005214 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005210:	2303      	movs	r3, #3
 8005212:	e03d      	b.n	8005290 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005214:	4b11      	ldr	r3, [pc, #68]	@ (800525c <HAL_RCC_OscConfig+0x4c4>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800521c:	2b00      	cmp	r3, #0
 800521e:	d0f0      	beq.n	8005202 <HAL_RCC_OscConfig+0x46a>
 8005220:	e035      	b.n	800528e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005222:	4b10      	ldr	r3, [pc, #64]	@ (8005264 <HAL_RCC_OscConfig+0x4cc>)
 8005224:	2200      	movs	r2, #0
 8005226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005228:	f7fd fc6e 	bl	8002b08 <HAL_GetTick>
 800522c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800522e:	e008      	b.n	8005242 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005230:	f7fd fc6a 	bl	8002b08 <HAL_GetTick>
 8005234:	4602      	mov	r2, r0
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	2b02      	cmp	r3, #2
 800523c:	d901      	bls.n	8005242 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	e026      	b.n	8005290 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005242:	4b06      	ldr	r3, [pc, #24]	@ (800525c <HAL_RCC_OscConfig+0x4c4>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800524a:	2b00      	cmp	r3, #0
 800524c:	d1f0      	bne.n	8005230 <HAL_RCC_OscConfig+0x498>
 800524e:	e01e      	b.n	800528e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	69db      	ldr	r3, [r3, #28]
 8005254:	2b01      	cmp	r3, #1
 8005256:	d107      	bne.n	8005268 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	e019      	b.n	8005290 <HAL_RCC_OscConfig+0x4f8>
 800525c:	40021000 	.word	0x40021000
 8005260:	40007000 	.word	0x40007000
 8005264:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005268:	4b0b      	ldr	r3, [pc, #44]	@ (8005298 <HAL_RCC_OscConfig+0x500>)
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6a1b      	ldr	r3, [r3, #32]
 8005278:	429a      	cmp	r2, r3
 800527a:	d106      	bne.n	800528a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005286:	429a      	cmp	r2, r3
 8005288:	d001      	beq.n	800528e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e000      	b.n	8005290 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800528e:	2300      	movs	r3, #0
}
 8005290:	4618      	mov	r0, r3
 8005292:	3718      	adds	r7, #24
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}
 8005298:	40021000 	.word	0x40021000

0800529c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d101      	bne.n	80052b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e0d0      	b.n	8005452 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80052b0:	4b6a      	ldr	r3, [pc, #424]	@ (800545c <HAL_RCC_ClockConfig+0x1c0>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 0307 	and.w	r3, r3, #7
 80052b8:	683a      	ldr	r2, [r7, #0]
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d910      	bls.n	80052e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052be:	4b67      	ldr	r3, [pc, #412]	@ (800545c <HAL_RCC_ClockConfig+0x1c0>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f023 0207 	bic.w	r2, r3, #7
 80052c6:	4965      	ldr	r1, [pc, #404]	@ (800545c <HAL_RCC_ClockConfig+0x1c0>)
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ce:	4b63      	ldr	r3, [pc, #396]	@ (800545c <HAL_RCC_ClockConfig+0x1c0>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 0307 	and.w	r3, r3, #7
 80052d6:	683a      	ldr	r2, [r7, #0]
 80052d8:	429a      	cmp	r2, r3
 80052da:	d001      	beq.n	80052e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	e0b8      	b.n	8005452 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 0302 	and.w	r3, r3, #2
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d020      	beq.n	800532e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 0304 	and.w	r3, r3, #4
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d005      	beq.n	8005304 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052f8:	4b59      	ldr	r3, [pc, #356]	@ (8005460 <HAL_RCC_ClockConfig+0x1c4>)
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	4a58      	ldr	r2, [pc, #352]	@ (8005460 <HAL_RCC_ClockConfig+0x1c4>)
 80052fe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005302:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 0308 	and.w	r3, r3, #8
 800530c:	2b00      	cmp	r3, #0
 800530e:	d005      	beq.n	800531c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005310:	4b53      	ldr	r3, [pc, #332]	@ (8005460 <HAL_RCC_ClockConfig+0x1c4>)
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	4a52      	ldr	r2, [pc, #328]	@ (8005460 <HAL_RCC_ClockConfig+0x1c4>)
 8005316:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800531a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800531c:	4b50      	ldr	r3, [pc, #320]	@ (8005460 <HAL_RCC_ClockConfig+0x1c4>)
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	494d      	ldr	r1, [pc, #308]	@ (8005460 <HAL_RCC_ClockConfig+0x1c4>)
 800532a:	4313      	orrs	r3, r2
 800532c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 0301 	and.w	r3, r3, #1
 8005336:	2b00      	cmp	r3, #0
 8005338:	d040      	beq.n	80053bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	2b01      	cmp	r3, #1
 8005340:	d107      	bne.n	8005352 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005342:	4b47      	ldr	r3, [pc, #284]	@ (8005460 <HAL_RCC_ClockConfig+0x1c4>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800534a:	2b00      	cmp	r3, #0
 800534c:	d115      	bne.n	800537a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e07f      	b.n	8005452 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	2b02      	cmp	r3, #2
 8005358:	d107      	bne.n	800536a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800535a:	4b41      	ldr	r3, [pc, #260]	@ (8005460 <HAL_RCC_ClockConfig+0x1c4>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005362:	2b00      	cmp	r3, #0
 8005364:	d109      	bne.n	800537a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e073      	b.n	8005452 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800536a:	4b3d      	ldr	r3, [pc, #244]	@ (8005460 <HAL_RCC_ClockConfig+0x1c4>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 0302 	and.w	r3, r3, #2
 8005372:	2b00      	cmp	r3, #0
 8005374:	d101      	bne.n	800537a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e06b      	b.n	8005452 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800537a:	4b39      	ldr	r3, [pc, #228]	@ (8005460 <HAL_RCC_ClockConfig+0x1c4>)
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	f023 0203 	bic.w	r2, r3, #3
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	4936      	ldr	r1, [pc, #216]	@ (8005460 <HAL_RCC_ClockConfig+0x1c4>)
 8005388:	4313      	orrs	r3, r2
 800538a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800538c:	f7fd fbbc 	bl	8002b08 <HAL_GetTick>
 8005390:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005392:	e00a      	b.n	80053aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005394:	f7fd fbb8 	bl	8002b08 <HAL_GetTick>
 8005398:	4602      	mov	r2, r0
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	1ad3      	subs	r3, r2, r3
 800539e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d901      	bls.n	80053aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80053a6:	2303      	movs	r3, #3
 80053a8:	e053      	b.n	8005452 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053aa:	4b2d      	ldr	r3, [pc, #180]	@ (8005460 <HAL_RCC_ClockConfig+0x1c4>)
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	f003 020c 	and.w	r2, r3, #12
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d1eb      	bne.n	8005394 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80053bc:	4b27      	ldr	r3, [pc, #156]	@ (800545c <HAL_RCC_ClockConfig+0x1c0>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0307 	and.w	r3, r3, #7
 80053c4:	683a      	ldr	r2, [r7, #0]
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d210      	bcs.n	80053ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053ca:	4b24      	ldr	r3, [pc, #144]	@ (800545c <HAL_RCC_ClockConfig+0x1c0>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f023 0207 	bic.w	r2, r3, #7
 80053d2:	4922      	ldr	r1, [pc, #136]	@ (800545c <HAL_RCC_ClockConfig+0x1c0>)
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053da:	4b20      	ldr	r3, [pc, #128]	@ (800545c <HAL_RCC_ClockConfig+0x1c0>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 0307 	and.w	r3, r3, #7
 80053e2:	683a      	ldr	r2, [r7, #0]
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d001      	beq.n	80053ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	e032      	b.n	8005452 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 0304 	and.w	r3, r3, #4
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d008      	beq.n	800540a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053f8:	4b19      	ldr	r3, [pc, #100]	@ (8005460 <HAL_RCC_ClockConfig+0x1c4>)
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	4916      	ldr	r1, [pc, #88]	@ (8005460 <HAL_RCC_ClockConfig+0x1c4>)
 8005406:	4313      	orrs	r3, r2
 8005408:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 0308 	and.w	r3, r3, #8
 8005412:	2b00      	cmp	r3, #0
 8005414:	d009      	beq.n	800542a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005416:	4b12      	ldr	r3, [pc, #72]	@ (8005460 <HAL_RCC_ClockConfig+0x1c4>)
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	00db      	lsls	r3, r3, #3
 8005424:	490e      	ldr	r1, [pc, #56]	@ (8005460 <HAL_RCC_ClockConfig+0x1c4>)
 8005426:	4313      	orrs	r3, r2
 8005428:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800542a:	f000 f821 	bl	8005470 <HAL_RCC_GetSysClockFreq>
 800542e:	4602      	mov	r2, r0
 8005430:	4b0b      	ldr	r3, [pc, #44]	@ (8005460 <HAL_RCC_ClockConfig+0x1c4>)
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	091b      	lsrs	r3, r3, #4
 8005436:	f003 030f 	and.w	r3, r3, #15
 800543a:	490a      	ldr	r1, [pc, #40]	@ (8005464 <HAL_RCC_ClockConfig+0x1c8>)
 800543c:	5ccb      	ldrb	r3, [r1, r3]
 800543e:	fa22 f303 	lsr.w	r3, r2, r3
 8005442:	4a09      	ldr	r2, [pc, #36]	@ (8005468 <HAL_RCC_ClockConfig+0x1cc>)
 8005444:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005446:	4b09      	ldr	r3, [pc, #36]	@ (800546c <HAL_RCC_ClockConfig+0x1d0>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4618      	mov	r0, r3
 800544c:	f7fd fb1a 	bl	8002a84 <HAL_InitTick>

  return HAL_OK;
 8005450:	2300      	movs	r3, #0
}
 8005452:	4618      	mov	r0, r3
 8005454:	3710      	adds	r7, #16
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
 800545a:	bf00      	nop
 800545c:	40022000 	.word	0x40022000
 8005460:	40021000 	.word	0x40021000
 8005464:	0800a0c8 	.word	0x0800a0c8
 8005468:	20000018 	.word	0x20000018
 800546c:	2000001c 	.word	0x2000001c

08005470 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005470:	b480      	push	{r7}
 8005472:	b087      	sub	sp, #28
 8005474:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005476:	2300      	movs	r3, #0
 8005478:	60fb      	str	r3, [r7, #12]
 800547a:	2300      	movs	r3, #0
 800547c:	60bb      	str	r3, [r7, #8]
 800547e:	2300      	movs	r3, #0
 8005480:	617b      	str	r3, [r7, #20]
 8005482:	2300      	movs	r3, #0
 8005484:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005486:	2300      	movs	r3, #0
 8005488:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800548a:	4b1e      	ldr	r3, [pc, #120]	@ (8005504 <HAL_RCC_GetSysClockFreq+0x94>)
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f003 030c 	and.w	r3, r3, #12
 8005496:	2b04      	cmp	r3, #4
 8005498:	d002      	beq.n	80054a0 <HAL_RCC_GetSysClockFreq+0x30>
 800549a:	2b08      	cmp	r3, #8
 800549c:	d003      	beq.n	80054a6 <HAL_RCC_GetSysClockFreq+0x36>
 800549e:	e027      	b.n	80054f0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80054a0:	4b19      	ldr	r3, [pc, #100]	@ (8005508 <HAL_RCC_GetSysClockFreq+0x98>)
 80054a2:	613b      	str	r3, [r7, #16]
      break;
 80054a4:	e027      	b.n	80054f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	0c9b      	lsrs	r3, r3, #18
 80054aa:	f003 030f 	and.w	r3, r3, #15
 80054ae:	4a17      	ldr	r2, [pc, #92]	@ (800550c <HAL_RCC_GetSysClockFreq+0x9c>)
 80054b0:	5cd3      	ldrb	r3, [r2, r3]
 80054b2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d010      	beq.n	80054e0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80054be:	4b11      	ldr	r3, [pc, #68]	@ (8005504 <HAL_RCC_GetSysClockFreq+0x94>)
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	0c5b      	lsrs	r3, r3, #17
 80054c4:	f003 0301 	and.w	r3, r3, #1
 80054c8:	4a11      	ldr	r2, [pc, #68]	@ (8005510 <HAL_RCC_GetSysClockFreq+0xa0>)
 80054ca:	5cd3      	ldrb	r3, [r2, r3]
 80054cc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a0d      	ldr	r2, [pc, #52]	@ (8005508 <HAL_RCC_GetSysClockFreq+0x98>)
 80054d2:	fb03 f202 	mul.w	r2, r3, r2
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80054dc:	617b      	str	r3, [r7, #20]
 80054de:	e004      	b.n	80054ea <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4a0c      	ldr	r2, [pc, #48]	@ (8005514 <HAL_RCC_GetSysClockFreq+0xa4>)
 80054e4:	fb02 f303 	mul.w	r3, r2, r3
 80054e8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	613b      	str	r3, [r7, #16]
      break;
 80054ee:	e002      	b.n	80054f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80054f0:	4b05      	ldr	r3, [pc, #20]	@ (8005508 <HAL_RCC_GetSysClockFreq+0x98>)
 80054f2:	613b      	str	r3, [r7, #16]
      break;
 80054f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054f6:	693b      	ldr	r3, [r7, #16]
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	371c      	adds	r7, #28
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bc80      	pop	{r7}
 8005500:	4770      	bx	lr
 8005502:	bf00      	nop
 8005504:	40021000 	.word	0x40021000
 8005508:	007a1200 	.word	0x007a1200
 800550c:	0800a0e0 	.word	0x0800a0e0
 8005510:	0800a0f0 	.word	0x0800a0f0
 8005514:	003d0900 	.word	0x003d0900

08005518 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005518:	b480      	push	{r7}
 800551a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800551c:	4b02      	ldr	r3, [pc, #8]	@ (8005528 <HAL_RCC_GetHCLKFreq+0x10>)
 800551e:	681b      	ldr	r3, [r3, #0]
}
 8005520:	4618      	mov	r0, r3
 8005522:	46bd      	mov	sp, r7
 8005524:	bc80      	pop	{r7}
 8005526:	4770      	bx	lr
 8005528:	20000018 	.word	0x20000018

0800552c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005530:	f7ff fff2 	bl	8005518 <HAL_RCC_GetHCLKFreq>
 8005534:	4602      	mov	r2, r0
 8005536:	4b05      	ldr	r3, [pc, #20]	@ (800554c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	0a1b      	lsrs	r3, r3, #8
 800553c:	f003 0307 	and.w	r3, r3, #7
 8005540:	4903      	ldr	r1, [pc, #12]	@ (8005550 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005542:	5ccb      	ldrb	r3, [r1, r3]
 8005544:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005548:	4618      	mov	r0, r3
 800554a:	bd80      	pop	{r7, pc}
 800554c:	40021000 	.word	0x40021000
 8005550:	0800a0d8 	.word	0x0800a0d8

08005554 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005558:	f7ff ffde 	bl	8005518 <HAL_RCC_GetHCLKFreq>
 800555c:	4602      	mov	r2, r0
 800555e:	4b05      	ldr	r3, [pc, #20]	@ (8005574 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	0adb      	lsrs	r3, r3, #11
 8005564:	f003 0307 	and.w	r3, r3, #7
 8005568:	4903      	ldr	r1, [pc, #12]	@ (8005578 <HAL_RCC_GetPCLK2Freq+0x24>)
 800556a:	5ccb      	ldrb	r3, [r1, r3]
 800556c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005570:	4618      	mov	r0, r3
 8005572:	bd80      	pop	{r7, pc}
 8005574:	40021000 	.word	0x40021000
 8005578:	0800a0d8 	.word	0x0800a0d8

0800557c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800557c:	b480      	push	{r7}
 800557e:	b085      	sub	sp, #20
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005584:	4b0a      	ldr	r3, [pc, #40]	@ (80055b0 <RCC_Delay+0x34>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a0a      	ldr	r2, [pc, #40]	@ (80055b4 <RCC_Delay+0x38>)
 800558a:	fba2 2303 	umull	r2, r3, r2, r3
 800558e:	0a5b      	lsrs	r3, r3, #9
 8005590:	687a      	ldr	r2, [r7, #4]
 8005592:	fb02 f303 	mul.w	r3, r2, r3
 8005596:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005598:	bf00      	nop
  }
  while (Delay --);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	1e5a      	subs	r2, r3, #1
 800559e:	60fa      	str	r2, [r7, #12]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d1f9      	bne.n	8005598 <RCC_Delay+0x1c>
}
 80055a4:	bf00      	nop
 80055a6:	bf00      	nop
 80055a8:	3714      	adds	r7, #20
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bc80      	pop	{r7}
 80055ae:	4770      	bx	lr
 80055b0:	20000018 	.word	0x20000018
 80055b4:	10624dd3 	.word	0x10624dd3

080055b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b086      	sub	sp, #24
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80055c0:	2300      	movs	r3, #0
 80055c2:	613b      	str	r3, [r7, #16]
 80055c4:	2300      	movs	r3, #0
 80055c6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f003 0301 	and.w	r3, r3, #1
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d07d      	beq.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80055d4:	2300      	movs	r3, #0
 80055d6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055d8:	4b4f      	ldr	r3, [pc, #316]	@ (8005718 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055da:	69db      	ldr	r3, [r3, #28]
 80055dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d10d      	bne.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055e4:	4b4c      	ldr	r3, [pc, #304]	@ (8005718 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055e6:	69db      	ldr	r3, [r3, #28]
 80055e8:	4a4b      	ldr	r2, [pc, #300]	@ (8005718 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055ee:	61d3      	str	r3, [r2, #28]
 80055f0:	4b49      	ldr	r3, [pc, #292]	@ (8005718 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055f2:	69db      	ldr	r3, [r3, #28]
 80055f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055f8:	60bb      	str	r3, [r7, #8]
 80055fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055fc:	2301      	movs	r3, #1
 80055fe:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005600:	4b46      	ldr	r3, [pc, #280]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005608:	2b00      	cmp	r3, #0
 800560a:	d118      	bne.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800560c:	4b43      	ldr	r3, [pc, #268]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a42      	ldr	r2, [pc, #264]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005612:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005616:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005618:	f7fd fa76 	bl	8002b08 <HAL_GetTick>
 800561c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800561e:	e008      	b.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005620:	f7fd fa72 	bl	8002b08 <HAL_GetTick>
 8005624:	4602      	mov	r2, r0
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	1ad3      	subs	r3, r2, r3
 800562a:	2b64      	cmp	r3, #100	@ 0x64
 800562c:	d901      	bls.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800562e:	2303      	movs	r3, #3
 8005630:	e06d      	b.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005632:	4b3a      	ldr	r3, [pc, #232]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800563a:	2b00      	cmp	r3, #0
 800563c:	d0f0      	beq.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800563e:	4b36      	ldr	r3, [pc, #216]	@ (8005718 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005640:	6a1b      	ldr	r3, [r3, #32]
 8005642:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005646:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d02e      	beq.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005656:	68fa      	ldr	r2, [r7, #12]
 8005658:	429a      	cmp	r2, r3
 800565a:	d027      	beq.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800565c:	4b2e      	ldr	r3, [pc, #184]	@ (8005718 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800565e:	6a1b      	ldr	r3, [r3, #32]
 8005660:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005664:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005666:	4b2e      	ldr	r3, [pc, #184]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005668:	2201      	movs	r2, #1
 800566a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800566c:	4b2c      	ldr	r3, [pc, #176]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800566e:	2200      	movs	r2, #0
 8005670:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005672:	4a29      	ldr	r2, [pc, #164]	@ (8005718 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f003 0301 	and.w	r3, r3, #1
 800567e:	2b00      	cmp	r3, #0
 8005680:	d014      	beq.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005682:	f7fd fa41 	bl	8002b08 <HAL_GetTick>
 8005686:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005688:	e00a      	b.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800568a:	f7fd fa3d 	bl	8002b08 <HAL_GetTick>
 800568e:	4602      	mov	r2, r0
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	1ad3      	subs	r3, r2, r3
 8005694:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005698:	4293      	cmp	r3, r2
 800569a:	d901      	bls.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800569c:	2303      	movs	r3, #3
 800569e:	e036      	b.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056a0:	4b1d      	ldr	r3, [pc, #116]	@ (8005718 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056a2:	6a1b      	ldr	r3, [r3, #32]
 80056a4:	f003 0302 	and.w	r3, r3, #2
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d0ee      	beq.n	800568a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056ac:	4b1a      	ldr	r3, [pc, #104]	@ (8005718 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056ae:	6a1b      	ldr	r3, [r3, #32]
 80056b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	4917      	ldr	r1, [pc, #92]	@ (8005718 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056ba:	4313      	orrs	r3, r2
 80056bc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80056be:	7dfb      	ldrb	r3, [r7, #23]
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d105      	bne.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056c4:	4b14      	ldr	r3, [pc, #80]	@ (8005718 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056c6:	69db      	ldr	r3, [r3, #28]
 80056c8:	4a13      	ldr	r2, [pc, #76]	@ (8005718 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80056ce:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 0302 	and.w	r3, r3, #2
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d008      	beq.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80056dc:	4b0e      	ldr	r3, [pc, #56]	@ (8005718 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	490b      	ldr	r1, [pc, #44]	@ (8005718 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056ea:	4313      	orrs	r3, r2
 80056ec:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f003 0310 	and.w	r3, r3, #16
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d008      	beq.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80056fa:	4b07      	ldr	r3, [pc, #28]	@ (8005718 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	4904      	ldr	r1, [pc, #16]	@ (8005718 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005708:	4313      	orrs	r3, r2
 800570a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800570c:	2300      	movs	r3, #0
}
 800570e:	4618      	mov	r0, r3
 8005710:	3718      	adds	r7, #24
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
 8005716:	bf00      	nop
 8005718:	40021000 	.word	0x40021000
 800571c:	40007000 	.word	0x40007000
 8005720:	42420440 	.word	0x42420440

08005724 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b088      	sub	sp, #32
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800572c:	2300      	movs	r3, #0
 800572e:	617b      	str	r3, [r7, #20]
 8005730:	2300      	movs	r3, #0
 8005732:	61fb      	str	r3, [r7, #28]
 8005734:	2300      	movs	r3, #0
 8005736:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005738:	2300      	movs	r3, #0
 800573a:	60fb      	str	r3, [r7, #12]
 800573c:	2300      	movs	r3, #0
 800573e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2b10      	cmp	r3, #16
 8005744:	d00a      	beq.n	800575c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2b10      	cmp	r3, #16
 800574a:	f200 808a 	bhi.w	8005862 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2b01      	cmp	r3, #1
 8005752:	d045      	beq.n	80057e0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2b02      	cmp	r3, #2
 8005758:	d075      	beq.n	8005846 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800575a:	e082      	b.n	8005862 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 800575c:	4b46      	ldr	r3, [pc, #280]	@ (8005878 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8005762:	4b45      	ldr	r3, [pc, #276]	@ (8005878 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800576a:	2b00      	cmp	r3, #0
 800576c:	d07b      	beq.n	8005866 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	0c9b      	lsrs	r3, r3, #18
 8005772:	f003 030f 	and.w	r3, r3, #15
 8005776:	4a41      	ldr	r2, [pc, #260]	@ (800587c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8005778:	5cd3      	ldrb	r3, [r2, r3]
 800577a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005782:	2b00      	cmp	r3, #0
 8005784:	d015      	beq.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005786:	4b3c      	ldr	r3, [pc, #240]	@ (8005878 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	0c5b      	lsrs	r3, r3, #17
 800578c:	f003 0301 	and.w	r3, r3, #1
 8005790:	4a3b      	ldr	r2, [pc, #236]	@ (8005880 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8005792:	5cd3      	ldrb	r3, [r2, r3]
 8005794:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800579c:	2b00      	cmp	r3, #0
 800579e:	d00d      	beq.n	80057bc <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80057a0:	4a38      	ldr	r2, [pc, #224]	@ (8005884 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	fb02 f303 	mul.w	r3, r2, r3
 80057ae:	61fb      	str	r3, [r7, #28]
 80057b0:	e004      	b.n	80057bc <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	4a34      	ldr	r2, [pc, #208]	@ (8005888 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80057b6:	fb02 f303 	mul.w	r3, r2, r3
 80057ba:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80057bc:	4b2e      	ldr	r3, [pc, #184]	@ (8005878 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80057c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80057c8:	d102      	bne.n	80057d0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80057ca:	69fb      	ldr	r3, [r7, #28]
 80057cc:	61bb      	str	r3, [r7, #24]
      break;
 80057ce:	e04a      	b.n	8005866 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80057d0:	69fb      	ldr	r3, [r7, #28]
 80057d2:	005b      	lsls	r3, r3, #1
 80057d4:	4a2d      	ldr	r2, [pc, #180]	@ (800588c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80057d6:	fba2 2303 	umull	r2, r3, r2, r3
 80057da:	085b      	lsrs	r3, r3, #1
 80057dc:	61bb      	str	r3, [r7, #24]
      break;
 80057de:	e042      	b.n	8005866 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80057e0:	4b25      	ldr	r3, [pc, #148]	@ (8005878 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80057e2:	6a1b      	ldr	r3, [r3, #32]
 80057e4:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057f0:	d108      	bne.n	8005804 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f003 0302 	and.w	r3, r3, #2
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d003      	beq.n	8005804 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80057fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005800:	61bb      	str	r3, [r7, #24]
 8005802:	e01f      	b.n	8005844 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800580a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800580e:	d109      	bne.n	8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8005810:	4b19      	ldr	r3, [pc, #100]	@ (8005878 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005814:	f003 0302 	and.w	r3, r3, #2
 8005818:	2b00      	cmp	r3, #0
 800581a:	d003      	beq.n	8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 800581c:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8005820:	61bb      	str	r3, [r7, #24]
 8005822:	e00f      	b.n	8005844 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800582a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800582e:	d11c      	bne.n	800586a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005830:	4b11      	ldr	r3, [pc, #68]	@ (8005878 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005838:	2b00      	cmp	r3, #0
 800583a:	d016      	beq.n	800586a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 800583c:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8005840:	61bb      	str	r3, [r7, #24]
      break;
 8005842:	e012      	b.n	800586a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005844:	e011      	b.n	800586a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005846:	f7ff fe85 	bl	8005554 <HAL_RCC_GetPCLK2Freq>
 800584a:	4602      	mov	r2, r0
 800584c:	4b0a      	ldr	r3, [pc, #40]	@ (8005878 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	0b9b      	lsrs	r3, r3, #14
 8005852:	f003 0303 	and.w	r3, r3, #3
 8005856:	3301      	adds	r3, #1
 8005858:	005b      	lsls	r3, r3, #1
 800585a:	fbb2 f3f3 	udiv	r3, r2, r3
 800585e:	61bb      	str	r3, [r7, #24]
      break;
 8005860:	e004      	b.n	800586c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005862:	bf00      	nop
 8005864:	e002      	b.n	800586c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005866:	bf00      	nop
 8005868:	e000      	b.n	800586c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800586a:	bf00      	nop
    }
  }
  return (frequency);
 800586c:	69bb      	ldr	r3, [r7, #24]
}
 800586e:	4618      	mov	r0, r3
 8005870:	3720      	adds	r7, #32
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	40021000 	.word	0x40021000
 800587c:	0800a0f4 	.word	0x0800a0f4
 8005880:	0800a104 	.word	0x0800a104
 8005884:	007a1200 	.word	0x007a1200
 8005888:	003d0900 	.word	0x003d0900
 800588c:	aaaaaaab 	.word	0xaaaaaaab

08005890 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b082      	sub	sp, #8
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d101      	bne.n	80058a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	e041      	b.n	8005926 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d106      	bne.n	80058bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2200      	movs	r2, #0
 80058b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f7fc ff3a 	bl	8002730 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2202      	movs	r2, #2
 80058c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	3304      	adds	r3, #4
 80058cc:	4619      	mov	r1, r3
 80058ce:	4610      	mov	r0, r2
 80058d0:	f000 f940 	bl	8005b54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2201      	movs	r2, #1
 80058e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2201      	movs	r2, #1
 8005920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005924:	2300      	movs	r3, #0
}
 8005926:	4618      	mov	r0, r3
 8005928:	3708      	adds	r7, #8
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
	...

08005930 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005930:	b480      	push	{r7}
 8005932:	b085      	sub	sp, #20
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800593e:	b2db      	uxtb	r3, r3
 8005940:	2b01      	cmp	r3, #1
 8005942:	d001      	beq.n	8005948 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	e032      	b.n	80059ae <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2202      	movs	r2, #2
 800594c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a18      	ldr	r2, [pc, #96]	@ (80059b8 <HAL_TIM_Base_Start+0x88>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d00e      	beq.n	8005978 <HAL_TIM_Base_Start+0x48>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005962:	d009      	beq.n	8005978 <HAL_TIM_Base_Start+0x48>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a14      	ldr	r2, [pc, #80]	@ (80059bc <HAL_TIM_Base_Start+0x8c>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d004      	beq.n	8005978 <HAL_TIM_Base_Start+0x48>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a13      	ldr	r2, [pc, #76]	@ (80059c0 <HAL_TIM_Base_Start+0x90>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d111      	bne.n	800599c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	f003 0307 	and.w	r3, r3, #7
 8005982:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2b06      	cmp	r3, #6
 8005988:	d010      	beq.n	80059ac <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f042 0201 	orr.w	r2, r2, #1
 8005998:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800599a:	e007      	b.n	80059ac <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f042 0201 	orr.w	r2, r2, #1
 80059aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80059ac:	2300      	movs	r3, #0
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3714      	adds	r7, #20
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bc80      	pop	{r7}
 80059b6:	4770      	bx	lr
 80059b8:	40012c00 	.word	0x40012c00
 80059bc:	40000400 	.word	0x40000400
 80059c0:	40000800 	.word	0x40000800

080059c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059ce:	2300      	movs	r3, #0
 80059d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d101      	bne.n	80059e0 <HAL_TIM_ConfigClockSource+0x1c>
 80059dc:	2302      	movs	r3, #2
 80059de:	e0b4      	b.n	8005b4a <HAL_TIM_ConfigClockSource+0x186>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2202      	movs	r2, #2
 80059ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80059fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005a06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	68ba      	ldr	r2, [r7, #8]
 8005a0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a18:	d03e      	beq.n	8005a98 <HAL_TIM_ConfigClockSource+0xd4>
 8005a1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a1e:	f200 8087 	bhi.w	8005b30 <HAL_TIM_ConfigClockSource+0x16c>
 8005a22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a26:	f000 8086 	beq.w	8005b36 <HAL_TIM_ConfigClockSource+0x172>
 8005a2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a2e:	d87f      	bhi.n	8005b30 <HAL_TIM_ConfigClockSource+0x16c>
 8005a30:	2b70      	cmp	r3, #112	@ 0x70
 8005a32:	d01a      	beq.n	8005a6a <HAL_TIM_ConfigClockSource+0xa6>
 8005a34:	2b70      	cmp	r3, #112	@ 0x70
 8005a36:	d87b      	bhi.n	8005b30 <HAL_TIM_ConfigClockSource+0x16c>
 8005a38:	2b60      	cmp	r3, #96	@ 0x60
 8005a3a:	d050      	beq.n	8005ade <HAL_TIM_ConfigClockSource+0x11a>
 8005a3c:	2b60      	cmp	r3, #96	@ 0x60
 8005a3e:	d877      	bhi.n	8005b30 <HAL_TIM_ConfigClockSource+0x16c>
 8005a40:	2b50      	cmp	r3, #80	@ 0x50
 8005a42:	d03c      	beq.n	8005abe <HAL_TIM_ConfigClockSource+0xfa>
 8005a44:	2b50      	cmp	r3, #80	@ 0x50
 8005a46:	d873      	bhi.n	8005b30 <HAL_TIM_ConfigClockSource+0x16c>
 8005a48:	2b40      	cmp	r3, #64	@ 0x40
 8005a4a:	d058      	beq.n	8005afe <HAL_TIM_ConfigClockSource+0x13a>
 8005a4c:	2b40      	cmp	r3, #64	@ 0x40
 8005a4e:	d86f      	bhi.n	8005b30 <HAL_TIM_ConfigClockSource+0x16c>
 8005a50:	2b30      	cmp	r3, #48	@ 0x30
 8005a52:	d064      	beq.n	8005b1e <HAL_TIM_ConfigClockSource+0x15a>
 8005a54:	2b30      	cmp	r3, #48	@ 0x30
 8005a56:	d86b      	bhi.n	8005b30 <HAL_TIM_ConfigClockSource+0x16c>
 8005a58:	2b20      	cmp	r3, #32
 8005a5a:	d060      	beq.n	8005b1e <HAL_TIM_ConfigClockSource+0x15a>
 8005a5c:	2b20      	cmp	r3, #32
 8005a5e:	d867      	bhi.n	8005b30 <HAL_TIM_ConfigClockSource+0x16c>
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d05c      	beq.n	8005b1e <HAL_TIM_ConfigClockSource+0x15a>
 8005a64:	2b10      	cmp	r3, #16
 8005a66:	d05a      	beq.n	8005b1e <HAL_TIM_ConfigClockSource+0x15a>
 8005a68:	e062      	b.n	8005b30 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005a7a:	f000 f950 	bl	8005d1e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005a8c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	68ba      	ldr	r2, [r7, #8]
 8005a94:	609a      	str	r2, [r3, #8]
      break;
 8005a96:	e04f      	b.n	8005b38 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005aa8:	f000 f939 	bl	8005d1e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	689a      	ldr	r2, [r3, #8]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005aba:	609a      	str	r2, [r3, #8]
      break;
 8005abc:	e03c      	b.n	8005b38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005aca:	461a      	mov	r2, r3
 8005acc:	f000 f8b0 	bl	8005c30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	2150      	movs	r1, #80	@ 0x50
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f000 f907 	bl	8005cea <TIM_ITRx_SetConfig>
      break;
 8005adc:	e02c      	b.n	8005b38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005aea:	461a      	mov	r2, r3
 8005aec:	f000 f8ce 	bl	8005c8c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	2160      	movs	r1, #96	@ 0x60
 8005af6:	4618      	mov	r0, r3
 8005af8:	f000 f8f7 	bl	8005cea <TIM_ITRx_SetConfig>
      break;
 8005afc:	e01c      	b.n	8005b38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	f000 f890 	bl	8005c30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	2140      	movs	r1, #64	@ 0x40
 8005b16:	4618      	mov	r0, r3
 8005b18:	f000 f8e7 	bl	8005cea <TIM_ITRx_SetConfig>
      break;
 8005b1c:	e00c      	b.n	8005b38 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4619      	mov	r1, r3
 8005b28:	4610      	mov	r0, r2
 8005b2a:	f000 f8de 	bl	8005cea <TIM_ITRx_SetConfig>
      break;
 8005b2e:	e003      	b.n	8005b38 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	73fb      	strb	r3, [r7, #15]
      break;
 8005b34:	e000      	b.n	8005b38 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005b36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2200      	movs	r2, #0
 8005b44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3710      	adds	r7, #16
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
	...

08005b54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b085      	sub	sp, #20
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	4a2f      	ldr	r2, [pc, #188]	@ (8005c24 <TIM_Base_SetConfig+0xd0>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d00b      	beq.n	8005b84 <TIM_Base_SetConfig+0x30>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b72:	d007      	beq.n	8005b84 <TIM_Base_SetConfig+0x30>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4a2c      	ldr	r2, [pc, #176]	@ (8005c28 <TIM_Base_SetConfig+0xd4>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d003      	beq.n	8005b84 <TIM_Base_SetConfig+0x30>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	4a2b      	ldr	r2, [pc, #172]	@ (8005c2c <TIM_Base_SetConfig+0xd8>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d108      	bne.n	8005b96 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	68fa      	ldr	r2, [r7, #12]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a22      	ldr	r2, [pc, #136]	@ (8005c24 <TIM_Base_SetConfig+0xd0>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d00b      	beq.n	8005bb6 <TIM_Base_SetConfig+0x62>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ba4:	d007      	beq.n	8005bb6 <TIM_Base_SetConfig+0x62>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4a1f      	ldr	r2, [pc, #124]	@ (8005c28 <TIM_Base_SetConfig+0xd4>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d003      	beq.n	8005bb6 <TIM_Base_SetConfig+0x62>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a1e      	ldr	r2, [pc, #120]	@ (8005c2c <TIM_Base_SetConfig+0xd8>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d108      	bne.n	8005bc8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	68fa      	ldr	r2, [r7, #12]
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	695b      	ldr	r3, [r3, #20]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	68fa      	ldr	r2, [r7, #12]
 8005bda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	689a      	ldr	r2, [r3, #8]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	4a0d      	ldr	r2, [pc, #52]	@ (8005c24 <TIM_Base_SetConfig+0xd0>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d103      	bne.n	8005bfc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	691a      	ldr	r2, [r3, #16]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	691b      	ldr	r3, [r3, #16]
 8005c06:	f003 0301 	and.w	r3, r3, #1
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d005      	beq.n	8005c1a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	691b      	ldr	r3, [r3, #16]
 8005c12:	f023 0201 	bic.w	r2, r3, #1
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	611a      	str	r2, [r3, #16]
  }
}
 8005c1a:	bf00      	nop
 8005c1c:	3714      	adds	r7, #20
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bc80      	pop	{r7}
 8005c22:	4770      	bx	lr
 8005c24:	40012c00 	.word	0x40012c00
 8005c28:	40000400 	.word	0x40000400
 8005c2c:	40000800 	.word	0x40000800

08005c30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b087      	sub	sp, #28
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	60f8      	str	r0, [r7, #12]
 8005c38:	60b9      	str	r1, [r7, #8]
 8005c3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6a1b      	ldr	r3, [r3, #32]
 8005c40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	6a1b      	ldr	r3, [r3, #32]
 8005c46:	f023 0201 	bic.w	r2, r3, #1
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	699b      	ldr	r3, [r3, #24]
 8005c52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005c5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	011b      	lsls	r3, r3, #4
 8005c60:	693a      	ldr	r2, [r7, #16]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	f023 030a 	bic.w	r3, r3, #10
 8005c6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c6e:	697a      	ldr	r2, [r7, #20]
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	693a      	ldr	r2, [r7, #16]
 8005c7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	697a      	ldr	r2, [r7, #20]
 8005c80:	621a      	str	r2, [r3, #32]
}
 8005c82:	bf00      	nop
 8005c84:	371c      	adds	r7, #28
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bc80      	pop	{r7}
 8005c8a:	4770      	bx	lr

08005c8c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b087      	sub	sp, #28
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	60f8      	str	r0, [r7, #12]
 8005c94:	60b9      	str	r1, [r7, #8]
 8005c96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	6a1b      	ldr	r3, [r3, #32]
 8005c9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	6a1b      	ldr	r3, [r3, #32]
 8005ca2:	f023 0210 	bic.w	r2, r3, #16
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	699b      	ldr	r3, [r3, #24]
 8005cae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005cb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	031b      	lsls	r3, r3, #12
 8005cbc:	693a      	ldr	r2, [r7, #16]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005cc8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	011b      	lsls	r3, r3, #4
 8005cce:	697a      	ldr	r2, [r7, #20]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	693a      	ldr	r2, [r7, #16]
 8005cd8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	697a      	ldr	r2, [r7, #20]
 8005cde:	621a      	str	r2, [r3, #32]
}
 8005ce0:	bf00      	nop
 8005ce2:	371c      	adds	r7, #28
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bc80      	pop	{r7}
 8005ce8:	4770      	bx	lr

08005cea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005cea:	b480      	push	{r7}
 8005cec:	b085      	sub	sp, #20
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	6078      	str	r0, [r7, #4]
 8005cf2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d02:	683a      	ldr	r2, [r7, #0]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	4313      	orrs	r3, r2
 8005d08:	f043 0307 	orr.w	r3, r3, #7
 8005d0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	68fa      	ldr	r2, [r7, #12]
 8005d12:	609a      	str	r2, [r3, #8]
}
 8005d14:	bf00      	nop
 8005d16:	3714      	adds	r7, #20
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bc80      	pop	{r7}
 8005d1c:	4770      	bx	lr

08005d1e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d1e:	b480      	push	{r7}
 8005d20:	b087      	sub	sp, #28
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	60f8      	str	r0, [r7, #12]
 8005d26:	60b9      	str	r1, [r7, #8]
 8005d28:	607a      	str	r2, [r7, #4]
 8005d2a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005d38:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	021a      	lsls	r2, r3, #8
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	431a      	orrs	r2, r3
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	4313      	orrs	r3, r2
 8005d46:	697a      	ldr	r2, [r7, #20]
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	697a      	ldr	r2, [r7, #20]
 8005d50:	609a      	str	r2, [r3, #8]
}
 8005d52:	bf00      	nop
 8005d54:	371c      	adds	r7, #28
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bc80      	pop	{r7}
 8005d5a:	4770      	bx	lr

08005d5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b085      	sub	sp, #20
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d101      	bne.n	8005d74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d70:	2302      	movs	r3, #2
 8005d72:	e046      	b.n	8005e02 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2202      	movs	r2, #2
 8005d80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	68fa      	ldr	r2, [r7, #12]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	68fa      	ldr	r2, [r7, #12]
 8005dac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a16      	ldr	r2, [pc, #88]	@ (8005e0c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d00e      	beq.n	8005dd6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005dc0:	d009      	beq.n	8005dd6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a12      	ldr	r2, [pc, #72]	@ (8005e10 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d004      	beq.n	8005dd6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a10      	ldr	r2, [pc, #64]	@ (8005e14 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d10c      	bne.n	8005df0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ddc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	68ba      	ldr	r2, [r7, #8]
 8005de4:	4313      	orrs	r3, r2
 8005de6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	68ba      	ldr	r2, [r7, #8]
 8005dee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3714      	adds	r7, #20
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bc80      	pop	{r7}
 8005e0a:	4770      	bx	lr
 8005e0c:	40012c00 	.word	0x40012c00
 8005e10:	40000400 	.word	0x40000400
 8005e14:	40000800 	.word	0x40000800

08005e18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b082      	sub	sp, #8
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d101      	bne.n	8005e2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	e042      	b.n	8005eb0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e30:	b2db      	uxtb	r3, r3
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d106      	bne.n	8005e44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f7fc fc94 	bl	800276c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2224      	movs	r2, #36	@ 0x24
 8005e48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	68da      	ldr	r2, [r3, #12]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005e5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f000 fdb7 	bl	80069d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	691a      	ldr	r2, [r3, #16]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005e70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	695a      	ldr	r2, [r3, #20]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005e80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	68da      	ldr	r2, [r3, #12]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005e90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2220      	movs	r2, #32
 8005e9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2220      	movs	r2, #32
 8005ea4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005eae:	2300      	movs	r3, #0
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3708      	adds	r7, #8
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b08a      	sub	sp, #40	@ 0x28
 8005ebc:	af02      	add	r7, sp, #8
 8005ebe:	60f8      	str	r0, [r7, #12]
 8005ec0:	60b9      	str	r1, [r7, #8]
 8005ec2:	603b      	str	r3, [r7, #0]
 8005ec4:	4613      	mov	r3, r2
 8005ec6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ed2:	b2db      	uxtb	r3, r3
 8005ed4:	2b20      	cmp	r3, #32
 8005ed6:	d175      	bne.n	8005fc4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d002      	beq.n	8005ee4 <HAL_UART_Transmit+0x2c>
 8005ede:	88fb      	ldrh	r3, [r7, #6]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d101      	bne.n	8005ee8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	e06e      	b.n	8005fc6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2200      	movs	r2, #0
 8005eec:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2221      	movs	r2, #33	@ 0x21
 8005ef2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ef6:	f7fc fe07 	bl	8002b08 <HAL_GetTick>
 8005efa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	88fa      	ldrh	r2, [r7, #6]
 8005f00:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	88fa      	ldrh	r2, [r7, #6]
 8005f06:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f10:	d108      	bne.n	8005f24 <HAL_UART_Transmit+0x6c>
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	691b      	ldr	r3, [r3, #16]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d104      	bne.n	8005f24 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	61bb      	str	r3, [r7, #24]
 8005f22:	e003      	b.n	8005f2c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005f2c:	e02e      	b.n	8005f8c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	9300      	str	r3, [sp, #0]
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	2200      	movs	r2, #0
 8005f36:	2180      	movs	r1, #128	@ 0x80
 8005f38:	68f8      	ldr	r0, [r7, #12]
 8005f3a:	f000 fb1c 	bl	8006576 <UART_WaitOnFlagUntilTimeout>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d005      	beq.n	8005f50 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2220      	movs	r2, #32
 8005f48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005f4c:	2303      	movs	r3, #3
 8005f4e:	e03a      	b.n	8005fc6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d10b      	bne.n	8005f6e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f56:	69bb      	ldr	r3, [r7, #24]
 8005f58:	881b      	ldrh	r3, [r3, #0]
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f64:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005f66:	69bb      	ldr	r3, [r7, #24]
 8005f68:	3302      	adds	r3, #2
 8005f6a:	61bb      	str	r3, [r7, #24]
 8005f6c:	e007      	b.n	8005f7e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	781a      	ldrb	r2, [r3, #0]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005f78:	69fb      	ldr	r3, [r7, #28]
 8005f7a:	3301      	adds	r3, #1
 8005f7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	3b01      	subs	r3, #1
 8005f86:	b29a      	uxth	r2, r3
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d1cb      	bne.n	8005f2e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	9300      	str	r3, [sp, #0]
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	2140      	movs	r1, #64	@ 0x40
 8005fa0:	68f8      	ldr	r0, [r7, #12]
 8005fa2:	f000 fae8 	bl	8006576 <UART_WaitOnFlagUntilTimeout>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d005      	beq.n	8005fb8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2220      	movs	r2, #32
 8005fb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005fb4:	2303      	movs	r3, #3
 8005fb6:	e006      	b.n	8005fc6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2220      	movs	r2, #32
 8005fbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	e000      	b.n	8005fc6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005fc4:	2302      	movs	r3, #2
  }
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3720      	adds	r7, #32
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}

08005fce <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005fce:	b580      	push	{r7, lr}
 8005fd0:	b084      	sub	sp, #16
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	60f8      	str	r0, [r7, #12]
 8005fd6:	60b9      	str	r1, [r7, #8]
 8005fd8:	4613      	mov	r3, r2
 8005fda:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005fe2:	b2db      	uxtb	r3, r3
 8005fe4:	2b20      	cmp	r3, #32
 8005fe6:	d112      	bne.n	800600e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d002      	beq.n	8005ff4 <HAL_UART_Receive_IT+0x26>
 8005fee:	88fb      	ldrh	r3, [r7, #6]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d101      	bne.n	8005ff8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	e00b      	b.n	8006010 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005ffe:	88fb      	ldrh	r3, [r7, #6]
 8006000:	461a      	mov	r2, r3
 8006002:	68b9      	ldr	r1, [r7, #8]
 8006004:	68f8      	ldr	r0, [r7, #12]
 8006006:	f000 fb0f 	bl	8006628 <UART_Start_Receive_IT>
 800600a:	4603      	mov	r3, r0
 800600c:	e000      	b.n	8006010 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800600e:	2302      	movs	r3, #2
  }
}
 8006010:	4618      	mov	r0, r3
 8006012:	3710      	adds	r7, #16
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}

08006018 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b0ba      	sub	sp, #232	@ 0xe8
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	68db      	ldr	r3, [r3, #12]
 8006030:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	695b      	ldr	r3, [r3, #20]
 800603a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800603e:	2300      	movs	r3, #0
 8006040:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006044:	2300      	movs	r3, #0
 8006046:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800604a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800604e:	f003 030f 	and.w	r3, r3, #15
 8006052:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006056:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800605a:	2b00      	cmp	r3, #0
 800605c:	d10f      	bne.n	800607e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800605e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006062:	f003 0320 	and.w	r3, r3, #32
 8006066:	2b00      	cmp	r3, #0
 8006068:	d009      	beq.n	800607e <HAL_UART_IRQHandler+0x66>
 800606a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800606e:	f003 0320 	and.w	r3, r3, #32
 8006072:	2b00      	cmp	r3, #0
 8006074:	d003      	beq.n	800607e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f000 fbec 	bl	8006854 <UART_Receive_IT>
      return;
 800607c:	e25b      	b.n	8006536 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800607e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006082:	2b00      	cmp	r3, #0
 8006084:	f000 80de 	beq.w	8006244 <HAL_UART_IRQHandler+0x22c>
 8006088:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800608c:	f003 0301 	and.w	r3, r3, #1
 8006090:	2b00      	cmp	r3, #0
 8006092:	d106      	bne.n	80060a2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006094:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006098:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800609c:	2b00      	cmp	r3, #0
 800609e:	f000 80d1 	beq.w	8006244 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80060a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060a6:	f003 0301 	and.w	r3, r3, #1
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d00b      	beq.n	80060c6 <HAL_UART_IRQHandler+0xae>
 80060ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d005      	beq.n	80060c6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060be:	f043 0201 	orr.w	r2, r3, #1
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80060c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060ca:	f003 0304 	and.w	r3, r3, #4
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d00b      	beq.n	80060ea <HAL_UART_IRQHandler+0xd2>
 80060d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80060d6:	f003 0301 	and.w	r3, r3, #1
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d005      	beq.n	80060ea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060e2:	f043 0202 	orr.w	r2, r3, #2
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80060ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060ee:	f003 0302 	and.w	r3, r3, #2
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d00b      	beq.n	800610e <HAL_UART_IRQHandler+0xf6>
 80060f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80060fa:	f003 0301 	and.w	r3, r3, #1
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d005      	beq.n	800610e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006106:	f043 0204 	orr.w	r2, r3, #4
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800610e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006112:	f003 0308 	and.w	r3, r3, #8
 8006116:	2b00      	cmp	r3, #0
 8006118:	d011      	beq.n	800613e <HAL_UART_IRQHandler+0x126>
 800611a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800611e:	f003 0320 	and.w	r3, r3, #32
 8006122:	2b00      	cmp	r3, #0
 8006124:	d105      	bne.n	8006132 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006126:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800612a:	f003 0301 	and.w	r3, r3, #1
 800612e:	2b00      	cmp	r3, #0
 8006130:	d005      	beq.n	800613e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006136:	f043 0208 	orr.w	r2, r3, #8
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006142:	2b00      	cmp	r3, #0
 8006144:	f000 81f2 	beq.w	800652c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006148:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800614c:	f003 0320 	and.w	r3, r3, #32
 8006150:	2b00      	cmp	r3, #0
 8006152:	d008      	beq.n	8006166 <HAL_UART_IRQHandler+0x14e>
 8006154:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006158:	f003 0320 	and.w	r3, r3, #32
 800615c:	2b00      	cmp	r3, #0
 800615e:	d002      	beq.n	8006166 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f000 fb77 	bl	8006854 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	695b      	ldr	r3, [r3, #20]
 800616c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006170:	2b00      	cmp	r3, #0
 8006172:	bf14      	ite	ne
 8006174:	2301      	movne	r3, #1
 8006176:	2300      	moveq	r3, #0
 8006178:	b2db      	uxtb	r3, r3
 800617a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006182:	f003 0308 	and.w	r3, r3, #8
 8006186:	2b00      	cmp	r3, #0
 8006188:	d103      	bne.n	8006192 <HAL_UART_IRQHandler+0x17a>
 800618a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800618e:	2b00      	cmp	r3, #0
 8006190:	d04f      	beq.n	8006232 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f000 fa81 	bl	800669a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	695b      	ldr	r3, [r3, #20]
 800619e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d041      	beq.n	800622a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	3314      	adds	r3, #20
 80061ac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80061b4:	e853 3f00 	ldrex	r3, [r3]
 80061b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80061bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80061c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	3314      	adds	r3, #20
 80061ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80061d2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80061d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80061de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80061e2:	e841 2300 	strex	r3, r2, [r1]
 80061e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80061ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d1d9      	bne.n	80061a6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d013      	beq.n	8006222 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061fe:	4a7e      	ldr	r2, [pc, #504]	@ (80063f8 <HAL_UART_IRQHandler+0x3e0>)
 8006200:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006206:	4618      	mov	r0, r3
 8006208:	f7fd fa20 	bl	800364c <HAL_DMA_Abort_IT>
 800620c:	4603      	mov	r3, r0
 800620e:	2b00      	cmp	r3, #0
 8006210:	d016      	beq.n	8006240 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006216:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006218:	687a      	ldr	r2, [r7, #4]
 800621a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800621c:	4610      	mov	r0, r2
 800621e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006220:	e00e      	b.n	8006240 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 f993 	bl	800654e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006228:	e00a      	b.n	8006240 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 f98f 	bl	800654e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006230:	e006      	b.n	8006240 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 f98b 	bl	800654e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2200      	movs	r2, #0
 800623c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800623e:	e175      	b.n	800652c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006240:	bf00      	nop
    return;
 8006242:	e173      	b.n	800652c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006248:	2b01      	cmp	r3, #1
 800624a:	f040 814f 	bne.w	80064ec <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800624e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006252:	f003 0310 	and.w	r3, r3, #16
 8006256:	2b00      	cmp	r3, #0
 8006258:	f000 8148 	beq.w	80064ec <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800625c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006260:	f003 0310 	and.w	r3, r3, #16
 8006264:	2b00      	cmp	r3, #0
 8006266:	f000 8141 	beq.w	80064ec <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800626a:	2300      	movs	r3, #0
 800626c:	60bb      	str	r3, [r7, #8]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	60bb      	str	r3, [r7, #8]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	60bb      	str	r3, [r7, #8]
 800627e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	695b      	ldr	r3, [r3, #20]
 8006286:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800628a:	2b00      	cmp	r3, #0
 800628c:	f000 80b6 	beq.w	80063fc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800629c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	f000 8145 	beq.w	8006530 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80062aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80062ae:	429a      	cmp	r2, r3
 80062b0:	f080 813e 	bcs.w	8006530 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80062ba:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062c0:	699b      	ldr	r3, [r3, #24]
 80062c2:	2b20      	cmp	r3, #32
 80062c4:	f000 8088 	beq.w	80063d8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	330c      	adds	r3, #12
 80062ce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80062d6:	e853 3f00 	ldrex	r3, [r3]
 80062da:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80062de:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80062e2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80062e6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	330c      	adds	r3, #12
 80062f0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80062f4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80062f8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062fc:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006300:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006304:	e841 2300 	strex	r3, r2, [r1]
 8006308:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800630c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006310:	2b00      	cmp	r3, #0
 8006312:	d1d9      	bne.n	80062c8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	3314      	adds	r3, #20
 800631a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800631c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800631e:	e853 3f00 	ldrex	r3, [r3]
 8006322:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006324:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006326:	f023 0301 	bic.w	r3, r3, #1
 800632a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	3314      	adds	r3, #20
 8006334:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006338:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800633c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800633e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006340:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006344:	e841 2300 	strex	r3, r2, [r1]
 8006348:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800634a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800634c:	2b00      	cmp	r3, #0
 800634e:	d1e1      	bne.n	8006314 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	3314      	adds	r3, #20
 8006356:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006358:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800635a:	e853 3f00 	ldrex	r3, [r3]
 800635e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006360:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006362:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006366:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	3314      	adds	r3, #20
 8006370:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006374:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006376:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006378:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800637a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800637c:	e841 2300 	strex	r3, r2, [r1]
 8006380:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006382:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006384:	2b00      	cmp	r3, #0
 8006386:	d1e3      	bne.n	8006350 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2220      	movs	r2, #32
 800638c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2200      	movs	r2, #0
 8006394:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	330c      	adds	r3, #12
 800639c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800639e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063a0:	e853 3f00 	ldrex	r3, [r3]
 80063a4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80063a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80063a8:	f023 0310 	bic.w	r3, r3, #16
 80063ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	330c      	adds	r3, #12
 80063b6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80063ba:	65ba      	str	r2, [r7, #88]	@ 0x58
 80063bc:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063be:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80063c0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80063c2:	e841 2300 	strex	r3, r2, [r1]
 80063c6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80063c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d1e3      	bne.n	8006396 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063d2:	4618      	mov	r0, r3
 80063d4:	f7fd f8ff 	bl	80035d6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2202      	movs	r2, #2
 80063dc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	1ad3      	subs	r3, r2, r3
 80063ea:	b29b      	uxth	r3, r3
 80063ec:	4619      	mov	r1, r3
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f000 f8b6 	bl	8006560 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80063f4:	e09c      	b.n	8006530 <HAL_UART_IRQHandler+0x518>
 80063f6:	bf00      	nop
 80063f8:	0800675f 	.word	0x0800675f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006404:	b29b      	uxth	r3, r3
 8006406:	1ad3      	subs	r3, r2, r3
 8006408:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006410:	b29b      	uxth	r3, r3
 8006412:	2b00      	cmp	r3, #0
 8006414:	f000 808e 	beq.w	8006534 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006418:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800641c:	2b00      	cmp	r3, #0
 800641e:	f000 8089 	beq.w	8006534 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	330c      	adds	r3, #12
 8006428:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800642a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800642c:	e853 3f00 	ldrex	r3, [r3]
 8006430:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006432:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006434:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006438:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	330c      	adds	r3, #12
 8006442:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006446:	647a      	str	r2, [r7, #68]	@ 0x44
 8006448:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800644a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800644c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800644e:	e841 2300 	strex	r3, r2, [r1]
 8006452:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006454:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006456:	2b00      	cmp	r3, #0
 8006458:	d1e3      	bne.n	8006422 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	3314      	adds	r3, #20
 8006460:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006464:	e853 3f00 	ldrex	r3, [r3]
 8006468:	623b      	str	r3, [r7, #32]
   return(result);
 800646a:	6a3b      	ldr	r3, [r7, #32]
 800646c:	f023 0301 	bic.w	r3, r3, #1
 8006470:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	3314      	adds	r3, #20
 800647a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800647e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006480:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006482:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006484:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006486:	e841 2300 	strex	r3, r2, [r1]
 800648a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800648c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800648e:	2b00      	cmp	r3, #0
 8006490:	d1e3      	bne.n	800645a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2220      	movs	r2, #32
 8006496:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2200      	movs	r2, #0
 800649e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	330c      	adds	r3, #12
 80064a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	e853 3f00 	ldrex	r3, [r3]
 80064ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f023 0310 	bic.w	r3, r3, #16
 80064b6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	330c      	adds	r3, #12
 80064c0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80064c4:	61fa      	str	r2, [r7, #28]
 80064c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c8:	69b9      	ldr	r1, [r7, #24]
 80064ca:	69fa      	ldr	r2, [r7, #28]
 80064cc:	e841 2300 	strex	r3, r2, [r1]
 80064d0:	617b      	str	r3, [r7, #20]
   return(result);
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d1e3      	bne.n	80064a0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2202      	movs	r2, #2
 80064dc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80064de:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80064e2:	4619      	mov	r1, r3
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f000 f83b 	bl	8006560 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80064ea:	e023      	b.n	8006534 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80064ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d009      	beq.n	800650c <HAL_UART_IRQHandler+0x4f4>
 80064f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006500:	2b00      	cmp	r3, #0
 8006502:	d003      	beq.n	800650c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f000 f93e 	bl	8006786 <UART_Transmit_IT>
    return;
 800650a:	e014      	b.n	8006536 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800650c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006510:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006514:	2b00      	cmp	r3, #0
 8006516:	d00e      	beq.n	8006536 <HAL_UART_IRQHandler+0x51e>
 8006518:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800651c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006520:	2b00      	cmp	r3, #0
 8006522:	d008      	beq.n	8006536 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f000 f97d 	bl	8006824 <UART_EndTransmit_IT>
    return;
 800652a:	e004      	b.n	8006536 <HAL_UART_IRQHandler+0x51e>
    return;
 800652c:	bf00      	nop
 800652e:	e002      	b.n	8006536 <HAL_UART_IRQHandler+0x51e>
      return;
 8006530:	bf00      	nop
 8006532:	e000      	b.n	8006536 <HAL_UART_IRQHandler+0x51e>
      return;
 8006534:	bf00      	nop
  }
}
 8006536:	37e8      	adds	r7, #232	@ 0xe8
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}

0800653c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800653c:	b480      	push	{r7}
 800653e:	b083      	sub	sp, #12
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006544:	bf00      	nop
 8006546:	370c      	adds	r7, #12
 8006548:	46bd      	mov	sp, r7
 800654a:	bc80      	pop	{r7}
 800654c:	4770      	bx	lr

0800654e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800654e:	b480      	push	{r7}
 8006550:	b083      	sub	sp, #12
 8006552:	af00      	add	r7, sp, #0
 8006554:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006556:	bf00      	nop
 8006558:	370c      	adds	r7, #12
 800655a:	46bd      	mov	sp, r7
 800655c:	bc80      	pop	{r7}
 800655e:	4770      	bx	lr

08006560 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006560:	b480      	push	{r7}
 8006562:	b083      	sub	sp, #12
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	460b      	mov	r3, r1
 800656a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800656c:	bf00      	nop
 800656e:	370c      	adds	r7, #12
 8006570:	46bd      	mov	sp, r7
 8006572:	bc80      	pop	{r7}
 8006574:	4770      	bx	lr

08006576 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006576:	b580      	push	{r7, lr}
 8006578:	b086      	sub	sp, #24
 800657a:	af00      	add	r7, sp, #0
 800657c:	60f8      	str	r0, [r7, #12]
 800657e:	60b9      	str	r1, [r7, #8]
 8006580:	603b      	str	r3, [r7, #0]
 8006582:	4613      	mov	r3, r2
 8006584:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006586:	e03b      	b.n	8006600 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006588:	6a3b      	ldr	r3, [r7, #32]
 800658a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800658e:	d037      	beq.n	8006600 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006590:	f7fc faba 	bl	8002b08 <HAL_GetTick>
 8006594:	4602      	mov	r2, r0
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	1ad3      	subs	r3, r2, r3
 800659a:	6a3a      	ldr	r2, [r7, #32]
 800659c:	429a      	cmp	r2, r3
 800659e:	d302      	bcc.n	80065a6 <UART_WaitOnFlagUntilTimeout+0x30>
 80065a0:	6a3b      	ldr	r3, [r7, #32]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d101      	bne.n	80065aa <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80065a6:	2303      	movs	r3, #3
 80065a8:	e03a      	b.n	8006620 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	68db      	ldr	r3, [r3, #12]
 80065b0:	f003 0304 	and.w	r3, r3, #4
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d023      	beq.n	8006600 <UART_WaitOnFlagUntilTimeout+0x8a>
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	2b80      	cmp	r3, #128	@ 0x80
 80065bc:	d020      	beq.n	8006600 <UART_WaitOnFlagUntilTimeout+0x8a>
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	2b40      	cmp	r3, #64	@ 0x40
 80065c2:	d01d      	beq.n	8006600 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f003 0308 	and.w	r3, r3, #8
 80065ce:	2b08      	cmp	r3, #8
 80065d0:	d116      	bne.n	8006600 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80065d2:	2300      	movs	r3, #0
 80065d4:	617b      	str	r3, [r7, #20]
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	617b      	str	r3, [r7, #20]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	617b      	str	r3, [r7, #20]
 80065e6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80065e8:	68f8      	ldr	r0, [r7, #12]
 80065ea:	f000 f856 	bl	800669a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2208      	movs	r2, #8
 80065f2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2200      	movs	r2, #0
 80065f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80065fc:	2301      	movs	r3, #1
 80065fe:	e00f      	b.n	8006620 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	681a      	ldr	r2, [r3, #0]
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	4013      	ands	r3, r2
 800660a:	68ba      	ldr	r2, [r7, #8]
 800660c:	429a      	cmp	r2, r3
 800660e:	bf0c      	ite	eq
 8006610:	2301      	moveq	r3, #1
 8006612:	2300      	movne	r3, #0
 8006614:	b2db      	uxtb	r3, r3
 8006616:	461a      	mov	r2, r3
 8006618:	79fb      	ldrb	r3, [r7, #7]
 800661a:	429a      	cmp	r2, r3
 800661c:	d0b4      	beq.n	8006588 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800661e:	2300      	movs	r3, #0
}
 8006620:	4618      	mov	r0, r3
 8006622:	3718      	adds	r7, #24
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}

08006628 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006628:	b480      	push	{r7}
 800662a:	b085      	sub	sp, #20
 800662c:	af00      	add	r7, sp, #0
 800662e:	60f8      	str	r0, [r7, #12]
 8006630:	60b9      	str	r1, [r7, #8]
 8006632:	4613      	mov	r3, r2
 8006634:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	68ba      	ldr	r2, [r7, #8]
 800663a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	88fa      	ldrh	r2, [r7, #6]
 8006640:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	88fa      	ldrh	r2, [r7, #6]
 8006646:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2200      	movs	r2, #0
 800664c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2222      	movs	r2, #34	@ 0x22
 8006652:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	691b      	ldr	r3, [r3, #16]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d007      	beq.n	800666e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	68da      	ldr	r2, [r3, #12]
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800666c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	695a      	ldr	r2, [r3, #20]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f042 0201 	orr.w	r2, r2, #1
 800667c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	68da      	ldr	r2, [r3, #12]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f042 0220 	orr.w	r2, r2, #32
 800668c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800668e:	2300      	movs	r3, #0
}
 8006690:	4618      	mov	r0, r3
 8006692:	3714      	adds	r7, #20
 8006694:	46bd      	mov	sp, r7
 8006696:	bc80      	pop	{r7}
 8006698:	4770      	bx	lr

0800669a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800669a:	b480      	push	{r7}
 800669c:	b095      	sub	sp, #84	@ 0x54
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	330c      	adds	r3, #12
 80066a8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066ac:	e853 3f00 	ldrex	r3, [r3]
 80066b0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80066b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80066b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	330c      	adds	r3, #12
 80066c0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80066c2:	643a      	str	r2, [r7, #64]	@ 0x40
 80066c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80066c8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80066ca:	e841 2300 	strex	r3, r2, [r1]
 80066ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80066d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d1e5      	bne.n	80066a2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	3314      	adds	r3, #20
 80066dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066de:	6a3b      	ldr	r3, [r7, #32]
 80066e0:	e853 3f00 	ldrex	r3, [r3]
 80066e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80066e6:	69fb      	ldr	r3, [r7, #28]
 80066e8:	f023 0301 	bic.w	r3, r3, #1
 80066ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	3314      	adds	r3, #20
 80066f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80066f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80066f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80066fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80066fe:	e841 2300 	strex	r3, r2, [r1]
 8006702:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006706:	2b00      	cmp	r3, #0
 8006708:	d1e5      	bne.n	80066d6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800670e:	2b01      	cmp	r3, #1
 8006710:	d119      	bne.n	8006746 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	330c      	adds	r3, #12
 8006718:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	e853 3f00 	ldrex	r3, [r3]
 8006720:	60bb      	str	r3, [r7, #8]
   return(result);
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	f023 0310 	bic.w	r3, r3, #16
 8006728:	647b      	str	r3, [r7, #68]	@ 0x44
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	330c      	adds	r3, #12
 8006730:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006732:	61ba      	str	r2, [r7, #24]
 8006734:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006736:	6979      	ldr	r1, [r7, #20]
 8006738:	69ba      	ldr	r2, [r7, #24]
 800673a:	e841 2300 	strex	r3, r2, [r1]
 800673e:	613b      	str	r3, [r7, #16]
   return(result);
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d1e5      	bne.n	8006712 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2220      	movs	r2, #32
 800674a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2200      	movs	r2, #0
 8006752:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006754:	bf00      	nop
 8006756:	3754      	adds	r7, #84	@ 0x54
 8006758:	46bd      	mov	sp, r7
 800675a:	bc80      	pop	{r7}
 800675c:	4770      	bx	lr

0800675e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800675e:	b580      	push	{r7, lr}
 8006760:	b084      	sub	sp, #16
 8006762:	af00      	add	r7, sp, #0
 8006764:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800676a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2200      	movs	r2, #0
 8006770:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2200      	movs	r2, #0
 8006776:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006778:	68f8      	ldr	r0, [r7, #12]
 800677a:	f7ff fee8 	bl	800654e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800677e:	bf00      	nop
 8006780:	3710      	adds	r7, #16
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}

08006786 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006786:	b480      	push	{r7}
 8006788:	b085      	sub	sp, #20
 800678a:	af00      	add	r7, sp, #0
 800678c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006794:	b2db      	uxtb	r3, r3
 8006796:	2b21      	cmp	r3, #33	@ 0x21
 8006798:	d13e      	bne.n	8006818 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067a2:	d114      	bne.n	80067ce <UART_Transmit_IT+0x48>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	691b      	ldr	r3, [r3, #16]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d110      	bne.n	80067ce <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6a1b      	ldr	r3, [r3, #32]
 80067b0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	881b      	ldrh	r3, [r3, #0]
 80067b6:	461a      	mov	r2, r3
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80067c0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6a1b      	ldr	r3, [r3, #32]
 80067c6:	1c9a      	adds	r2, r3, #2
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	621a      	str	r2, [r3, #32]
 80067cc:	e008      	b.n	80067e0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6a1b      	ldr	r3, [r3, #32]
 80067d2:	1c59      	adds	r1, r3, #1
 80067d4:	687a      	ldr	r2, [r7, #4]
 80067d6:	6211      	str	r1, [r2, #32]
 80067d8:	781a      	ldrb	r2, [r3, #0]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	3b01      	subs	r3, #1
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	687a      	ldr	r2, [r7, #4]
 80067ec:	4619      	mov	r1, r3
 80067ee:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d10f      	bne.n	8006814 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	68da      	ldr	r2, [r3, #12]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006802:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	68da      	ldr	r2, [r3, #12]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006812:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006814:	2300      	movs	r3, #0
 8006816:	e000      	b.n	800681a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006818:	2302      	movs	r3, #2
  }
}
 800681a:	4618      	mov	r0, r3
 800681c:	3714      	adds	r7, #20
 800681e:	46bd      	mov	sp, r7
 8006820:	bc80      	pop	{r7}
 8006822:	4770      	bx	lr

08006824 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b082      	sub	sp, #8
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	68da      	ldr	r2, [r3, #12]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800683a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2220      	movs	r2, #32
 8006840:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f7ff fe79 	bl	800653c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800684a:	2300      	movs	r3, #0
}
 800684c:	4618      	mov	r0, r3
 800684e:	3708      	adds	r7, #8
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}

08006854 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b08c      	sub	sp, #48	@ 0x30
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006862:	b2db      	uxtb	r3, r3
 8006864:	2b22      	cmp	r3, #34	@ 0x22
 8006866:	f040 80ae 	bne.w	80069c6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006872:	d117      	bne.n	80068a4 <UART_Receive_IT+0x50>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	691b      	ldr	r3, [r3, #16]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d113      	bne.n	80068a4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800687c:	2300      	movs	r3, #0
 800687e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006884:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	b29b      	uxth	r3, r3
 800688e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006892:	b29a      	uxth	r2, r3
 8006894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006896:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800689c:	1c9a      	adds	r2, r3, #2
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	629a      	str	r2, [r3, #40]	@ 0x28
 80068a2:	e026      	b.n	80068f2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80068aa:	2300      	movs	r3, #0
 80068ac:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	689b      	ldr	r3, [r3, #8]
 80068b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068b6:	d007      	beq.n	80068c8 <UART_Receive_IT+0x74>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d10a      	bne.n	80068d6 <UART_Receive_IT+0x82>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	691b      	ldr	r3, [r3, #16]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d106      	bne.n	80068d6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	b2da      	uxtb	r2, r3
 80068d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068d2:	701a      	strb	r2, [r3, #0]
 80068d4:	e008      	b.n	80068e8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80068e2:	b2da      	uxtb	r2, r3
 80068e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068e6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068ec:	1c5a      	adds	r2, r3, #1
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80068f6:	b29b      	uxth	r3, r3
 80068f8:	3b01      	subs	r3, #1
 80068fa:	b29b      	uxth	r3, r3
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	4619      	mov	r1, r3
 8006900:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006902:	2b00      	cmp	r3, #0
 8006904:	d15d      	bne.n	80069c2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	68da      	ldr	r2, [r3, #12]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f022 0220 	bic.w	r2, r2, #32
 8006914:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	68da      	ldr	r2, [r3, #12]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006924:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	695a      	ldr	r2, [r3, #20]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f022 0201 	bic.w	r2, r2, #1
 8006934:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2220      	movs	r2, #32
 800693a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2200      	movs	r2, #0
 8006942:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006948:	2b01      	cmp	r3, #1
 800694a:	d135      	bne.n	80069b8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2200      	movs	r2, #0
 8006950:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	330c      	adds	r3, #12
 8006958:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	e853 3f00 	ldrex	r3, [r3]
 8006960:	613b      	str	r3, [r7, #16]
   return(result);
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	f023 0310 	bic.w	r3, r3, #16
 8006968:	627b      	str	r3, [r7, #36]	@ 0x24
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	330c      	adds	r3, #12
 8006970:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006972:	623a      	str	r2, [r7, #32]
 8006974:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006976:	69f9      	ldr	r1, [r7, #28]
 8006978:	6a3a      	ldr	r2, [r7, #32]
 800697a:	e841 2300 	strex	r3, r2, [r1]
 800697e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006980:	69bb      	ldr	r3, [r7, #24]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d1e5      	bne.n	8006952 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f003 0310 	and.w	r3, r3, #16
 8006990:	2b10      	cmp	r3, #16
 8006992:	d10a      	bne.n	80069aa <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006994:	2300      	movs	r3, #0
 8006996:	60fb      	str	r3, [r7, #12]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	60fb      	str	r3, [r7, #12]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	60fb      	str	r3, [r7, #12]
 80069a8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80069ae:	4619      	mov	r1, r3
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f7ff fdd5 	bl	8006560 <HAL_UARTEx_RxEventCallback>
 80069b6:	e002      	b.n	80069be <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f7fb f87b 	bl	8001ab4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80069be:	2300      	movs	r3, #0
 80069c0:	e002      	b.n	80069c8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80069c2:	2300      	movs	r3, #0
 80069c4:	e000      	b.n	80069c8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80069c6:	2302      	movs	r3, #2
  }
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	3730      	adds	r7, #48	@ 0x30
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}

080069d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b084      	sub	sp, #16
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	691b      	ldr	r3, [r3, #16]
 80069de:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	68da      	ldr	r2, [r3, #12]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	430a      	orrs	r2, r1
 80069ec:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	689a      	ldr	r2, [r3, #8]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	691b      	ldr	r3, [r3, #16]
 80069f6:	431a      	orrs	r2, r3
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	695b      	ldr	r3, [r3, #20]
 80069fc:	4313      	orrs	r3, r2
 80069fe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	68db      	ldr	r3, [r3, #12]
 8006a06:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8006a0a:	f023 030c 	bic.w	r3, r3, #12
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	6812      	ldr	r2, [r2, #0]
 8006a12:	68b9      	ldr	r1, [r7, #8]
 8006a14:	430b      	orrs	r3, r1
 8006a16:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	695b      	ldr	r3, [r3, #20]
 8006a1e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	699a      	ldr	r2, [r3, #24]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	430a      	orrs	r2, r1
 8006a2c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a2c      	ldr	r2, [pc, #176]	@ (8006ae4 <UART_SetConfig+0x114>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d103      	bne.n	8006a40 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006a38:	f7fe fd8c 	bl	8005554 <HAL_RCC_GetPCLK2Freq>
 8006a3c:	60f8      	str	r0, [r7, #12]
 8006a3e:	e002      	b.n	8006a46 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006a40:	f7fe fd74 	bl	800552c <HAL_RCC_GetPCLK1Freq>
 8006a44:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a46:	68fa      	ldr	r2, [r7, #12]
 8006a48:	4613      	mov	r3, r2
 8006a4a:	009b      	lsls	r3, r3, #2
 8006a4c:	4413      	add	r3, r2
 8006a4e:	009a      	lsls	r2, r3, #2
 8006a50:	441a      	add	r2, r3
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	009b      	lsls	r3, r3, #2
 8006a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a5c:	4a22      	ldr	r2, [pc, #136]	@ (8006ae8 <UART_SetConfig+0x118>)
 8006a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8006a62:	095b      	lsrs	r3, r3, #5
 8006a64:	0119      	lsls	r1, r3, #4
 8006a66:	68fa      	ldr	r2, [r7, #12]
 8006a68:	4613      	mov	r3, r2
 8006a6a:	009b      	lsls	r3, r3, #2
 8006a6c:	4413      	add	r3, r2
 8006a6e:	009a      	lsls	r2, r3, #2
 8006a70:	441a      	add	r2, r3
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	fbb2 f2f3 	udiv	r2, r2, r3
 8006a7c:	4b1a      	ldr	r3, [pc, #104]	@ (8006ae8 <UART_SetConfig+0x118>)
 8006a7e:	fba3 0302 	umull	r0, r3, r3, r2
 8006a82:	095b      	lsrs	r3, r3, #5
 8006a84:	2064      	movs	r0, #100	@ 0x64
 8006a86:	fb00 f303 	mul.w	r3, r0, r3
 8006a8a:	1ad3      	subs	r3, r2, r3
 8006a8c:	011b      	lsls	r3, r3, #4
 8006a8e:	3332      	adds	r3, #50	@ 0x32
 8006a90:	4a15      	ldr	r2, [pc, #84]	@ (8006ae8 <UART_SetConfig+0x118>)
 8006a92:	fba2 2303 	umull	r2, r3, r2, r3
 8006a96:	095b      	lsrs	r3, r3, #5
 8006a98:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006a9c:	4419      	add	r1, r3
 8006a9e:	68fa      	ldr	r2, [r7, #12]
 8006aa0:	4613      	mov	r3, r2
 8006aa2:	009b      	lsls	r3, r3, #2
 8006aa4:	4413      	add	r3, r2
 8006aa6:	009a      	lsls	r2, r3, #2
 8006aa8:	441a      	add	r2, r3
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	009b      	lsls	r3, r3, #2
 8006ab0:	fbb2 f2f3 	udiv	r2, r2, r3
 8006ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8006ae8 <UART_SetConfig+0x118>)
 8006ab6:	fba3 0302 	umull	r0, r3, r3, r2
 8006aba:	095b      	lsrs	r3, r3, #5
 8006abc:	2064      	movs	r0, #100	@ 0x64
 8006abe:	fb00 f303 	mul.w	r3, r0, r3
 8006ac2:	1ad3      	subs	r3, r2, r3
 8006ac4:	011b      	lsls	r3, r3, #4
 8006ac6:	3332      	adds	r3, #50	@ 0x32
 8006ac8:	4a07      	ldr	r2, [pc, #28]	@ (8006ae8 <UART_SetConfig+0x118>)
 8006aca:	fba2 2303 	umull	r2, r3, r2, r3
 8006ace:	095b      	lsrs	r3, r3, #5
 8006ad0:	f003 020f 	and.w	r2, r3, #15
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	440a      	add	r2, r1
 8006ada:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006adc:	bf00      	nop
 8006ade:	3710      	adds	r7, #16
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}
 8006ae4:	40013800 	.word	0x40013800
 8006ae8:	51eb851f 	.word	0x51eb851f

08006aec <calloc>:
 8006aec:	4b02      	ldr	r3, [pc, #8]	@ (8006af8 <calloc+0xc>)
 8006aee:	460a      	mov	r2, r1
 8006af0:	4601      	mov	r1, r0
 8006af2:	6818      	ldr	r0, [r3, #0]
 8006af4:	f000 b802 	b.w	8006afc <_calloc_r>
 8006af8:	20000030 	.word	0x20000030

08006afc <_calloc_r>:
 8006afc:	b570      	push	{r4, r5, r6, lr}
 8006afe:	fba1 5402 	umull	r5, r4, r1, r2
 8006b02:	b934      	cbnz	r4, 8006b12 <_calloc_r+0x16>
 8006b04:	4629      	mov	r1, r5
 8006b06:	f000 f837 	bl	8006b78 <_malloc_r>
 8006b0a:	4606      	mov	r6, r0
 8006b0c:	b928      	cbnz	r0, 8006b1a <_calloc_r+0x1e>
 8006b0e:	4630      	mov	r0, r6
 8006b10:	bd70      	pop	{r4, r5, r6, pc}
 8006b12:	220c      	movs	r2, #12
 8006b14:	2600      	movs	r6, #0
 8006b16:	6002      	str	r2, [r0, #0]
 8006b18:	e7f9      	b.n	8006b0e <_calloc_r+0x12>
 8006b1a:	462a      	mov	r2, r5
 8006b1c:	4621      	mov	r1, r4
 8006b1e:	f000 fe6e 	bl	80077fe <memset>
 8006b22:	e7f4      	b.n	8006b0e <_calloc_r+0x12>

08006b24 <malloc>:
 8006b24:	4b02      	ldr	r3, [pc, #8]	@ (8006b30 <malloc+0xc>)
 8006b26:	4601      	mov	r1, r0
 8006b28:	6818      	ldr	r0, [r3, #0]
 8006b2a:	f000 b825 	b.w	8006b78 <_malloc_r>
 8006b2e:	bf00      	nop
 8006b30:	20000030 	.word	0x20000030

08006b34 <sbrk_aligned>:
 8006b34:	b570      	push	{r4, r5, r6, lr}
 8006b36:	4e0f      	ldr	r6, [pc, #60]	@ (8006b74 <sbrk_aligned+0x40>)
 8006b38:	460c      	mov	r4, r1
 8006b3a:	6831      	ldr	r1, [r6, #0]
 8006b3c:	4605      	mov	r5, r0
 8006b3e:	b911      	cbnz	r1, 8006b46 <sbrk_aligned+0x12>
 8006b40:	f000 feb4 	bl	80078ac <_sbrk_r>
 8006b44:	6030      	str	r0, [r6, #0]
 8006b46:	4621      	mov	r1, r4
 8006b48:	4628      	mov	r0, r5
 8006b4a:	f000 feaf 	bl	80078ac <_sbrk_r>
 8006b4e:	1c43      	adds	r3, r0, #1
 8006b50:	d103      	bne.n	8006b5a <sbrk_aligned+0x26>
 8006b52:	f04f 34ff 	mov.w	r4, #4294967295
 8006b56:	4620      	mov	r0, r4
 8006b58:	bd70      	pop	{r4, r5, r6, pc}
 8006b5a:	1cc4      	adds	r4, r0, #3
 8006b5c:	f024 0403 	bic.w	r4, r4, #3
 8006b60:	42a0      	cmp	r0, r4
 8006b62:	d0f8      	beq.n	8006b56 <sbrk_aligned+0x22>
 8006b64:	1a21      	subs	r1, r4, r0
 8006b66:	4628      	mov	r0, r5
 8006b68:	f000 fea0 	bl	80078ac <_sbrk_r>
 8006b6c:	3001      	adds	r0, #1
 8006b6e:	d1f2      	bne.n	8006b56 <sbrk_aligned+0x22>
 8006b70:	e7ef      	b.n	8006b52 <sbrk_aligned+0x1e>
 8006b72:	bf00      	nop
 8006b74:	200007f4 	.word	0x200007f4

08006b78 <_malloc_r>:
 8006b78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b7c:	1ccd      	adds	r5, r1, #3
 8006b7e:	f025 0503 	bic.w	r5, r5, #3
 8006b82:	3508      	adds	r5, #8
 8006b84:	2d0c      	cmp	r5, #12
 8006b86:	bf38      	it	cc
 8006b88:	250c      	movcc	r5, #12
 8006b8a:	2d00      	cmp	r5, #0
 8006b8c:	4606      	mov	r6, r0
 8006b8e:	db01      	blt.n	8006b94 <_malloc_r+0x1c>
 8006b90:	42a9      	cmp	r1, r5
 8006b92:	d904      	bls.n	8006b9e <_malloc_r+0x26>
 8006b94:	230c      	movs	r3, #12
 8006b96:	6033      	str	r3, [r6, #0]
 8006b98:	2000      	movs	r0, #0
 8006b9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b9e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006c74 <_malloc_r+0xfc>
 8006ba2:	f000 f869 	bl	8006c78 <__malloc_lock>
 8006ba6:	f8d8 3000 	ldr.w	r3, [r8]
 8006baa:	461c      	mov	r4, r3
 8006bac:	bb44      	cbnz	r4, 8006c00 <_malloc_r+0x88>
 8006bae:	4629      	mov	r1, r5
 8006bb0:	4630      	mov	r0, r6
 8006bb2:	f7ff ffbf 	bl	8006b34 <sbrk_aligned>
 8006bb6:	1c43      	adds	r3, r0, #1
 8006bb8:	4604      	mov	r4, r0
 8006bba:	d158      	bne.n	8006c6e <_malloc_r+0xf6>
 8006bbc:	f8d8 4000 	ldr.w	r4, [r8]
 8006bc0:	4627      	mov	r7, r4
 8006bc2:	2f00      	cmp	r7, #0
 8006bc4:	d143      	bne.n	8006c4e <_malloc_r+0xd6>
 8006bc6:	2c00      	cmp	r4, #0
 8006bc8:	d04b      	beq.n	8006c62 <_malloc_r+0xea>
 8006bca:	6823      	ldr	r3, [r4, #0]
 8006bcc:	4639      	mov	r1, r7
 8006bce:	4630      	mov	r0, r6
 8006bd0:	eb04 0903 	add.w	r9, r4, r3
 8006bd4:	f000 fe6a 	bl	80078ac <_sbrk_r>
 8006bd8:	4581      	cmp	r9, r0
 8006bda:	d142      	bne.n	8006c62 <_malloc_r+0xea>
 8006bdc:	6821      	ldr	r1, [r4, #0]
 8006bde:	4630      	mov	r0, r6
 8006be0:	1a6d      	subs	r5, r5, r1
 8006be2:	4629      	mov	r1, r5
 8006be4:	f7ff ffa6 	bl	8006b34 <sbrk_aligned>
 8006be8:	3001      	adds	r0, #1
 8006bea:	d03a      	beq.n	8006c62 <_malloc_r+0xea>
 8006bec:	6823      	ldr	r3, [r4, #0]
 8006bee:	442b      	add	r3, r5
 8006bf0:	6023      	str	r3, [r4, #0]
 8006bf2:	f8d8 3000 	ldr.w	r3, [r8]
 8006bf6:	685a      	ldr	r2, [r3, #4]
 8006bf8:	bb62      	cbnz	r2, 8006c54 <_malloc_r+0xdc>
 8006bfa:	f8c8 7000 	str.w	r7, [r8]
 8006bfe:	e00f      	b.n	8006c20 <_malloc_r+0xa8>
 8006c00:	6822      	ldr	r2, [r4, #0]
 8006c02:	1b52      	subs	r2, r2, r5
 8006c04:	d420      	bmi.n	8006c48 <_malloc_r+0xd0>
 8006c06:	2a0b      	cmp	r2, #11
 8006c08:	d917      	bls.n	8006c3a <_malloc_r+0xc2>
 8006c0a:	1961      	adds	r1, r4, r5
 8006c0c:	42a3      	cmp	r3, r4
 8006c0e:	6025      	str	r5, [r4, #0]
 8006c10:	bf18      	it	ne
 8006c12:	6059      	strne	r1, [r3, #4]
 8006c14:	6863      	ldr	r3, [r4, #4]
 8006c16:	bf08      	it	eq
 8006c18:	f8c8 1000 	streq.w	r1, [r8]
 8006c1c:	5162      	str	r2, [r4, r5]
 8006c1e:	604b      	str	r3, [r1, #4]
 8006c20:	4630      	mov	r0, r6
 8006c22:	f000 f82f 	bl	8006c84 <__malloc_unlock>
 8006c26:	f104 000b 	add.w	r0, r4, #11
 8006c2a:	1d23      	adds	r3, r4, #4
 8006c2c:	f020 0007 	bic.w	r0, r0, #7
 8006c30:	1ac2      	subs	r2, r0, r3
 8006c32:	bf1c      	itt	ne
 8006c34:	1a1b      	subne	r3, r3, r0
 8006c36:	50a3      	strne	r3, [r4, r2]
 8006c38:	e7af      	b.n	8006b9a <_malloc_r+0x22>
 8006c3a:	6862      	ldr	r2, [r4, #4]
 8006c3c:	42a3      	cmp	r3, r4
 8006c3e:	bf0c      	ite	eq
 8006c40:	f8c8 2000 	streq.w	r2, [r8]
 8006c44:	605a      	strne	r2, [r3, #4]
 8006c46:	e7eb      	b.n	8006c20 <_malloc_r+0xa8>
 8006c48:	4623      	mov	r3, r4
 8006c4a:	6864      	ldr	r4, [r4, #4]
 8006c4c:	e7ae      	b.n	8006bac <_malloc_r+0x34>
 8006c4e:	463c      	mov	r4, r7
 8006c50:	687f      	ldr	r7, [r7, #4]
 8006c52:	e7b6      	b.n	8006bc2 <_malloc_r+0x4a>
 8006c54:	461a      	mov	r2, r3
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	42a3      	cmp	r3, r4
 8006c5a:	d1fb      	bne.n	8006c54 <_malloc_r+0xdc>
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	6053      	str	r3, [r2, #4]
 8006c60:	e7de      	b.n	8006c20 <_malloc_r+0xa8>
 8006c62:	230c      	movs	r3, #12
 8006c64:	4630      	mov	r0, r6
 8006c66:	6033      	str	r3, [r6, #0]
 8006c68:	f000 f80c 	bl	8006c84 <__malloc_unlock>
 8006c6c:	e794      	b.n	8006b98 <_malloc_r+0x20>
 8006c6e:	6005      	str	r5, [r0, #0]
 8006c70:	e7d6      	b.n	8006c20 <_malloc_r+0xa8>
 8006c72:	bf00      	nop
 8006c74:	200007f8 	.word	0x200007f8

08006c78 <__malloc_lock>:
 8006c78:	4801      	ldr	r0, [pc, #4]	@ (8006c80 <__malloc_lock+0x8>)
 8006c7a:	f000 be64 	b.w	8007946 <__retarget_lock_acquire_recursive>
 8006c7e:	bf00      	nop
 8006c80:	2000093c 	.word	0x2000093c

08006c84 <__malloc_unlock>:
 8006c84:	4801      	ldr	r0, [pc, #4]	@ (8006c8c <__malloc_unlock+0x8>)
 8006c86:	f000 be5f 	b.w	8007948 <__retarget_lock_release_recursive>
 8006c8a:	bf00      	nop
 8006c8c:	2000093c 	.word	0x2000093c

08006c90 <__cvt>:
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c96:	461d      	mov	r5, r3
 8006c98:	bfbb      	ittet	lt
 8006c9a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8006c9e:	461d      	movlt	r5, r3
 8006ca0:	2300      	movge	r3, #0
 8006ca2:	232d      	movlt	r3, #45	@ 0x2d
 8006ca4:	b088      	sub	sp, #32
 8006ca6:	4614      	mov	r4, r2
 8006ca8:	bfb8      	it	lt
 8006caa:	4614      	movlt	r4, r2
 8006cac:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006cae:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8006cb0:	7013      	strb	r3, [r2, #0]
 8006cb2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006cb4:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8006cb8:	f023 0820 	bic.w	r8, r3, #32
 8006cbc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006cc0:	d005      	beq.n	8006cce <__cvt+0x3e>
 8006cc2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006cc6:	d100      	bne.n	8006cca <__cvt+0x3a>
 8006cc8:	3601      	adds	r6, #1
 8006cca:	2302      	movs	r3, #2
 8006ccc:	e000      	b.n	8006cd0 <__cvt+0x40>
 8006cce:	2303      	movs	r3, #3
 8006cd0:	aa07      	add	r2, sp, #28
 8006cd2:	9204      	str	r2, [sp, #16]
 8006cd4:	aa06      	add	r2, sp, #24
 8006cd6:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006cda:	e9cd 3600 	strd	r3, r6, [sp]
 8006cde:	4622      	mov	r2, r4
 8006ce0:	462b      	mov	r3, r5
 8006ce2:	f000 fed1 	bl	8007a88 <_dtoa_r>
 8006ce6:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006cea:	4607      	mov	r7, r0
 8006cec:	d119      	bne.n	8006d22 <__cvt+0x92>
 8006cee:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006cf0:	07db      	lsls	r3, r3, #31
 8006cf2:	d50e      	bpl.n	8006d12 <__cvt+0x82>
 8006cf4:	eb00 0906 	add.w	r9, r0, r6
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	4620      	mov	r0, r4
 8006cfe:	4629      	mov	r1, r5
 8006d00:	f7f9 fe5c 	bl	80009bc <__aeabi_dcmpeq>
 8006d04:	b108      	cbz	r0, 8006d0a <__cvt+0x7a>
 8006d06:	f8cd 901c 	str.w	r9, [sp, #28]
 8006d0a:	2230      	movs	r2, #48	@ 0x30
 8006d0c:	9b07      	ldr	r3, [sp, #28]
 8006d0e:	454b      	cmp	r3, r9
 8006d10:	d31e      	bcc.n	8006d50 <__cvt+0xc0>
 8006d12:	4638      	mov	r0, r7
 8006d14:	9b07      	ldr	r3, [sp, #28]
 8006d16:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006d18:	1bdb      	subs	r3, r3, r7
 8006d1a:	6013      	str	r3, [r2, #0]
 8006d1c:	b008      	add	sp, #32
 8006d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d22:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006d26:	eb00 0906 	add.w	r9, r0, r6
 8006d2a:	d1e5      	bne.n	8006cf8 <__cvt+0x68>
 8006d2c:	7803      	ldrb	r3, [r0, #0]
 8006d2e:	2b30      	cmp	r3, #48	@ 0x30
 8006d30:	d10a      	bne.n	8006d48 <__cvt+0xb8>
 8006d32:	2200      	movs	r2, #0
 8006d34:	2300      	movs	r3, #0
 8006d36:	4620      	mov	r0, r4
 8006d38:	4629      	mov	r1, r5
 8006d3a:	f7f9 fe3f 	bl	80009bc <__aeabi_dcmpeq>
 8006d3e:	b918      	cbnz	r0, 8006d48 <__cvt+0xb8>
 8006d40:	f1c6 0601 	rsb	r6, r6, #1
 8006d44:	f8ca 6000 	str.w	r6, [sl]
 8006d48:	f8da 3000 	ldr.w	r3, [sl]
 8006d4c:	4499      	add	r9, r3
 8006d4e:	e7d3      	b.n	8006cf8 <__cvt+0x68>
 8006d50:	1c59      	adds	r1, r3, #1
 8006d52:	9107      	str	r1, [sp, #28]
 8006d54:	701a      	strb	r2, [r3, #0]
 8006d56:	e7d9      	b.n	8006d0c <__cvt+0x7c>

08006d58 <__exponent>:
 8006d58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d5a:	2900      	cmp	r1, #0
 8006d5c:	bfb6      	itet	lt
 8006d5e:	232d      	movlt	r3, #45	@ 0x2d
 8006d60:	232b      	movge	r3, #43	@ 0x2b
 8006d62:	4249      	neglt	r1, r1
 8006d64:	2909      	cmp	r1, #9
 8006d66:	7002      	strb	r2, [r0, #0]
 8006d68:	7043      	strb	r3, [r0, #1]
 8006d6a:	dd29      	ble.n	8006dc0 <__exponent+0x68>
 8006d6c:	f10d 0307 	add.w	r3, sp, #7
 8006d70:	461d      	mov	r5, r3
 8006d72:	270a      	movs	r7, #10
 8006d74:	fbb1 f6f7 	udiv	r6, r1, r7
 8006d78:	461a      	mov	r2, r3
 8006d7a:	fb07 1416 	mls	r4, r7, r6, r1
 8006d7e:	3430      	adds	r4, #48	@ 0x30
 8006d80:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006d84:	460c      	mov	r4, r1
 8006d86:	2c63      	cmp	r4, #99	@ 0x63
 8006d88:	4631      	mov	r1, r6
 8006d8a:	f103 33ff 	add.w	r3, r3, #4294967295
 8006d8e:	dcf1      	bgt.n	8006d74 <__exponent+0x1c>
 8006d90:	3130      	adds	r1, #48	@ 0x30
 8006d92:	1e94      	subs	r4, r2, #2
 8006d94:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006d98:	4623      	mov	r3, r4
 8006d9a:	1c41      	adds	r1, r0, #1
 8006d9c:	42ab      	cmp	r3, r5
 8006d9e:	d30a      	bcc.n	8006db6 <__exponent+0x5e>
 8006da0:	f10d 0309 	add.w	r3, sp, #9
 8006da4:	1a9b      	subs	r3, r3, r2
 8006da6:	42ac      	cmp	r4, r5
 8006da8:	bf88      	it	hi
 8006daa:	2300      	movhi	r3, #0
 8006dac:	3302      	adds	r3, #2
 8006dae:	4403      	add	r3, r0
 8006db0:	1a18      	subs	r0, r3, r0
 8006db2:	b003      	add	sp, #12
 8006db4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006db6:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006dba:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006dbe:	e7ed      	b.n	8006d9c <__exponent+0x44>
 8006dc0:	2330      	movs	r3, #48	@ 0x30
 8006dc2:	3130      	adds	r1, #48	@ 0x30
 8006dc4:	7083      	strb	r3, [r0, #2]
 8006dc6:	70c1      	strb	r1, [r0, #3]
 8006dc8:	1d03      	adds	r3, r0, #4
 8006dca:	e7f1      	b.n	8006db0 <__exponent+0x58>

08006dcc <_printf_float>:
 8006dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dd0:	b091      	sub	sp, #68	@ 0x44
 8006dd2:	460c      	mov	r4, r1
 8006dd4:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8006dd8:	4616      	mov	r6, r2
 8006dda:	461f      	mov	r7, r3
 8006ddc:	4605      	mov	r5, r0
 8006dde:	f000 fd2d 	bl	800783c <_localeconv_r>
 8006de2:	6803      	ldr	r3, [r0, #0]
 8006de4:	4618      	mov	r0, r3
 8006de6:	9308      	str	r3, [sp, #32]
 8006de8:	f7f9 f9bc 	bl	8000164 <strlen>
 8006dec:	2300      	movs	r3, #0
 8006dee:	930e      	str	r3, [sp, #56]	@ 0x38
 8006df0:	f8d8 3000 	ldr.w	r3, [r8]
 8006df4:	9009      	str	r0, [sp, #36]	@ 0x24
 8006df6:	3307      	adds	r3, #7
 8006df8:	f023 0307 	bic.w	r3, r3, #7
 8006dfc:	f103 0208 	add.w	r2, r3, #8
 8006e00:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006e04:	f8d4 b000 	ldr.w	fp, [r4]
 8006e08:	f8c8 2000 	str.w	r2, [r8]
 8006e0c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006e10:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006e14:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006e16:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8006e1a:	f04f 32ff 	mov.w	r2, #4294967295
 8006e1e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006e22:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006e26:	4b9c      	ldr	r3, [pc, #624]	@ (8007098 <_printf_float+0x2cc>)
 8006e28:	f7f9 fdfa 	bl	8000a20 <__aeabi_dcmpun>
 8006e2c:	bb70      	cbnz	r0, 8006e8c <_printf_float+0xc0>
 8006e2e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006e32:	f04f 32ff 	mov.w	r2, #4294967295
 8006e36:	4b98      	ldr	r3, [pc, #608]	@ (8007098 <_printf_float+0x2cc>)
 8006e38:	f7f9 fdd4 	bl	80009e4 <__aeabi_dcmple>
 8006e3c:	bb30      	cbnz	r0, 8006e8c <_printf_float+0xc0>
 8006e3e:	2200      	movs	r2, #0
 8006e40:	2300      	movs	r3, #0
 8006e42:	4640      	mov	r0, r8
 8006e44:	4649      	mov	r1, r9
 8006e46:	f7f9 fdc3 	bl	80009d0 <__aeabi_dcmplt>
 8006e4a:	b110      	cbz	r0, 8006e52 <_printf_float+0x86>
 8006e4c:	232d      	movs	r3, #45	@ 0x2d
 8006e4e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006e52:	4a92      	ldr	r2, [pc, #584]	@ (800709c <_printf_float+0x2d0>)
 8006e54:	4b92      	ldr	r3, [pc, #584]	@ (80070a0 <_printf_float+0x2d4>)
 8006e56:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006e5a:	bf8c      	ite	hi
 8006e5c:	4690      	movhi	r8, r2
 8006e5e:	4698      	movls	r8, r3
 8006e60:	2303      	movs	r3, #3
 8006e62:	f04f 0900 	mov.w	r9, #0
 8006e66:	6123      	str	r3, [r4, #16]
 8006e68:	f02b 0304 	bic.w	r3, fp, #4
 8006e6c:	6023      	str	r3, [r4, #0]
 8006e6e:	4633      	mov	r3, r6
 8006e70:	4621      	mov	r1, r4
 8006e72:	4628      	mov	r0, r5
 8006e74:	9700      	str	r7, [sp, #0]
 8006e76:	aa0f      	add	r2, sp, #60	@ 0x3c
 8006e78:	f000 f9d4 	bl	8007224 <_printf_common>
 8006e7c:	3001      	adds	r0, #1
 8006e7e:	f040 8090 	bne.w	8006fa2 <_printf_float+0x1d6>
 8006e82:	f04f 30ff 	mov.w	r0, #4294967295
 8006e86:	b011      	add	sp, #68	@ 0x44
 8006e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e8c:	4642      	mov	r2, r8
 8006e8e:	464b      	mov	r3, r9
 8006e90:	4640      	mov	r0, r8
 8006e92:	4649      	mov	r1, r9
 8006e94:	f7f9 fdc4 	bl	8000a20 <__aeabi_dcmpun>
 8006e98:	b148      	cbz	r0, 8006eae <_printf_float+0xe2>
 8006e9a:	464b      	mov	r3, r9
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	bfb8      	it	lt
 8006ea0:	232d      	movlt	r3, #45	@ 0x2d
 8006ea2:	4a80      	ldr	r2, [pc, #512]	@ (80070a4 <_printf_float+0x2d8>)
 8006ea4:	bfb8      	it	lt
 8006ea6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006eaa:	4b7f      	ldr	r3, [pc, #508]	@ (80070a8 <_printf_float+0x2dc>)
 8006eac:	e7d3      	b.n	8006e56 <_printf_float+0x8a>
 8006eae:	6863      	ldr	r3, [r4, #4]
 8006eb0:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8006eb4:	1c5a      	adds	r2, r3, #1
 8006eb6:	d13f      	bne.n	8006f38 <_printf_float+0x16c>
 8006eb8:	2306      	movs	r3, #6
 8006eba:	6063      	str	r3, [r4, #4]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8006ec2:	6023      	str	r3, [r4, #0]
 8006ec4:	9206      	str	r2, [sp, #24]
 8006ec6:	aa0e      	add	r2, sp, #56	@ 0x38
 8006ec8:	e9cd a204 	strd	sl, r2, [sp, #16]
 8006ecc:	aa0d      	add	r2, sp, #52	@ 0x34
 8006ece:	9203      	str	r2, [sp, #12]
 8006ed0:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8006ed4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006ed8:	6863      	ldr	r3, [r4, #4]
 8006eda:	4642      	mov	r2, r8
 8006edc:	9300      	str	r3, [sp, #0]
 8006ede:	4628      	mov	r0, r5
 8006ee0:	464b      	mov	r3, r9
 8006ee2:	910a      	str	r1, [sp, #40]	@ 0x28
 8006ee4:	f7ff fed4 	bl	8006c90 <__cvt>
 8006ee8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006eea:	4680      	mov	r8, r0
 8006eec:	2947      	cmp	r1, #71	@ 0x47
 8006eee:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006ef0:	d128      	bne.n	8006f44 <_printf_float+0x178>
 8006ef2:	1cc8      	adds	r0, r1, #3
 8006ef4:	db02      	blt.n	8006efc <_printf_float+0x130>
 8006ef6:	6863      	ldr	r3, [r4, #4]
 8006ef8:	4299      	cmp	r1, r3
 8006efa:	dd40      	ble.n	8006f7e <_printf_float+0x1b2>
 8006efc:	f1aa 0a02 	sub.w	sl, sl, #2
 8006f00:	fa5f fa8a 	uxtb.w	sl, sl
 8006f04:	4652      	mov	r2, sl
 8006f06:	3901      	subs	r1, #1
 8006f08:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006f0c:	910d      	str	r1, [sp, #52]	@ 0x34
 8006f0e:	f7ff ff23 	bl	8006d58 <__exponent>
 8006f12:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006f14:	4681      	mov	r9, r0
 8006f16:	1813      	adds	r3, r2, r0
 8006f18:	2a01      	cmp	r2, #1
 8006f1a:	6123      	str	r3, [r4, #16]
 8006f1c:	dc02      	bgt.n	8006f24 <_printf_float+0x158>
 8006f1e:	6822      	ldr	r2, [r4, #0]
 8006f20:	07d2      	lsls	r2, r2, #31
 8006f22:	d501      	bpl.n	8006f28 <_printf_float+0x15c>
 8006f24:	3301      	adds	r3, #1
 8006f26:	6123      	str	r3, [r4, #16]
 8006f28:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d09e      	beq.n	8006e6e <_printf_float+0xa2>
 8006f30:	232d      	movs	r3, #45	@ 0x2d
 8006f32:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006f36:	e79a      	b.n	8006e6e <_printf_float+0xa2>
 8006f38:	2947      	cmp	r1, #71	@ 0x47
 8006f3a:	d1bf      	bne.n	8006ebc <_printf_float+0xf0>
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d1bd      	bne.n	8006ebc <_printf_float+0xf0>
 8006f40:	2301      	movs	r3, #1
 8006f42:	e7ba      	b.n	8006eba <_printf_float+0xee>
 8006f44:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006f48:	d9dc      	bls.n	8006f04 <_printf_float+0x138>
 8006f4a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006f4e:	d118      	bne.n	8006f82 <_printf_float+0x1b6>
 8006f50:	2900      	cmp	r1, #0
 8006f52:	6863      	ldr	r3, [r4, #4]
 8006f54:	dd0b      	ble.n	8006f6e <_printf_float+0x1a2>
 8006f56:	6121      	str	r1, [r4, #16]
 8006f58:	b913      	cbnz	r3, 8006f60 <_printf_float+0x194>
 8006f5a:	6822      	ldr	r2, [r4, #0]
 8006f5c:	07d0      	lsls	r0, r2, #31
 8006f5e:	d502      	bpl.n	8006f66 <_printf_float+0x19a>
 8006f60:	3301      	adds	r3, #1
 8006f62:	440b      	add	r3, r1
 8006f64:	6123      	str	r3, [r4, #16]
 8006f66:	f04f 0900 	mov.w	r9, #0
 8006f6a:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006f6c:	e7dc      	b.n	8006f28 <_printf_float+0x15c>
 8006f6e:	b913      	cbnz	r3, 8006f76 <_printf_float+0x1aa>
 8006f70:	6822      	ldr	r2, [r4, #0]
 8006f72:	07d2      	lsls	r2, r2, #31
 8006f74:	d501      	bpl.n	8006f7a <_printf_float+0x1ae>
 8006f76:	3302      	adds	r3, #2
 8006f78:	e7f4      	b.n	8006f64 <_printf_float+0x198>
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	e7f2      	b.n	8006f64 <_printf_float+0x198>
 8006f7e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006f82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f84:	4299      	cmp	r1, r3
 8006f86:	db05      	blt.n	8006f94 <_printf_float+0x1c8>
 8006f88:	6823      	ldr	r3, [r4, #0]
 8006f8a:	6121      	str	r1, [r4, #16]
 8006f8c:	07d8      	lsls	r0, r3, #31
 8006f8e:	d5ea      	bpl.n	8006f66 <_printf_float+0x19a>
 8006f90:	1c4b      	adds	r3, r1, #1
 8006f92:	e7e7      	b.n	8006f64 <_printf_float+0x198>
 8006f94:	2900      	cmp	r1, #0
 8006f96:	bfcc      	ite	gt
 8006f98:	2201      	movgt	r2, #1
 8006f9a:	f1c1 0202 	rsble	r2, r1, #2
 8006f9e:	4413      	add	r3, r2
 8006fa0:	e7e0      	b.n	8006f64 <_printf_float+0x198>
 8006fa2:	6823      	ldr	r3, [r4, #0]
 8006fa4:	055a      	lsls	r2, r3, #21
 8006fa6:	d407      	bmi.n	8006fb8 <_printf_float+0x1ec>
 8006fa8:	6923      	ldr	r3, [r4, #16]
 8006faa:	4642      	mov	r2, r8
 8006fac:	4631      	mov	r1, r6
 8006fae:	4628      	mov	r0, r5
 8006fb0:	47b8      	blx	r7
 8006fb2:	3001      	adds	r0, #1
 8006fb4:	d12b      	bne.n	800700e <_printf_float+0x242>
 8006fb6:	e764      	b.n	8006e82 <_printf_float+0xb6>
 8006fb8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006fbc:	f240 80dc 	bls.w	8007178 <_printf_float+0x3ac>
 8006fc0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	f7f9 fcf8 	bl	80009bc <__aeabi_dcmpeq>
 8006fcc:	2800      	cmp	r0, #0
 8006fce:	d033      	beq.n	8007038 <_printf_float+0x26c>
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	4631      	mov	r1, r6
 8006fd4:	4628      	mov	r0, r5
 8006fd6:	4a35      	ldr	r2, [pc, #212]	@ (80070ac <_printf_float+0x2e0>)
 8006fd8:	47b8      	blx	r7
 8006fda:	3001      	adds	r0, #1
 8006fdc:	f43f af51 	beq.w	8006e82 <_printf_float+0xb6>
 8006fe0:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8006fe4:	4543      	cmp	r3, r8
 8006fe6:	db02      	blt.n	8006fee <_printf_float+0x222>
 8006fe8:	6823      	ldr	r3, [r4, #0]
 8006fea:	07d8      	lsls	r0, r3, #31
 8006fec:	d50f      	bpl.n	800700e <_printf_float+0x242>
 8006fee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006ff2:	4631      	mov	r1, r6
 8006ff4:	4628      	mov	r0, r5
 8006ff6:	47b8      	blx	r7
 8006ff8:	3001      	adds	r0, #1
 8006ffa:	f43f af42 	beq.w	8006e82 <_printf_float+0xb6>
 8006ffe:	f04f 0900 	mov.w	r9, #0
 8007002:	f108 38ff 	add.w	r8, r8, #4294967295
 8007006:	f104 0a1a 	add.w	sl, r4, #26
 800700a:	45c8      	cmp	r8, r9
 800700c:	dc09      	bgt.n	8007022 <_printf_float+0x256>
 800700e:	6823      	ldr	r3, [r4, #0]
 8007010:	079b      	lsls	r3, r3, #30
 8007012:	f100 8102 	bmi.w	800721a <_printf_float+0x44e>
 8007016:	68e0      	ldr	r0, [r4, #12]
 8007018:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800701a:	4298      	cmp	r0, r3
 800701c:	bfb8      	it	lt
 800701e:	4618      	movlt	r0, r3
 8007020:	e731      	b.n	8006e86 <_printf_float+0xba>
 8007022:	2301      	movs	r3, #1
 8007024:	4652      	mov	r2, sl
 8007026:	4631      	mov	r1, r6
 8007028:	4628      	mov	r0, r5
 800702a:	47b8      	blx	r7
 800702c:	3001      	adds	r0, #1
 800702e:	f43f af28 	beq.w	8006e82 <_printf_float+0xb6>
 8007032:	f109 0901 	add.w	r9, r9, #1
 8007036:	e7e8      	b.n	800700a <_printf_float+0x23e>
 8007038:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800703a:	2b00      	cmp	r3, #0
 800703c:	dc38      	bgt.n	80070b0 <_printf_float+0x2e4>
 800703e:	2301      	movs	r3, #1
 8007040:	4631      	mov	r1, r6
 8007042:	4628      	mov	r0, r5
 8007044:	4a19      	ldr	r2, [pc, #100]	@ (80070ac <_printf_float+0x2e0>)
 8007046:	47b8      	blx	r7
 8007048:	3001      	adds	r0, #1
 800704a:	f43f af1a 	beq.w	8006e82 <_printf_float+0xb6>
 800704e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8007052:	ea59 0303 	orrs.w	r3, r9, r3
 8007056:	d102      	bne.n	800705e <_printf_float+0x292>
 8007058:	6823      	ldr	r3, [r4, #0]
 800705a:	07d9      	lsls	r1, r3, #31
 800705c:	d5d7      	bpl.n	800700e <_printf_float+0x242>
 800705e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007062:	4631      	mov	r1, r6
 8007064:	4628      	mov	r0, r5
 8007066:	47b8      	blx	r7
 8007068:	3001      	adds	r0, #1
 800706a:	f43f af0a 	beq.w	8006e82 <_printf_float+0xb6>
 800706e:	f04f 0a00 	mov.w	sl, #0
 8007072:	f104 0b1a 	add.w	fp, r4, #26
 8007076:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007078:	425b      	negs	r3, r3
 800707a:	4553      	cmp	r3, sl
 800707c:	dc01      	bgt.n	8007082 <_printf_float+0x2b6>
 800707e:	464b      	mov	r3, r9
 8007080:	e793      	b.n	8006faa <_printf_float+0x1de>
 8007082:	2301      	movs	r3, #1
 8007084:	465a      	mov	r2, fp
 8007086:	4631      	mov	r1, r6
 8007088:	4628      	mov	r0, r5
 800708a:	47b8      	blx	r7
 800708c:	3001      	adds	r0, #1
 800708e:	f43f aef8 	beq.w	8006e82 <_printf_float+0xb6>
 8007092:	f10a 0a01 	add.w	sl, sl, #1
 8007096:	e7ee      	b.n	8007076 <_printf_float+0x2aa>
 8007098:	7fefffff 	.word	0x7fefffff
 800709c:	0800a10a 	.word	0x0800a10a
 80070a0:	0800a106 	.word	0x0800a106
 80070a4:	0800a112 	.word	0x0800a112
 80070a8:	0800a10e 	.word	0x0800a10e
 80070ac:	0800a116 	.word	0x0800a116
 80070b0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80070b2:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80070b6:	4553      	cmp	r3, sl
 80070b8:	bfa8      	it	ge
 80070ba:	4653      	movge	r3, sl
 80070bc:	2b00      	cmp	r3, #0
 80070be:	4699      	mov	r9, r3
 80070c0:	dc36      	bgt.n	8007130 <_printf_float+0x364>
 80070c2:	f04f 0b00 	mov.w	fp, #0
 80070c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80070ca:	f104 021a 	add.w	r2, r4, #26
 80070ce:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80070d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80070d2:	eba3 0309 	sub.w	r3, r3, r9
 80070d6:	455b      	cmp	r3, fp
 80070d8:	dc31      	bgt.n	800713e <_printf_float+0x372>
 80070da:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80070dc:	459a      	cmp	sl, r3
 80070de:	dc3a      	bgt.n	8007156 <_printf_float+0x38a>
 80070e0:	6823      	ldr	r3, [r4, #0]
 80070e2:	07da      	lsls	r2, r3, #31
 80070e4:	d437      	bmi.n	8007156 <_printf_float+0x38a>
 80070e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80070e8:	ebaa 0903 	sub.w	r9, sl, r3
 80070ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80070ee:	ebaa 0303 	sub.w	r3, sl, r3
 80070f2:	4599      	cmp	r9, r3
 80070f4:	bfa8      	it	ge
 80070f6:	4699      	movge	r9, r3
 80070f8:	f1b9 0f00 	cmp.w	r9, #0
 80070fc:	dc33      	bgt.n	8007166 <_printf_float+0x39a>
 80070fe:	f04f 0800 	mov.w	r8, #0
 8007102:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007106:	f104 0b1a 	add.w	fp, r4, #26
 800710a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800710c:	ebaa 0303 	sub.w	r3, sl, r3
 8007110:	eba3 0309 	sub.w	r3, r3, r9
 8007114:	4543      	cmp	r3, r8
 8007116:	f77f af7a 	ble.w	800700e <_printf_float+0x242>
 800711a:	2301      	movs	r3, #1
 800711c:	465a      	mov	r2, fp
 800711e:	4631      	mov	r1, r6
 8007120:	4628      	mov	r0, r5
 8007122:	47b8      	blx	r7
 8007124:	3001      	adds	r0, #1
 8007126:	f43f aeac 	beq.w	8006e82 <_printf_float+0xb6>
 800712a:	f108 0801 	add.w	r8, r8, #1
 800712e:	e7ec      	b.n	800710a <_printf_float+0x33e>
 8007130:	4642      	mov	r2, r8
 8007132:	4631      	mov	r1, r6
 8007134:	4628      	mov	r0, r5
 8007136:	47b8      	blx	r7
 8007138:	3001      	adds	r0, #1
 800713a:	d1c2      	bne.n	80070c2 <_printf_float+0x2f6>
 800713c:	e6a1      	b.n	8006e82 <_printf_float+0xb6>
 800713e:	2301      	movs	r3, #1
 8007140:	4631      	mov	r1, r6
 8007142:	4628      	mov	r0, r5
 8007144:	920a      	str	r2, [sp, #40]	@ 0x28
 8007146:	47b8      	blx	r7
 8007148:	3001      	adds	r0, #1
 800714a:	f43f ae9a 	beq.w	8006e82 <_printf_float+0xb6>
 800714e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007150:	f10b 0b01 	add.w	fp, fp, #1
 8007154:	e7bb      	b.n	80070ce <_printf_float+0x302>
 8007156:	4631      	mov	r1, r6
 8007158:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800715c:	4628      	mov	r0, r5
 800715e:	47b8      	blx	r7
 8007160:	3001      	adds	r0, #1
 8007162:	d1c0      	bne.n	80070e6 <_printf_float+0x31a>
 8007164:	e68d      	b.n	8006e82 <_printf_float+0xb6>
 8007166:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007168:	464b      	mov	r3, r9
 800716a:	4631      	mov	r1, r6
 800716c:	4628      	mov	r0, r5
 800716e:	4442      	add	r2, r8
 8007170:	47b8      	blx	r7
 8007172:	3001      	adds	r0, #1
 8007174:	d1c3      	bne.n	80070fe <_printf_float+0x332>
 8007176:	e684      	b.n	8006e82 <_printf_float+0xb6>
 8007178:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800717c:	f1ba 0f01 	cmp.w	sl, #1
 8007180:	dc01      	bgt.n	8007186 <_printf_float+0x3ba>
 8007182:	07db      	lsls	r3, r3, #31
 8007184:	d536      	bpl.n	80071f4 <_printf_float+0x428>
 8007186:	2301      	movs	r3, #1
 8007188:	4642      	mov	r2, r8
 800718a:	4631      	mov	r1, r6
 800718c:	4628      	mov	r0, r5
 800718e:	47b8      	blx	r7
 8007190:	3001      	adds	r0, #1
 8007192:	f43f ae76 	beq.w	8006e82 <_printf_float+0xb6>
 8007196:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800719a:	4631      	mov	r1, r6
 800719c:	4628      	mov	r0, r5
 800719e:	47b8      	blx	r7
 80071a0:	3001      	adds	r0, #1
 80071a2:	f43f ae6e 	beq.w	8006e82 <_printf_float+0xb6>
 80071a6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80071aa:	2200      	movs	r2, #0
 80071ac:	2300      	movs	r3, #0
 80071ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 80071b2:	f7f9 fc03 	bl	80009bc <__aeabi_dcmpeq>
 80071b6:	b9c0      	cbnz	r0, 80071ea <_printf_float+0x41e>
 80071b8:	4653      	mov	r3, sl
 80071ba:	f108 0201 	add.w	r2, r8, #1
 80071be:	4631      	mov	r1, r6
 80071c0:	4628      	mov	r0, r5
 80071c2:	47b8      	blx	r7
 80071c4:	3001      	adds	r0, #1
 80071c6:	d10c      	bne.n	80071e2 <_printf_float+0x416>
 80071c8:	e65b      	b.n	8006e82 <_printf_float+0xb6>
 80071ca:	2301      	movs	r3, #1
 80071cc:	465a      	mov	r2, fp
 80071ce:	4631      	mov	r1, r6
 80071d0:	4628      	mov	r0, r5
 80071d2:	47b8      	blx	r7
 80071d4:	3001      	adds	r0, #1
 80071d6:	f43f ae54 	beq.w	8006e82 <_printf_float+0xb6>
 80071da:	f108 0801 	add.w	r8, r8, #1
 80071de:	45d0      	cmp	r8, sl
 80071e0:	dbf3      	blt.n	80071ca <_printf_float+0x3fe>
 80071e2:	464b      	mov	r3, r9
 80071e4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80071e8:	e6e0      	b.n	8006fac <_printf_float+0x1e0>
 80071ea:	f04f 0800 	mov.w	r8, #0
 80071ee:	f104 0b1a 	add.w	fp, r4, #26
 80071f2:	e7f4      	b.n	80071de <_printf_float+0x412>
 80071f4:	2301      	movs	r3, #1
 80071f6:	4642      	mov	r2, r8
 80071f8:	e7e1      	b.n	80071be <_printf_float+0x3f2>
 80071fa:	2301      	movs	r3, #1
 80071fc:	464a      	mov	r2, r9
 80071fe:	4631      	mov	r1, r6
 8007200:	4628      	mov	r0, r5
 8007202:	47b8      	blx	r7
 8007204:	3001      	adds	r0, #1
 8007206:	f43f ae3c 	beq.w	8006e82 <_printf_float+0xb6>
 800720a:	f108 0801 	add.w	r8, r8, #1
 800720e:	68e3      	ldr	r3, [r4, #12]
 8007210:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007212:	1a5b      	subs	r3, r3, r1
 8007214:	4543      	cmp	r3, r8
 8007216:	dcf0      	bgt.n	80071fa <_printf_float+0x42e>
 8007218:	e6fd      	b.n	8007016 <_printf_float+0x24a>
 800721a:	f04f 0800 	mov.w	r8, #0
 800721e:	f104 0919 	add.w	r9, r4, #25
 8007222:	e7f4      	b.n	800720e <_printf_float+0x442>

08007224 <_printf_common>:
 8007224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007228:	4616      	mov	r6, r2
 800722a:	4698      	mov	r8, r3
 800722c:	688a      	ldr	r2, [r1, #8]
 800722e:	690b      	ldr	r3, [r1, #16]
 8007230:	4607      	mov	r7, r0
 8007232:	4293      	cmp	r3, r2
 8007234:	bfb8      	it	lt
 8007236:	4613      	movlt	r3, r2
 8007238:	6033      	str	r3, [r6, #0]
 800723a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800723e:	460c      	mov	r4, r1
 8007240:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007244:	b10a      	cbz	r2, 800724a <_printf_common+0x26>
 8007246:	3301      	adds	r3, #1
 8007248:	6033      	str	r3, [r6, #0]
 800724a:	6823      	ldr	r3, [r4, #0]
 800724c:	0699      	lsls	r1, r3, #26
 800724e:	bf42      	ittt	mi
 8007250:	6833      	ldrmi	r3, [r6, #0]
 8007252:	3302      	addmi	r3, #2
 8007254:	6033      	strmi	r3, [r6, #0]
 8007256:	6825      	ldr	r5, [r4, #0]
 8007258:	f015 0506 	ands.w	r5, r5, #6
 800725c:	d106      	bne.n	800726c <_printf_common+0x48>
 800725e:	f104 0a19 	add.w	sl, r4, #25
 8007262:	68e3      	ldr	r3, [r4, #12]
 8007264:	6832      	ldr	r2, [r6, #0]
 8007266:	1a9b      	subs	r3, r3, r2
 8007268:	42ab      	cmp	r3, r5
 800726a:	dc2b      	bgt.n	80072c4 <_printf_common+0xa0>
 800726c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007270:	6822      	ldr	r2, [r4, #0]
 8007272:	3b00      	subs	r3, #0
 8007274:	bf18      	it	ne
 8007276:	2301      	movne	r3, #1
 8007278:	0692      	lsls	r2, r2, #26
 800727a:	d430      	bmi.n	80072de <_printf_common+0xba>
 800727c:	4641      	mov	r1, r8
 800727e:	4638      	mov	r0, r7
 8007280:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007284:	47c8      	blx	r9
 8007286:	3001      	adds	r0, #1
 8007288:	d023      	beq.n	80072d2 <_printf_common+0xae>
 800728a:	6823      	ldr	r3, [r4, #0]
 800728c:	6922      	ldr	r2, [r4, #16]
 800728e:	f003 0306 	and.w	r3, r3, #6
 8007292:	2b04      	cmp	r3, #4
 8007294:	bf14      	ite	ne
 8007296:	2500      	movne	r5, #0
 8007298:	6833      	ldreq	r3, [r6, #0]
 800729a:	f04f 0600 	mov.w	r6, #0
 800729e:	bf08      	it	eq
 80072a0:	68e5      	ldreq	r5, [r4, #12]
 80072a2:	f104 041a 	add.w	r4, r4, #26
 80072a6:	bf08      	it	eq
 80072a8:	1aed      	subeq	r5, r5, r3
 80072aa:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80072ae:	bf08      	it	eq
 80072b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80072b4:	4293      	cmp	r3, r2
 80072b6:	bfc4      	itt	gt
 80072b8:	1a9b      	subgt	r3, r3, r2
 80072ba:	18ed      	addgt	r5, r5, r3
 80072bc:	42b5      	cmp	r5, r6
 80072be:	d11a      	bne.n	80072f6 <_printf_common+0xd2>
 80072c0:	2000      	movs	r0, #0
 80072c2:	e008      	b.n	80072d6 <_printf_common+0xb2>
 80072c4:	2301      	movs	r3, #1
 80072c6:	4652      	mov	r2, sl
 80072c8:	4641      	mov	r1, r8
 80072ca:	4638      	mov	r0, r7
 80072cc:	47c8      	blx	r9
 80072ce:	3001      	adds	r0, #1
 80072d0:	d103      	bne.n	80072da <_printf_common+0xb6>
 80072d2:	f04f 30ff 	mov.w	r0, #4294967295
 80072d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072da:	3501      	adds	r5, #1
 80072dc:	e7c1      	b.n	8007262 <_printf_common+0x3e>
 80072de:	2030      	movs	r0, #48	@ 0x30
 80072e0:	18e1      	adds	r1, r4, r3
 80072e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80072e6:	1c5a      	adds	r2, r3, #1
 80072e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80072ec:	4422      	add	r2, r4
 80072ee:	3302      	adds	r3, #2
 80072f0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80072f4:	e7c2      	b.n	800727c <_printf_common+0x58>
 80072f6:	2301      	movs	r3, #1
 80072f8:	4622      	mov	r2, r4
 80072fa:	4641      	mov	r1, r8
 80072fc:	4638      	mov	r0, r7
 80072fe:	47c8      	blx	r9
 8007300:	3001      	adds	r0, #1
 8007302:	d0e6      	beq.n	80072d2 <_printf_common+0xae>
 8007304:	3601      	adds	r6, #1
 8007306:	e7d9      	b.n	80072bc <_printf_common+0x98>

08007308 <_printf_i>:
 8007308:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800730c:	7e0f      	ldrb	r7, [r1, #24]
 800730e:	4691      	mov	r9, r2
 8007310:	2f78      	cmp	r7, #120	@ 0x78
 8007312:	4680      	mov	r8, r0
 8007314:	460c      	mov	r4, r1
 8007316:	469a      	mov	sl, r3
 8007318:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800731a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800731e:	d807      	bhi.n	8007330 <_printf_i+0x28>
 8007320:	2f62      	cmp	r7, #98	@ 0x62
 8007322:	d80a      	bhi.n	800733a <_printf_i+0x32>
 8007324:	2f00      	cmp	r7, #0
 8007326:	f000 80d1 	beq.w	80074cc <_printf_i+0x1c4>
 800732a:	2f58      	cmp	r7, #88	@ 0x58
 800732c:	f000 80b8 	beq.w	80074a0 <_printf_i+0x198>
 8007330:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007334:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007338:	e03a      	b.n	80073b0 <_printf_i+0xa8>
 800733a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800733e:	2b15      	cmp	r3, #21
 8007340:	d8f6      	bhi.n	8007330 <_printf_i+0x28>
 8007342:	a101      	add	r1, pc, #4	@ (adr r1, 8007348 <_printf_i+0x40>)
 8007344:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007348:	080073a1 	.word	0x080073a1
 800734c:	080073b5 	.word	0x080073b5
 8007350:	08007331 	.word	0x08007331
 8007354:	08007331 	.word	0x08007331
 8007358:	08007331 	.word	0x08007331
 800735c:	08007331 	.word	0x08007331
 8007360:	080073b5 	.word	0x080073b5
 8007364:	08007331 	.word	0x08007331
 8007368:	08007331 	.word	0x08007331
 800736c:	08007331 	.word	0x08007331
 8007370:	08007331 	.word	0x08007331
 8007374:	080074b3 	.word	0x080074b3
 8007378:	080073df 	.word	0x080073df
 800737c:	0800746d 	.word	0x0800746d
 8007380:	08007331 	.word	0x08007331
 8007384:	08007331 	.word	0x08007331
 8007388:	080074d5 	.word	0x080074d5
 800738c:	08007331 	.word	0x08007331
 8007390:	080073df 	.word	0x080073df
 8007394:	08007331 	.word	0x08007331
 8007398:	08007331 	.word	0x08007331
 800739c:	08007475 	.word	0x08007475
 80073a0:	6833      	ldr	r3, [r6, #0]
 80073a2:	1d1a      	adds	r2, r3, #4
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	6032      	str	r2, [r6, #0]
 80073a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80073ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80073b0:	2301      	movs	r3, #1
 80073b2:	e09c      	b.n	80074ee <_printf_i+0x1e6>
 80073b4:	6833      	ldr	r3, [r6, #0]
 80073b6:	6820      	ldr	r0, [r4, #0]
 80073b8:	1d19      	adds	r1, r3, #4
 80073ba:	6031      	str	r1, [r6, #0]
 80073bc:	0606      	lsls	r6, r0, #24
 80073be:	d501      	bpl.n	80073c4 <_printf_i+0xbc>
 80073c0:	681d      	ldr	r5, [r3, #0]
 80073c2:	e003      	b.n	80073cc <_printf_i+0xc4>
 80073c4:	0645      	lsls	r5, r0, #25
 80073c6:	d5fb      	bpl.n	80073c0 <_printf_i+0xb8>
 80073c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80073cc:	2d00      	cmp	r5, #0
 80073ce:	da03      	bge.n	80073d8 <_printf_i+0xd0>
 80073d0:	232d      	movs	r3, #45	@ 0x2d
 80073d2:	426d      	negs	r5, r5
 80073d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80073d8:	230a      	movs	r3, #10
 80073da:	4858      	ldr	r0, [pc, #352]	@ (800753c <_printf_i+0x234>)
 80073dc:	e011      	b.n	8007402 <_printf_i+0xfa>
 80073de:	6821      	ldr	r1, [r4, #0]
 80073e0:	6833      	ldr	r3, [r6, #0]
 80073e2:	0608      	lsls	r0, r1, #24
 80073e4:	f853 5b04 	ldr.w	r5, [r3], #4
 80073e8:	d402      	bmi.n	80073f0 <_printf_i+0xe8>
 80073ea:	0649      	lsls	r1, r1, #25
 80073ec:	bf48      	it	mi
 80073ee:	b2ad      	uxthmi	r5, r5
 80073f0:	2f6f      	cmp	r7, #111	@ 0x6f
 80073f2:	6033      	str	r3, [r6, #0]
 80073f4:	bf14      	ite	ne
 80073f6:	230a      	movne	r3, #10
 80073f8:	2308      	moveq	r3, #8
 80073fa:	4850      	ldr	r0, [pc, #320]	@ (800753c <_printf_i+0x234>)
 80073fc:	2100      	movs	r1, #0
 80073fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007402:	6866      	ldr	r6, [r4, #4]
 8007404:	2e00      	cmp	r6, #0
 8007406:	60a6      	str	r6, [r4, #8]
 8007408:	db05      	blt.n	8007416 <_printf_i+0x10e>
 800740a:	6821      	ldr	r1, [r4, #0]
 800740c:	432e      	orrs	r6, r5
 800740e:	f021 0104 	bic.w	r1, r1, #4
 8007412:	6021      	str	r1, [r4, #0]
 8007414:	d04b      	beq.n	80074ae <_printf_i+0x1a6>
 8007416:	4616      	mov	r6, r2
 8007418:	fbb5 f1f3 	udiv	r1, r5, r3
 800741c:	fb03 5711 	mls	r7, r3, r1, r5
 8007420:	5dc7      	ldrb	r7, [r0, r7]
 8007422:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007426:	462f      	mov	r7, r5
 8007428:	42bb      	cmp	r3, r7
 800742a:	460d      	mov	r5, r1
 800742c:	d9f4      	bls.n	8007418 <_printf_i+0x110>
 800742e:	2b08      	cmp	r3, #8
 8007430:	d10b      	bne.n	800744a <_printf_i+0x142>
 8007432:	6823      	ldr	r3, [r4, #0]
 8007434:	07df      	lsls	r7, r3, #31
 8007436:	d508      	bpl.n	800744a <_printf_i+0x142>
 8007438:	6923      	ldr	r3, [r4, #16]
 800743a:	6861      	ldr	r1, [r4, #4]
 800743c:	4299      	cmp	r1, r3
 800743e:	bfde      	ittt	le
 8007440:	2330      	movle	r3, #48	@ 0x30
 8007442:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007446:	f106 36ff 	addle.w	r6, r6, #4294967295
 800744a:	1b92      	subs	r2, r2, r6
 800744c:	6122      	str	r2, [r4, #16]
 800744e:	464b      	mov	r3, r9
 8007450:	4621      	mov	r1, r4
 8007452:	4640      	mov	r0, r8
 8007454:	f8cd a000 	str.w	sl, [sp]
 8007458:	aa03      	add	r2, sp, #12
 800745a:	f7ff fee3 	bl	8007224 <_printf_common>
 800745e:	3001      	adds	r0, #1
 8007460:	d14a      	bne.n	80074f8 <_printf_i+0x1f0>
 8007462:	f04f 30ff 	mov.w	r0, #4294967295
 8007466:	b004      	add	sp, #16
 8007468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800746c:	6823      	ldr	r3, [r4, #0]
 800746e:	f043 0320 	orr.w	r3, r3, #32
 8007472:	6023      	str	r3, [r4, #0]
 8007474:	2778      	movs	r7, #120	@ 0x78
 8007476:	4832      	ldr	r0, [pc, #200]	@ (8007540 <_printf_i+0x238>)
 8007478:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800747c:	6823      	ldr	r3, [r4, #0]
 800747e:	6831      	ldr	r1, [r6, #0]
 8007480:	061f      	lsls	r7, r3, #24
 8007482:	f851 5b04 	ldr.w	r5, [r1], #4
 8007486:	d402      	bmi.n	800748e <_printf_i+0x186>
 8007488:	065f      	lsls	r7, r3, #25
 800748a:	bf48      	it	mi
 800748c:	b2ad      	uxthmi	r5, r5
 800748e:	6031      	str	r1, [r6, #0]
 8007490:	07d9      	lsls	r1, r3, #31
 8007492:	bf44      	itt	mi
 8007494:	f043 0320 	orrmi.w	r3, r3, #32
 8007498:	6023      	strmi	r3, [r4, #0]
 800749a:	b11d      	cbz	r5, 80074a4 <_printf_i+0x19c>
 800749c:	2310      	movs	r3, #16
 800749e:	e7ad      	b.n	80073fc <_printf_i+0xf4>
 80074a0:	4826      	ldr	r0, [pc, #152]	@ (800753c <_printf_i+0x234>)
 80074a2:	e7e9      	b.n	8007478 <_printf_i+0x170>
 80074a4:	6823      	ldr	r3, [r4, #0]
 80074a6:	f023 0320 	bic.w	r3, r3, #32
 80074aa:	6023      	str	r3, [r4, #0]
 80074ac:	e7f6      	b.n	800749c <_printf_i+0x194>
 80074ae:	4616      	mov	r6, r2
 80074b0:	e7bd      	b.n	800742e <_printf_i+0x126>
 80074b2:	6833      	ldr	r3, [r6, #0]
 80074b4:	6825      	ldr	r5, [r4, #0]
 80074b6:	1d18      	adds	r0, r3, #4
 80074b8:	6961      	ldr	r1, [r4, #20]
 80074ba:	6030      	str	r0, [r6, #0]
 80074bc:	062e      	lsls	r6, r5, #24
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	d501      	bpl.n	80074c6 <_printf_i+0x1be>
 80074c2:	6019      	str	r1, [r3, #0]
 80074c4:	e002      	b.n	80074cc <_printf_i+0x1c4>
 80074c6:	0668      	lsls	r0, r5, #25
 80074c8:	d5fb      	bpl.n	80074c2 <_printf_i+0x1ba>
 80074ca:	8019      	strh	r1, [r3, #0]
 80074cc:	2300      	movs	r3, #0
 80074ce:	4616      	mov	r6, r2
 80074d0:	6123      	str	r3, [r4, #16]
 80074d2:	e7bc      	b.n	800744e <_printf_i+0x146>
 80074d4:	6833      	ldr	r3, [r6, #0]
 80074d6:	2100      	movs	r1, #0
 80074d8:	1d1a      	adds	r2, r3, #4
 80074da:	6032      	str	r2, [r6, #0]
 80074dc:	681e      	ldr	r6, [r3, #0]
 80074de:	6862      	ldr	r2, [r4, #4]
 80074e0:	4630      	mov	r0, r6
 80074e2:	f000 fa3a 	bl	800795a <memchr>
 80074e6:	b108      	cbz	r0, 80074ec <_printf_i+0x1e4>
 80074e8:	1b80      	subs	r0, r0, r6
 80074ea:	6060      	str	r0, [r4, #4]
 80074ec:	6863      	ldr	r3, [r4, #4]
 80074ee:	6123      	str	r3, [r4, #16]
 80074f0:	2300      	movs	r3, #0
 80074f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80074f6:	e7aa      	b.n	800744e <_printf_i+0x146>
 80074f8:	4632      	mov	r2, r6
 80074fa:	4649      	mov	r1, r9
 80074fc:	4640      	mov	r0, r8
 80074fe:	6923      	ldr	r3, [r4, #16]
 8007500:	47d0      	blx	sl
 8007502:	3001      	adds	r0, #1
 8007504:	d0ad      	beq.n	8007462 <_printf_i+0x15a>
 8007506:	6823      	ldr	r3, [r4, #0]
 8007508:	079b      	lsls	r3, r3, #30
 800750a:	d413      	bmi.n	8007534 <_printf_i+0x22c>
 800750c:	68e0      	ldr	r0, [r4, #12]
 800750e:	9b03      	ldr	r3, [sp, #12]
 8007510:	4298      	cmp	r0, r3
 8007512:	bfb8      	it	lt
 8007514:	4618      	movlt	r0, r3
 8007516:	e7a6      	b.n	8007466 <_printf_i+0x15e>
 8007518:	2301      	movs	r3, #1
 800751a:	4632      	mov	r2, r6
 800751c:	4649      	mov	r1, r9
 800751e:	4640      	mov	r0, r8
 8007520:	47d0      	blx	sl
 8007522:	3001      	adds	r0, #1
 8007524:	d09d      	beq.n	8007462 <_printf_i+0x15a>
 8007526:	3501      	adds	r5, #1
 8007528:	68e3      	ldr	r3, [r4, #12]
 800752a:	9903      	ldr	r1, [sp, #12]
 800752c:	1a5b      	subs	r3, r3, r1
 800752e:	42ab      	cmp	r3, r5
 8007530:	dcf2      	bgt.n	8007518 <_printf_i+0x210>
 8007532:	e7eb      	b.n	800750c <_printf_i+0x204>
 8007534:	2500      	movs	r5, #0
 8007536:	f104 0619 	add.w	r6, r4, #25
 800753a:	e7f5      	b.n	8007528 <_printf_i+0x220>
 800753c:	0800a118 	.word	0x0800a118
 8007540:	0800a129 	.word	0x0800a129

08007544 <std>:
 8007544:	2300      	movs	r3, #0
 8007546:	b510      	push	{r4, lr}
 8007548:	4604      	mov	r4, r0
 800754a:	e9c0 3300 	strd	r3, r3, [r0]
 800754e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007552:	6083      	str	r3, [r0, #8]
 8007554:	8181      	strh	r1, [r0, #12]
 8007556:	6643      	str	r3, [r0, #100]	@ 0x64
 8007558:	81c2      	strh	r2, [r0, #14]
 800755a:	6183      	str	r3, [r0, #24]
 800755c:	4619      	mov	r1, r3
 800755e:	2208      	movs	r2, #8
 8007560:	305c      	adds	r0, #92	@ 0x5c
 8007562:	f000 f94c 	bl	80077fe <memset>
 8007566:	4b0d      	ldr	r3, [pc, #52]	@ (800759c <std+0x58>)
 8007568:	6224      	str	r4, [r4, #32]
 800756a:	6263      	str	r3, [r4, #36]	@ 0x24
 800756c:	4b0c      	ldr	r3, [pc, #48]	@ (80075a0 <std+0x5c>)
 800756e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007570:	4b0c      	ldr	r3, [pc, #48]	@ (80075a4 <std+0x60>)
 8007572:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007574:	4b0c      	ldr	r3, [pc, #48]	@ (80075a8 <std+0x64>)
 8007576:	6323      	str	r3, [r4, #48]	@ 0x30
 8007578:	4b0c      	ldr	r3, [pc, #48]	@ (80075ac <std+0x68>)
 800757a:	429c      	cmp	r4, r3
 800757c:	d006      	beq.n	800758c <std+0x48>
 800757e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007582:	4294      	cmp	r4, r2
 8007584:	d002      	beq.n	800758c <std+0x48>
 8007586:	33d0      	adds	r3, #208	@ 0xd0
 8007588:	429c      	cmp	r4, r3
 800758a:	d105      	bne.n	8007598 <std+0x54>
 800758c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007590:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007594:	f000 b9d6 	b.w	8007944 <__retarget_lock_init_recursive>
 8007598:	bd10      	pop	{r4, pc}
 800759a:	bf00      	nop
 800759c:	08007779 	.word	0x08007779
 80075a0:	0800779b 	.word	0x0800779b
 80075a4:	080077d3 	.word	0x080077d3
 80075a8:	080077f7 	.word	0x080077f7
 80075ac:	200007fc 	.word	0x200007fc

080075b0 <stdio_exit_handler>:
 80075b0:	4a02      	ldr	r2, [pc, #8]	@ (80075bc <stdio_exit_handler+0xc>)
 80075b2:	4903      	ldr	r1, [pc, #12]	@ (80075c0 <stdio_exit_handler+0x10>)
 80075b4:	4803      	ldr	r0, [pc, #12]	@ (80075c4 <stdio_exit_handler+0x14>)
 80075b6:	f000 b869 	b.w	800768c <_fwalk_sglue>
 80075ba:	bf00      	nop
 80075bc:	20000024 	.word	0x20000024
 80075c0:	08009165 	.word	0x08009165
 80075c4:	20000034 	.word	0x20000034

080075c8 <cleanup_stdio>:
 80075c8:	6841      	ldr	r1, [r0, #4]
 80075ca:	4b0c      	ldr	r3, [pc, #48]	@ (80075fc <cleanup_stdio+0x34>)
 80075cc:	b510      	push	{r4, lr}
 80075ce:	4299      	cmp	r1, r3
 80075d0:	4604      	mov	r4, r0
 80075d2:	d001      	beq.n	80075d8 <cleanup_stdio+0x10>
 80075d4:	f001 fdc6 	bl	8009164 <_fflush_r>
 80075d8:	68a1      	ldr	r1, [r4, #8]
 80075da:	4b09      	ldr	r3, [pc, #36]	@ (8007600 <cleanup_stdio+0x38>)
 80075dc:	4299      	cmp	r1, r3
 80075de:	d002      	beq.n	80075e6 <cleanup_stdio+0x1e>
 80075e0:	4620      	mov	r0, r4
 80075e2:	f001 fdbf 	bl	8009164 <_fflush_r>
 80075e6:	68e1      	ldr	r1, [r4, #12]
 80075e8:	4b06      	ldr	r3, [pc, #24]	@ (8007604 <cleanup_stdio+0x3c>)
 80075ea:	4299      	cmp	r1, r3
 80075ec:	d004      	beq.n	80075f8 <cleanup_stdio+0x30>
 80075ee:	4620      	mov	r0, r4
 80075f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075f4:	f001 bdb6 	b.w	8009164 <_fflush_r>
 80075f8:	bd10      	pop	{r4, pc}
 80075fa:	bf00      	nop
 80075fc:	200007fc 	.word	0x200007fc
 8007600:	20000864 	.word	0x20000864
 8007604:	200008cc 	.word	0x200008cc

08007608 <global_stdio_init.part.0>:
 8007608:	b510      	push	{r4, lr}
 800760a:	4b0b      	ldr	r3, [pc, #44]	@ (8007638 <global_stdio_init.part.0+0x30>)
 800760c:	4c0b      	ldr	r4, [pc, #44]	@ (800763c <global_stdio_init.part.0+0x34>)
 800760e:	4a0c      	ldr	r2, [pc, #48]	@ (8007640 <global_stdio_init.part.0+0x38>)
 8007610:	4620      	mov	r0, r4
 8007612:	601a      	str	r2, [r3, #0]
 8007614:	2104      	movs	r1, #4
 8007616:	2200      	movs	r2, #0
 8007618:	f7ff ff94 	bl	8007544 <std>
 800761c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007620:	2201      	movs	r2, #1
 8007622:	2109      	movs	r1, #9
 8007624:	f7ff ff8e 	bl	8007544 <std>
 8007628:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800762c:	2202      	movs	r2, #2
 800762e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007632:	2112      	movs	r1, #18
 8007634:	f7ff bf86 	b.w	8007544 <std>
 8007638:	20000934 	.word	0x20000934
 800763c:	200007fc 	.word	0x200007fc
 8007640:	080075b1 	.word	0x080075b1

08007644 <__sfp_lock_acquire>:
 8007644:	4801      	ldr	r0, [pc, #4]	@ (800764c <__sfp_lock_acquire+0x8>)
 8007646:	f000 b97e 	b.w	8007946 <__retarget_lock_acquire_recursive>
 800764a:	bf00      	nop
 800764c:	2000093d 	.word	0x2000093d

08007650 <__sfp_lock_release>:
 8007650:	4801      	ldr	r0, [pc, #4]	@ (8007658 <__sfp_lock_release+0x8>)
 8007652:	f000 b979 	b.w	8007948 <__retarget_lock_release_recursive>
 8007656:	bf00      	nop
 8007658:	2000093d 	.word	0x2000093d

0800765c <__sinit>:
 800765c:	b510      	push	{r4, lr}
 800765e:	4604      	mov	r4, r0
 8007660:	f7ff fff0 	bl	8007644 <__sfp_lock_acquire>
 8007664:	6a23      	ldr	r3, [r4, #32]
 8007666:	b11b      	cbz	r3, 8007670 <__sinit+0x14>
 8007668:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800766c:	f7ff bff0 	b.w	8007650 <__sfp_lock_release>
 8007670:	4b04      	ldr	r3, [pc, #16]	@ (8007684 <__sinit+0x28>)
 8007672:	6223      	str	r3, [r4, #32]
 8007674:	4b04      	ldr	r3, [pc, #16]	@ (8007688 <__sinit+0x2c>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d1f5      	bne.n	8007668 <__sinit+0xc>
 800767c:	f7ff ffc4 	bl	8007608 <global_stdio_init.part.0>
 8007680:	e7f2      	b.n	8007668 <__sinit+0xc>
 8007682:	bf00      	nop
 8007684:	080075c9 	.word	0x080075c9
 8007688:	20000934 	.word	0x20000934

0800768c <_fwalk_sglue>:
 800768c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007690:	4607      	mov	r7, r0
 8007692:	4688      	mov	r8, r1
 8007694:	4614      	mov	r4, r2
 8007696:	2600      	movs	r6, #0
 8007698:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800769c:	f1b9 0901 	subs.w	r9, r9, #1
 80076a0:	d505      	bpl.n	80076ae <_fwalk_sglue+0x22>
 80076a2:	6824      	ldr	r4, [r4, #0]
 80076a4:	2c00      	cmp	r4, #0
 80076a6:	d1f7      	bne.n	8007698 <_fwalk_sglue+0xc>
 80076a8:	4630      	mov	r0, r6
 80076aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076ae:	89ab      	ldrh	r3, [r5, #12]
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	d907      	bls.n	80076c4 <_fwalk_sglue+0x38>
 80076b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80076b8:	3301      	adds	r3, #1
 80076ba:	d003      	beq.n	80076c4 <_fwalk_sglue+0x38>
 80076bc:	4629      	mov	r1, r5
 80076be:	4638      	mov	r0, r7
 80076c0:	47c0      	blx	r8
 80076c2:	4306      	orrs	r6, r0
 80076c4:	3568      	adds	r5, #104	@ 0x68
 80076c6:	e7e9      	b.n	800769c <_fwalk_sglue+0x10>

080076c8 <sniprintf>:
 80076c8:	b40c      	push	{r2, r3}
 80076ca:	b530      	push	{r4, r5, lr}
 80076cc:	4b18      	ldr	r3, [pc, #96]	@ (8007730 <sniprintf+0x68>)
 80076ce:	1e0c      	subs	r4, r1, #0
 80076d0:	681d      	ldr	r5, [r3, #0]
 80076d2:	b09d      	sub	sp, #116	@ 0x74
 80076d4:	da08      	bge.n	80076e8 <sniprintf+0x20>
 80076d6:	238b      	movs	r3, #139	@ 0x8b
 80076d8:	f04f 30ff 	mov.w	r0, #4294967295
 80076dc:	602b      	str	r3, [r5, #0]
 80076de:	b01d      	add	sp, #116	@ 0x74
 80076e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80076e4:	b002      	add	sp, #8
 80076e6:	4770      	bx	lr
 80076e8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80076ec:	f8ad 3014 	strh.w	r3, [sp, #20]
 80076f0:	f04f 0300 	mov.w	r3, #0
 80076f4:	931b      	str	r3, [sp, #108]	@ 0x6c
 80076f6:	bf0c      	ite	eq
 80076f8:	4623      	moveq	r3, r4
 80076fa:	f104 33ff 	addne.w	r3, r4, #4294967295
 80076fe:	9304      	str	r3, [sp, #16]
 8007700:	9307      	str	r3, [sp, #28]
 8007702:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007706:	9002      	str	r0, [sp, #8]
 8007708:	9006      	str	r0, [sp, #24]
 800770a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800770e:	4628      	mov	r0, r5
 8007710:	ab21      	add	r3, sp, #132	@ 0x84
 8007712:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007714:	a902      	add	r1, sp, #8
 8007716:	9301      	str	r3, [sp, #4]
 8007718:	f001 fba8 	bl	8008e6c <_svfiprintf_r>
 800771c:	1c43      	adds	r3, r0, #1
 800771e:	bfbc      	itt	lt
 8007720:	238b      	movlt	r3, #139	@ 0x8b
 8007722:	602b      	strlt	r3, [r5, #0]
 8007724:	2c00      	cmp	r4, #0
 8007726:	d0da      	beq.n	80076de <sniprintf+0x16>
 8007728:	2200      	movs	r2, #0
 800772a:	9b02      	ldr	r3, [sp, #8]
 800772c:	701a      	strb	r2, [r3, #0]
 800772e:	e7d6      	b.n	80076de <sniprintf+0x16>
 8007730:	20000030 	.word	0x20000030

08007734 <siprintf>:
 8007734:	b40e      	push	{r1, r2, r3}
 8007736:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800773a:	b510      	push	{r4, lr}
 800773c:	2400      	movs	r4, #0
 800773e:	b09d      	sub	sp, #116	@ 0x74
 8007740:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007742:	9002      	str	r0, [sp, #8]
 8007744:	9006      	str	r0, [sp, #24]
 8007746:	9107      	str	r1, [sp, #28]
 8007748:	9104      	str	r1, [sp, #16]
 800774a:	4809      	ldr	r0, [pc, #36]	@ (8007770 <siprintf+0x3c>)
 800774c:	4909      	ldr	r1, [pc, #36]	@ (8007774 <siprintf+0x40>)
 800774e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007752:	9105      	str	r1, [sp, #20]
 8007754:	6800      	ldr	r0, [r0, #0]
 8007756:	a902      	add	r1, sp, #8
 8007758:	9301      	str	r3, [sp, #4]
 800775a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800775c:	f001 fb86 	bl	8008e6c <_svfiprintf_r>
 8007760:	9b02      	ldr	r3, [sp, #8]
 8007762:	701c      	strb	r4, [r3, #0]
 8007764:	b01d      	add	sp, #116	@ 0x74
 8007766:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800776a:	b003      	add	sp, #12
 800776c:	4770      	bx	lr
 800776e:	bf00      	nop
 8007770:	20000030 	.word	0x20000030
 8007774:	ffff0208 	.word	0xffff0208

08007778 <__sread>:
 8007778:	b510      	push	{r4, lr}
 800777a:	460c      	mov	r4, r1
 800777c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007780:	f000 f882 	bl	8007888 <_read_r>
 8007784:	2800      	cmp	r0, #0
 8007786:	bfab      	itete	ge
 8007788:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800778a:	89a3      	ldrhlt	r3, [r4, #12]
 800778c:	181b      	addge	r3, r3, r0
 800778e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007792:	bfac      	ite	ge
 8007794:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007796:	81a3      	strhlt	r3, [r4, #12]
 8007798:	bd10      	pop	{r4, pc}

0800779a <__swrite>:
 800779a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800779e:	461f      	mov	r7, r3
 80077a0:	898b      	ldrh	r3, [r1, #12]
 80077a2:	4605      	mov	r5, r0
 80077a4:	05db      	lsls	r3, r3, #23
 80077a6:	460c      	mov	r4, r1
 80077a8:	4616      	mov	r6, r2
 80077aa:	d505      	bpl.n	80077b8 <__swrite+0x1e>
 80077ac:	2302      	movs	r3, #2
 80077ae:	2200      	movs	r2, #0
 80077b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077b4:	f000 f856 	bl	8007864 <_lseek_r>
 80077b8:	89a3      	ldrh	r3, [r4, #12]
 80077ba:	4632      	mov	r2, r6
 80077bc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80077c0:	81a3      	strh	r3, [r4, #12]
 80077c2:	4628      	mov	r0, r5
 80077c4:	463b      	mov	r3, r7
 80077c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80077ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80077ce:	f000 b87d 	b.w	80078cc <_write_r>

080077d2 <__sseek>:
 80077d2:	b510      	push	{r4, lr}
 80077d4:	460c      	mov	r4, r1
 80077d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077da:	f000 f843 	bl	8007864 <_lseek_r>
 80077de:	1c43      	adds	r3, r0, #1
 80077e0:	89a3      	ldrh	r3, [r4, #12]
 80077e2:	bf15      	itete	ne
 80077e4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80077e6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80077ea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80077ee:	81a3      	strheq	r3, [r4, #12]
 80077f0:	bf18      	it	ne
 80077f2:	81a3      	strhne	r3, [r4, #12]
 80077f4:	bd10      	pop	{r4, pc}

080077f6 <__sclose>:
 80077f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077fa:	f000 b823 	b.w	8007844 <_close_r>

080077fe <memset>:
 80077fe:	4603      	mov	r3, r0
 8007800:	4402      	add	r2, r0
 8007802:	4293      	cmp	r3, r2
 8007804:	d100      	bne.n	8007808 <memset+0xa>
 8007806:	4770      	bx	lr
 8007808:	f803 1b01 	strb.w	r1, [r3], #1
 800780c:	e7f9      	b.n	8007802 <memset+0x4>

0800780e <strstr>:
 800780e:	780a      	ldrb	r2, [r1, #0]
 8007810:	b570      	push	{r4, r5, r6, lr}
 8007812:	b96a      	cbnz	r2, 8007830 <strstr+0x22>
 8007814:	bd70      	pop	{r4, r5, r6, pc}
 8007816:	429a      	cmp	r2, r3
 8007818:	d109      	bne.n	800782e <strstr+0x20>
 800781a:	460c      	mov	r4, r1
 800781c:	4605      	mov	r5, r0
 800781e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8007822:	2b00      	cmp	r3, #0
 8007824:	d0f6      	beq.n	8007814 <strstr+0x6>
 8007826:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800782a:	429e      	cmp	r6, r3
 800782c:	d0f7      	beq.n	800781e <strstr+0x10>
 800782e:	3001      	adds	r0, #1
 8007830:	7803      	ldrb	r3, [r0, #0]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d1ef      	bne.n	8007816 <strstr+0x8>
 8007836:	4618      	mov	r0, r3
 8007838:	e7ec      	b.n	8007814 <strstr+0x6>
	...

0800783c <_localeconv_r>:
 800783c:	4800      	ldr	r0, [pc, #0]	@ (8007840 <_localeconv_r+0x4>)
 800783e:	4770      	bx	lr
 8007840:	20000170 	.word	0x20000170

08007844 <_close_r>:
 8007844:	b538      	push	{r3, r4, r5, lr}
 8007846:	2300      	movs	r3, #0
 8007848:	4d05      	ldr	r5, [pc, #20]	@ (8007860 <_close_r+0x1c>)
 800784a:	4604      	mov	r4, r0
 800784c:	4608      	mov	r0, r1
 800784e:	602b      	str	r3, [r5, #0]
 8007850:	f7fb f86f 	bl	8002932 <_close>
 8007854:	1c43      	adds	r3, r0, #1
 8007856:	d102      	bne.n	800785e <_close_r+0x1a>
 8007858:	682b      	ldr	r3, [r5, #0]
 800785a:	b103      	cbz	r3, 800785e <_close_r+0x1a>
 800785c:	6023      	str	r3, [r4, #0]
 800785e:	bd38      	pop	{r3, r4, r5, pc}
 8007860:	20000938 	.word	0x20000938

08007864 <_lseek_r>:
 8007864:	b538      	push	{r3, r4, r5, lr}
 8007866:	4604      	mov	r4, r0
 8007868:	4608      	mov	r0, r1
 800786a:	4611      	mov	r1, r2
 800786c:	2200      	movs	r2, #0
 800786e:	4d05      	ldr	r5, [pc, #20]	@ (8007884 <_lseek_r+0x20>)
 8007870:	602a      	str	r2, [r5, #0]
 8007872:	461a      	mov	r2, r3
 8007874:	f7fb f881 	bl	800297a <_lseek>
 8007878:	1c43      	adds	r3, r0, #1
 800787a:	d102      	bne.n	8007882 <_lseek_r+0x1e>
 800787c:	682b      	ldr	r3, [r5, #0]
 800787e:	b103      	cbz	r3, 8007882 <_lseek_r+0x1e>
 8007880:	6023      	str	r3, [r4, #0]
 8007882:	bd38      	pop	{r3, r4, r5, pc}
 8007884:	20000938 	.word	0x20000938

08007888 <_read_r>:
 8007888:	b538      	push	{r3, r4, r5, lr}
 800788a:	4604      	mov	r4, r0
 800788c:	4608      	mov	r0, r1
 800788e:	4611      	mov	r1, r2
 8007890:	2200      	movs	r2, #0
 8007892:	4d05      	ldr	r5, [pc, #20]	@ (80078a8 <_read_r+0x20>)
 8007894:	602a      	str	r2, [r5, #0]
 8007896:	461a      	mov	r2, r3
 8007898:	f7fb f812 	bl	80028c0 <_read>
 800789c:	1c43      	adds	r3, r0, #1
 800789e:	d102      	bne.n	80078a6 <_read_r+0x1e>
 80078a0:	682b      	ldr	r3, [r5, #0]
 80078a2:	b103      	cbz	r3, 80078a6 <_read_r+0x1e>
 80078a4:	6023      	str	r3, [r4, #0]
 80078a6:	bd38      	pop	{r3, r4, r5, pc}
 80078a8:	20000938 	.word	0x20000938

080078ac <_sbrk_r>:
 80078ac:	b538      	push	{r3, r4, r5, lr}
 80078ae:	2300      	movs	r3, #0
 80078b0:	4d05      	ldr	r5, [pc, #20]	@ (80078c8 <_sbrk_r+0x1c>)
 80078b2:	4604      	mov	r4, r0
 80078b4:	4608      	mov	r0, r1
 80078b6:	602b      	str	r3, [r5, #0]
 80078b8:	f7fb f86c 	bl	8002994 <_sbrk>
 80078bc:	1c43      	adds	r3, r0, #1
 80078be:	d102      	bne.n	80078c6 <_sbrk_r+0x1a>
 80078c0:	682b      	ldr	r3, [r5, #0]
 80078c2:	b103      	cbz	r3, 80078c6 <_sbrk_r+0x1a>
 80078c4:	6023      	str	r3, [r4, #0]
 80078c6:	bd38      	pop	{r3, r4, r5, pc}
 80078c8:	20000938 	.word	0x20000938

080078cc <_write_r>:
 80078cc:	b538      	push	{r3, r4, r5, lr}
 80078ce:	4604      	mov	r4, r0
 80078d0:	4608      	mov	r0, r1
 80078d2:	4611      	mov	r1, r2
 80078d4:	2200      	movs	r2, #0
 80078d6:	4d05      	ldr	r5, [pc, #20]	@ (80078ec <_write_r+0x20>)
 80078d8:	602a      	str	r2, [r5, #0]
 80078da:	461a      	mov	r2, r3
 80078dc:	f7fb f80d 	bl	80028fa <_write>
 80078e0:	1c43      	adds	r3, r0, #1
 80078e2:	d102      	bne.n	80078ea <_write_r+0x1e>
 80078e4:	682b      	ldr	r3, [r5, #0]
 80078e6:	b103      	cbz	r3, 80078ea <_write_r+0x1e>
 80078e8:	6023      	str	r3, [r4, #0]
 80078ea:	bd38      	pop	{r3, r4, r5, pc}
 80078ec:	20000938 	.word	0x20000938

080078f0 <__errno>:
 80078f0:	4b01      	ldr	r3, [pc, #4]	@ (80078f8 <__errno+0x8>)
 80078f2:	6818      	ldr	r0, [r3, #0]
 80078f4:	4770      	bx	lr
 80078f6:	bf00      	nop
 80078f8:	20000030 	.word	0x20000030

080078fc <__libc_init_array>:
 80078fc:	b570      	push	{r4, r5, r6, lr}
 80078fe:	2600      	movs	r6, #0
 8007900:	4d0c      	ldr	r5, [pc, #48]	@ (8007934 <__libc_init_array+0x38>)
 8007902:	4c0d      	ldr	r4, [pc, #52]	@ (8007938 <__libc_init_array+0x3c>)
 8007904:	1b64      	subs	r4, r4, r5
 8007906:	10a4      	asrs	r4, r4, #2
 8007908:	42a6      	cmp	r6, r4
 800790a:	d109      	bne.n	8007920 <__libc_init_array+0x24>
 800790c:	f001 ffa2 	bl	8009854 <_init>
 8007910:	2600      	movs	r6, #0
 8007912:	4d0a      	ldr	r5, [pc, #40]	@ (800793c <__libc_init_array+0x40>)
 8007914:	4c0a      	ldr	r4, [pc, #40]	@ (8007940 <__libc_init_array+0x44>)
 8007916:	1b64      	subs	r4, r4, r5
 8007918:	10a4      	asrs	r4, r4, #2
 800791a:	42a6      	cmp	r6, r4
 800791c:	d105      	bne.n	800792a <__libc_init_array+0x2e>
 800791e:	bd70      	pop	{r4, r5, r6, pc}
 8007920:	f855 3b04 	ldr.w	r3, [r5], #4
 8007924:	4798      	blx	r3
 8007926:	3601      	adds	r6, #1
 8007928:	e7ee      	b.n	8007908 <__libc_init_array+0xc>
 800792a:	f855 3b04 	ldr.w	r3, [r5], #4
 800792e:	4798      	blx	r3
 8007930:	3601      	adds	r6, #1
 8007932:	e7f2      	b.n	800791a <__libc_init_array+0x1e>
 8007934:	0800a484 	.word	0x0800a484
 8007938:	0800a484 	.word	0x0800a484
 800793c:	0800a484 	.word	0x0800a484
 8007940:	0800a488 	.word	0x0800a488

08007944 <__retarget_lock_init_recursive>:
 8007944:	4770      	bx	lr

08007946 <__retarget_lock_acquire_recursive>:
 8007946:	4770      	bx	lr

08007948 <__retarget_lock_release_recursive>:
 8007948:	4770      	bx	lr

0800794a <strcpy>:
 800794a:	4603      	mov	r3, r0
 800794c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007950:	f803 2b01 	strb.w	r2, [r3], #1
 8007954:	2a00      	cmp	r2, #0
 8007956:	d1f9      	bne.n	800794c <strcpy+0x2>
 8007958:	4770      	bx	lr

0800795a <memchr>:
 800795a:	4603      	mov	r3, r0
 800795c:	b510      	push	{r4, lr}
 800795e:	b2c9      	uxtb	r1, r1
 8007960:	4402      	add	r2, r0
 8007962:	4293      	cmp	r3, r2
 8007964:	4618      	mov	r0, r3
 8007966:	d101      	bne.n	800796c <memchr+0x12>
 8007968:	2000      	movs	r0, #0
 800796a:	e003      	b.n	8007974 <memchr+0x1a>
 800796c:	7804      	ldrb	r4, [r0, #0]
 800796e:	3301      	adds	r3, #1
 8007970:	428c      	cmp	r4, r1
 8007972:	d1f6      	bne.n	8007962 <memchr+0x8>
 8007974:	bd10      	pop	{r4, pc}

08007976 <quorem>:
 8007976:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800797a:	6903      	ldr	r3, [r0, #16]
 800797c:	690c      	ldr	r4, [r1, #16]
 800797e:	4607      	mov	r7, r0
 8007980:	42a3      	cmp	r3, r4
 8007982:	db7e      	blt.n	8007a82 <quorem+0x10c>
 8007984:	3c01      	subs	r4, #1
 8007986:	00a3      	lsls	r3, r4, #2
 8007988:	f100 0514 	add.w	r5, r0, #20
 800798c:	f101 0814 	add.w	r8, r1, #20
 8007990:	9300      	str	r3, [sp, #0]
 8007992:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007996:	9301      	str	r3, [sp, #4]
 8007998:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800799c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80079a0:	3301      	adds	r3, #1
 80079a2:	429a      	cmp	r2, r3
 80079a4:	fbb2 f6f3 	udiv	r6, r2, r3
 80079a8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80079ac:	d32e      	bcc.n	8007a0c <quorem+0x96>
 80079ae:	f04f 0a00 	mov.w	sl, #0
 80079b2:	46c4      	mov	ip, r8
 80079b4:	46ae      	mov	lr, r5
 80079b6:	46d3      	mov	fp, sl
 80079b8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80079bc:	b298      	uxth	r0, r3
 80079be:	fb06 a000 	mla	r0, r6, r0, sl
 80079c2:	0c1b      	lsrs	r3, r3, #16
 80079c4:	0c02      	lsrs	r2, r0, #16
 80079c6:	fb06 2303 	mla	r3, r6, r3, r2
 80079ca:	f8de 2000 	ldr.w	r2, [lr]
 80079ce:	b280      	uxth	r0, r0
 80079d0:	b292      	uxth	r2, r2
 80079d2:	1a12      	subs	r2, r2, r0
 80079d4:	445a      	add	r2, fp
 80079d6:	f8de 0000 	ldr.w	r0, [lr]
 80079da:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80079de:	b29b      	uxth	r3, r3
 80079e0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80079e4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80079e8:	b292      	uxth	r2, r2
 80079ea:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80079ee:	45e1      	cmp	r9, ip
 80079f0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80079f4:	f84e 2b04 	str.w	r2, [lr], #4
 80079f8:	d2de      	bcs.n	80079b8 <quorem+0x42>
 80079fa:	9b00      	ldr	r3, [sp, #0]
 80079fc:	58eb      	ldr	r3, [r5, r3]
 80079fe:	b92b      	cbnz	r3, 8007a0c <quorem+0x96>
 8007a00:	9b01      	ldr	r3, [sp, #4]
 8007a02:	3b04      	subs	r3, #4
 8007a04:	429d      	cmp	r5, r3
 8007a06:	461a      	mov	r2, r3
 8007a08:	d32f      	bcc.n	8007a6a <quorem+0xf4>
 8007a0a:	613c      	str	r4, [r7, #16]
 8007a0c:	4638      	mov	r0, r7
 8007a0e:	f001 f8c9 	bl	8008ba4 <__mcmp>
 8007a12:	2800      	cmp	r0, #0
 8007a14:	db25      	blt.n	8007a62 <quorem+0xec>
 8007a16:	4629      	mov	r1, r5
 8007a18:	2000      	movs	r0, #0
 8007a1a:	f858 2b04 	ldr.w	r2, [r8], #4
 8007a1e:	f8d1 c000 	ldr.w	ip, [r1]
 8007a22:	fa1f fe82 	uxth.w	lr, r2
 8007a26:	fa1f f38c 	uxth.w	r3, ip
 8007a2a:	eba3 030e 	sub.w	r3, r3, lr
 8007a2e:	4403      	add	r3, r0
 8007a30:	0c12      	lsrs	r2, r2, #16
 8007a32:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007a36:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007a3a:	b29b      	uxth	r3, r3
 8007a3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a40:	45c1      	cmp	r9, r8
 8007a42:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007a46:	f841 3b04 	str.w	r3, [r1], #4
 8007a4a:	d2e6      	bcs.n	8007a1a <quorem+0xa4>
 8007a4c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a50:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a54:	b922      	cbnz	r2, 8007a60 <quorem+0xea>
 8007a56:	3b04      	subs	r3, #4
 8007a58:	429d      	cmp	r5, r3
 8007a5a:	461a      	mov	r2, r3
 8007a5c:	d30b      	bcc.n	8007a76 <quorem+0x100>
 8007a5e:	613c      	str	r4, [r7, #16]
 8007a60:	3601      	adds	r6, #1
 8007a62:	4630      	mov	r0, r6
 8007a64:	b003      	add	sp, #12
 8007a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a6a:	6812      	ldr	r2, [r2, #0]
 8007a6c:	3b04      	subs	r3, #4
 8007a6e:	2a00      	cmp	r2, #0
 8007a70:	d1cb      	bne.n	8007a0a <quorem+0x94>
 8007a72:	3c01      	subs	r4, #1
 8007a74:	e7c6      	b.n	8007a04 <quorem+0x8e>
 8007a76:	6812      	ldr	r2, [r2, #0]
 8007a78:	3b04      	subs	r3, #4
 8007a7a:	2a00      	cmp	r2, #0
 8007a7c:	d1ef      	bne.n	8007a5e <quorem+0xe8>
 8007a7e:	3c01      	subs	r4, #1
 8007a80:	e7ea      	b.n	8007a58 <quorem+0xe2>
 8007a82:	2000      	movs	r0, #0
 8007a84:	e7ee      	b.n	8007a64 <quorem+0xee>
	...

08007a88 <_dtoa_r>:
 8007a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a8c:	4614      	mov	r4, r2
 8007a8e:	461d      	mov	r5, r3
 8007a90:	69c7      	ldr	r7, [r0, #28]
 8007a92:	b097      	sub	sp, #92	@ 0x5c
 8007a94:	4681      	mov	r9, r0
 8007a96:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007a9a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8007a9c:	b97f      	cbnz	r7, 8007abe <_dtoa_r+0x36>
 8007a9e:	2010      	movs	r0, #16
 8007aa0:	f7ff f840 	bl	8006b24 <malloc>
 8007aa4:	4602      	mov	r2, r0
 8007aa6:	f8c9 001c 	str.w	r0, [r9, #28]
 8007aaa:	b920      	cbnz	r0, 8007ab6 <_dtoa_r+0x2e>
 8007aac:	21ef      	movs	r1, #239	@ 0xef
 8007aae:	4bac      	ldr	r3, [pc, #688]	@ (8007d60 <_dtoa_r+0x2d8>)
 8007ab0:	48ac      	ldr	r0, [pc, #688]	@ (8007d64 <_dtoa_r+0x2dc>)
 8007ab2:	f001 fba7 	bl	8009204 <__assert_func>
 8007ab6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007aba:	6007      	str	r7, [r0, #0]
 8007abc:	60c7      	str	r7, [r0, #12]
 8007abe:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007ac2:	6819      	ldr	r1, [r3, #0]
 8007ac4:	b159      	cbz	r1, 8007ade <_dtoa_r+0x56>
 8007ac6:	685a      	ldr	r2, [r3, #4]
 8007ac8:	2301      	movs	r3, #1
 8007aca:	4093      	lsls	r3, r2
 8007acc:	604a      	str	r2, [r1, #4]
 8007ace:	608b      	str	r3, [r1, #8]
 8007ad0:	4648      	mov	r0, r9
 8007ad2:	f000 fe35 	bl	8008740 <_Bfree>
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007adc:	601a      	str	r2, [r3, #0]
 8007ade:	1e2b      	subs	r3, r5, #0
 8007ae0:	bfaf      	iteee	ge
 8007ae2:	2300      	movge	r3, #0
 8007ae4:	2201      	movlt	r2, #1
 8007ae6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007aea:	9307      	strlt	r3, [sp, #28]
 8007aec:	bfa8      	it	ge
 8007aee:	6033      	strge	r3, [r6, #0]
 8007af0:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8007af4:	4b9c      	ldr	r3, [pc, #624]	@ (8007d68 <_dtoa_r+0x2e0>)
 8007af6:	bfb8      	it	lt
 8007af8:	6032      	strlt	r2, [r6, #0]
 8007afa:	ea33 0308 	bics.w	r3, r3, r8
 8007afe:	d112      	bne.n	8007b26 <_dtoa_r+0x9e>
 8007b00:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007b04:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007b06:	6013      	str	r3, [r2, #0]
 8007b08:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007b0c:	4323      	orrs	r3, r4
 8007b0e:	f000 855e 	beq.w	80085ce <_dtoa_r+0xb46>
 8007b12:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007b14:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007d6c <_dtoa_r+0x2e4>
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	f000 8560 	beq.w	80085de <_dtoa_r+0xb56>
 8007b1e:	f10a 0303 	add.w	r3, sl, #3
 8007b22:	f000 bd5a 	b.w	80085da <_dtoa_r+0xb52>
 8007b26:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007b2a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007b2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007b32:	2200      	movs	r2, #0
 8007b34:	2300      	movs	r3, #0
 8007b36:	f7f8 ff41 	bl	80009bc <__aeabi_dcmpeq>
 8007b3a:	4607      	mov	r7, r0
 8007b3c:	b158      	cbz	r0, 8007b56 <_dtoa_r+0xce>
 8007b3e:	2301      	movs	r3, #1
 8007b40:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007b42:	6013      	str	r3, [r2, #0]
 8007b44:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007b46:	b113      	cbz	r3, 8007b4e <_dtoa_r+0xc6>
 8007b48:	4b89      	ldr	r3, [pc, #548]	@ (8007d70 <_dtoa_r+0x2e8>)
 8007b4a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007b4c:	6013      	str	r3, [r2, #0]
 8007b4e:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8007d74 <_dtoa_r+0x2ec>
 8007b52:	f000 bd44 	b.w	80085de <_dtoa_r+0xb56>
 8007b56:	ab14      	add	r3, sp, #80	@ 0x50
 8007b58:	9301      	str	r3, [sp, #4]
 8007b5a:	ab15      	add	r3, sp, #84	@ 0x54
 8007b5c:	9300      	str	r3, [sp, #0]
 8007b5e:	4648      	mov	r0, r9
 8007b60:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007b64:	f001 f8ce 	bl	8008d04 <__d2b>
 8007b68:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8007b6c:	9003      	str	r0, [sp, #12]
 8007b6e:	2e00      	cmp	r6, #0
 8007b70:	d078      	beq.n	8007c64 <_dtoa_r+0x1dc>
 8007b72:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007b76:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007b78:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007b7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b80:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007b84:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007b88:	9712      	str	r7, [sp, #72]	@ 0x48
 8007b8a:	4619      	mov	r1, r3
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	4b7a      	ldr	r3, [pc, #488]	@ (8007d78 <_dtoa_r+0x2f0>)
 8007b90:	f7f8 faf4 	bl	800017c <__aeabi_dsub>
 8007b94:	a36c      	add	r3, pc, #432	@ (adr r3, 8007d48 <_dtoa_r+0x2c0>)
 8007b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b9a:	f7f8 fca7 	bl	80004ec <__aeabi_dmul>
 8007b9e:	a36c      	add	r3, pc, #432	@ (adr r3, 8007d50 <_dtoa_r+0x2c8>)
 8007ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ba4:	f7f8 faec 	bl	8000180 <__adddf3>
 8007ba8:	4604      	mov	r4, r0
 8007baa:	4630      	mov	r0, r6
 8007bac:	460d      	mov	r5, r1
 8007bae:	f7f8 fc33 	bl	8000418 <__aeabi_i2d>
 8007bb2:	a369      	add	r3, pc, #420	@ (adr r3, 8007d58 <_dtoa_r+0x2d0>)
 8007bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb8:	f7f8 fc98 	bl	80004ec <__aeabi_dmul>
 8007bbc:	4602      	mov	r2, r0
 8007bbe:	460b      	mov	r3, r1
 8007bc0:	4620      	mov	r0, r4
 8007bc2:	4629      	mov	r1, r5
 8007bc4:	f7f8 fadc 	bl	8000180 <__adddf3>
 8007bc8:	4604      	mov	r4, r0
 8007bca:	460d      	mov	r5, r1
 8007bcc:	f7f8 ff3e 	bl	8000a4c <__aeabi_d2iz>
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	4607      	mov	r7, r0
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	4620      	mov	r0, r4
 8007bd8:	4629      	mov	r1, r5
 8007bda:	f7f8 fef9 	bl	80009d0 <__aeabi_dcmplt>
 8007bde:	b140      	cbz	r0, 8007bf2 <_dtoa_r+0x16a>
 8007be0:	4638      	mov	r0, r7
 8007be2:	f7f8 fc19 	bl	8000418 <__aeabi_i2d>
 8007be6:	4622      	mov	r2, r4
 8007be8:	462b      	mov	r3, r5
 8007bea:	f7f8 fee7 	bl	80009bc <__aeabi_dcmpeq>
 8007bee:	b900      	cbnz	r0, 8007bf2 <_dtoa_r+0x16a>
 8007bf0:	3f01      	subs	r7, #1
 8007bf2:	2f16      	cmp	r7, #22
 8007bf4:	d854      	bhi.n	8007ca0 <_dtoa_r+0x218>
 8007bf6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007bfa:	4b60      	ldr	r3, [pc, #384]	@ (8007d7c <_dtoa_r+0x2f4>)
 8007bfc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c04:	f7f8 fee4 	bl	80009d0 <__aeabi_dcmplt>
 8007c08:	2800      	cmp	r0, #0
 8007c0a:	d04b      	beq.n	8007ca4 <_dtoa_r+0x21c>
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	3f01      	subs	r7, #1
 8007c10:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007c12:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007c14:	1b9b      	subs	r3, r3, r6
 8007c16:	1e5a      	subs	r2, r3, #1
 8007c18:	bf49      	itett	mi
 8007c1a:	f1c3 0301 	rsbmi	r3, r3, #1
 8007c1e:	2300      	movpl	r3, #0
 8007c20:	9304      	strmi	r3, [sp, #16]
 8007c22:	2300      	movmi	r3, #0
 8007c24:	9209      	str	r2, [sp, #36]	@ 0x24
 8007c26:	bf54      	ite	pl
 8007c28:	9304      	strpl	r3, [sp, #16]
 8007c2a:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8007c2c:	2f00      	cmp	r7, #0
 8007c2e:	db3b      	blt.n	8007ca8 <_dtoa_r+0x220>
 8007c30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c32:	970e      	str	r7, [sp, #56]	@ 0x38
 8007c34:	443b      	add	r3, r7
 8007c36:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c38:	2300      	movs	r3, #0
 8007c3a:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c3c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007c3e:	2b09      	cmp	r3, #9
 8007c40:	d865      	bhi.n	8007d0e <_dtoa_r+0x286>
 8007c42:	2b05      	cmp	r3, #5
 8007c44:	bfc4      	itt	gt
 8007c46:	3b04      	subgt	r3, #4
 8007c48:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8007c4a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007c4c:	bfc8      	it	gt
 8007c4e:	2400      	movgt	r4, #0
 8007c50:	f1a3 0302 	sub.w	r3, r3, #2
 8007c54:	bfd8      	it	le
 8007c56:	2401      	movle	r4, #1
 8007c58:	2b03      	cmp	r3, #3
 8007c5a:	d864      	bhi.n	8007d26 <_dtoa_r+0x29e>
 8007c5c:	e8df f003 	tbb	[pc, r3]
 8007c60:	2c385553 	.word	0x2c385553
 8007c64:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007c68:	441e      	add	r6, r3
 8007c6a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007c6e:	2b20      	cmp	r3, #32
 8007c70:	bfc1      	itttt	gt
 8007c72:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007c76:	fa08 f803 	lslgt.w	r8, r8, r3
 8007c7a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007c7e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007c82:	bfd6      	itet	le
 8007c84:	f1c3 0320 	rsble	r3, r3, #32
 8007c88:	ea48 0003 	orrgt.w	r0, r8, r3
 8007c8c:	fa04 f003 	lslle.w	r0, r4, r3
 8007c90:	f7f8 fbb2 	bl	80003f8 <__aeabi_ui2d>
 8007c94:	2201      	movs	r2, #1
 8007c96:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007c9a:	3e01      	subs	r6, #1
 8007c9c:	9212      	str	r2, [sp, #72]	@ 0x48
 8007c9e:	e774      	b.n	8007b8a <_dtoa_r+0x102>
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	e7b5      	b.n	8007c10 <_dtoa_r+0x188>
 8007ca4:	900f      	str	r0, [sp, #60]	@ 0x3c
 8007ca6:	e7b4      	b.n	8007c12 <_dtoa_r+0x18a>
 8007ca8:	9b04      	ldr	r3, [sp, #16]
 8007caa:	1bdb      	subs	r3, r3, r7
 8007cac:	9304      	str	r3, [sp, #16]
 8007cae:	427b      	negs	r3, r7
 8007cb0:	930a      	str	r3, [sp, #40]	@ 0x28
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	930e      	str	r3, [sp, #56]	@ 0x38
 8007cb6:	e7c1      	b.n	8007c3c <_dtoa_r+0x1b4>
 8007cb8:	2301      	movs	r3, #1
 8007cba:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007cbc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007cbe:	eb07 0b03 	add.w	fp, r7, r3
 8007cc2:	f10b 0301 	add.w	r3, fp, #1
 8007cc6:	2b01      	cmp	r3, #1
 8007cc8:	9308      	str	r3, [sp, #32]
 8007cca:	bfb8      	it	lt
 8007ccc:	2301      	movlt	r3, #1
 8007cce:	e006      	b.n	8007cde <_dtoa_r+0x256>
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007cd4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	dd28      	ble.n	8007d2c <_dtoa_r+0x2a4>
 8007cda:	469b      	mov	fp, r3
 8007cdc:	9308      	str	r3, [sp, #32]
 8007cde:	2100      	movs	r1, #0
 8007ce0:	2204      	movs	r2, #4
 8007ce2:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8007ce6:	f102 0514 	add.w	r5, r2, #20
 8007cea:	429d      	cmp	r5, r3
 8007cec:	d926      	bls.n	8007d3c <_dtoa_r+0x2b4>
 8007cee:	6041      	str	r1, [r0, #4]
 8007cf0:	4648      	mov	r0, r9
 8007cf2:	f000 fce5 	bl	80086c0 <_Balloc>
 8007cf6:	4682      	mov	sl, r0
 8007cf8:	2800      	cmp	r0, #0
 8007cfa:	d143      	bne.n	8007d84 <_dtoa_r+0x2fc>
 8007cfc:	4602      	mov	r2, r0
 8007cfe:	f240 11af 	movw	r1, #431	@ 0x1af
 8007d02:	4b1f      	ldr	r3, [pc, #124]	@ (8007d80 <_dtoa_r+0x2f8>)
 8007d04:	e6d4      	b.n	8007ab0 <_dtoa_r+0x28>
 8007d06:	2300      	movs	r3, #0
 8007d08:	e7e3      	b.n	8007cd2 <_dtoa_r+0x24a>
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	e7d5      	b.n	8007cba <_dtoa_r+0x232>
 8007d0e:	2401      	movs	r4, #1
 8007d10:	2300      	movs	r3, #0
 8007d12:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007d14:	9320      	str	r3, [sp, #128]	@ 0x80
 8007d16:	f04f 3bff 	mov.w	fp, #4294967295
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	2312      	movs	r3, #18
 8007d1e:	f8cd b020 	str.w	fp, [sp, #32]
 8007d22:	9221      	str	r2, [sp, #132]	@ 0x84
 8007d24:	e7db      	b.n	8007cde <_dtoa_r+0x256>
 8007d26:	2301      	movs	r3, #1
 8007d28:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007d2a:	e7f4      	b.n	8007d16 <_dtoa_r+0x28e>
 8007d2c:	f04f 0b01 	mov.w	fp, #1
 8007d30:	465b      	mov	r3, fp
 8007d32:	f8cd b020 	str.w	fp, [sp, #32]
 8007d36:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8007d3a:	e7d0      	b.n	8007cde <_dtoa_r+0x256>
 8007d3c:	3101      	adds	r1, #1
 8007d3e:	0052      	lsls	r2, r2, #1
 8007d40:	e7d1      	b.n	8007ce6 <_dtoa_r+0x25e>
 8007d42:	bf00      	nop
 8007d44:	f3af 8000 	nop.w
 8007d48:	636f4361 	.word	0x636f4361
 8007d4c:	3fd287a7 	.word	0x3fd287a7
 8007d50:	8b60c8b3 	.word	0x8b60c8b3
 8007d54:	3fc68a28 	.word	0x3fc68a28
 8007d58:	509f79fb 	.word	0x509f79fb
 8007d5c:	3fd34413 	.word	0x3fd34413
 8007d60:	0800a147 	.word	0x0800a147
 8007d64:	0800a15e 	.word	0x0800a15e
 8007d68:	7ff00000 	.word	0x7ff00000
 8007d6c:	0800a143 	.word	0x0800a143
 8007d70:	0800a117 	.word	0x0800a117
 8007d74:	0800a116 	.word	0x0800a116
 8007d78:	3ff80000 	.word	0x3ff80000
 8007d7c:	0800a2b0 	.word	0x0800a2b0
 8007d80:	0800a1b6 	.word	0x0800a1b6
 8007d84:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007d88:	6018      	str	r0, [r3, #0]
 8007d8a:	9b08      	ldr	r3, [sp, #32]
 8007d8c:	2b0e      	cmp	r3, #14
 8007d8e:	f200 80a1 	bhi.w	8007ed4 <_dtoa_r+0x44c>
 8007d92:	2c00      	cmp	r4, #0
 8007d94:	f000 809e 	beq.w	8007ed4 <_dtoa_r+0x44c>
 8007d98:	2f00      	cmp	r7, #0
 8007d9a:	dd33      	ble.n	8007e04 <_dtoa_r+0x37c>
 8007d9c:	4b9c      	ldr	r3, [pc, #624]	@ (8008010 <_dtoa_r+0x588>)
 8007d9e:	f007 020f 	and.w	r2, r7, #15
 8007da2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007da6:	05f8      	lsls	r0, r7, #23
 8007da8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007dac:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8007db0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007db4:	d516      	bpl.n	8007de4 <_dtoa_r+0x35c>
 8007db6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007dba:	4b96      	ldr	r3, [pc, #600]	@ (8008014 <_dtoa_r+0x58c>)
 8007dbc:	2603      	movs	r6, #3
 8007dbe:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007dc2:	f7f8 fcbd 	bl	8000740 <__aeabi_ddiv>
 8007dc6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007dca:	f004 040f 	and.w	r4, r4, #15
 8007dce:	4d91      	ldr	r5, [pc, #580]	@ (8008014 <_dtoa_r+0x58c>)
 8007dd0:	b954      	cbnz	r4, 8007de8 <_dtoa_r+0x360>
 8007dd2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007dd6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007dda:	f7f8 fcb1 	bl	8000740 <__aeabi_ddiv>
 8007dde:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007de2:	e028      	b.n	8007e36 <_dtoa_r+0x3ae>
 8007de4:	2602      	movs	r6, #2
 8007de6:	e7f2      	b.n	8007dce <_dtoa_r+0x346>
 8007de8:	07e1      	lsls	r1, r4, #31
 8007dea:	d508      	bpl.n	8007dfe <_dtoa_r+0x376>
 8007dec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007df0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007df4:	f7f8 fb7a 	bl	80004ec <__aeabi_dmul>
 8007df8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007dfc:	3601      	adds	r6, #1
 8007dfe:	1064      	asrs	r4, r4, #1
 8007e00:	3508      	adds	r5, #8
 8007e02:	e7e5      	b.n	8007dd0 <_dtoa_r+0x348>
 8007e04:	f000 80af 	beq.w	8007f66 <_dtoa_r+0x4de>
 8007e08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e0c:	427c      	negs	r4, r7
 8007e0e:	4b80      	ldr	r3, [pc, #512]	@ (8008010 <_dtoa_r+0x588>)
 8007e10:	f004 020f 	and.w	r2, r4, #15
 8007e14:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e1c:	f7f8 fb66 	bl	80004ec <__aeabi_dmul>
 8007e20:	2602      	movs	r6, #2
 8007e22:	2300      	movs	r3, #0
 8007e24:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007e28:	4d7a      	ldr	r5, [pc, #488]	@ (8008014 <_dtoa_r+0x58c>)
 8007e2a:	1124      	asrs	r4, r4, #4
 8007e2c:	2c00      	cmp	r4, #0
 8007e2e:	f040 808f 	bne.w	8007f50 <_dtoa_r+0x4c8>
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d1d3      	bne.n	8007dde <_dtoa_r+0x356>
 8007e36:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8007e3a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	f000 8094 	beq.w	8007f6a <_dtoa_r+0x4e2>
 8007e42:	2200      	movs	r2, #0
 8007e44:	4620      	mov	r0, r4
 8007e46:	4629      	mov	r1, r5
 8007e48:	4b73      	ldr	r3, [pc, #460]	@ (8008018 <_dtoa_r+0x590>)
 8007e4a:	f7f8 fdc1 	bl	80009d0 <__aeabi_dcmplt>
 8007e4e:	2800      	cmp	r0, #0
 8007e50:	f000 808b 	beq.w	8007f6a <_dtoa_r+0x4e2>
 8007e54:	9b08      	ldr	r3, [sp, #32]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	f000 8087 	beq.w	8007f6a <_dtoa_r+0x4e2>
 8007e5c:	f1bb 0f00 	cmp.w	fp, #0
 8007e60:	dd34      	ble.n	8007ecc <_dtoa_r+0x444>
 8007e62:	4620      	mov	r0, r4
 8007e64:	2200      	movs	r2, #0
 8007e66:	4629      	mov	r1, r5
 8007e68:	4b6c      	ldr	r3, [pc, #432]	@ (800801c <_dtoa_r+0x594>)
 8007e6a:	f7f8 fb3f 	bl	80004ec <__aeabi_dmul>
 8007e6e:	465c      	mov	r4, fp
 8007e70:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007e74:	f107 38ff 	add.w	r8, r7, #4294967295
 8007e78:	3601      	adds	r6, #1
 8007e7a:	4630      	mov	r0, r6
 8007e7c:	f7f8 facc 	bl	8000418 <__aeabi_i2d>
 8007e80:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007e84:	f7f8 fb32 	bl	80004ec <__aeabi_dmul>
 8007e88:	2200      	movs	r2, #0
 8007e8a:	4b65      	ldr	r3, [pc, #404]	@ (8008020 <_dtoa_r+0x598>)
 8007e8c:	f7f8 f978 	bl	8000180 <__adddf3>
 8007e90:	4605      	mov	r5, r0
 8007e92:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007e96:	2c00      	cmp	r4, #0
 8007e98:	d16a      	bne.n	8007f70 <_dtoa_r+0x4e8>
 8007e9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	4b60      	ldr	r3, [pc, #384]	@ (8008024 <_dtoa_r+0x59c>)
 8007ea2:	f7f8 f96b 	bl	800017c <__aeabi_dsub>
 8007ea6:	4602      	mov	r2, r0
 8007ea8:	460b      	mov	r3, r1
 8007eaa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007eae:	462a      	mov	r2, r5
 8007eb0:	4633      	mov	r3, r6
 8007eb2:	f7f8 fdab 	bl	8000a0c <__aeabi_dcmpgt>
 8007eb6:	2800      	cmp	r0, #0
 8007eb8:	f040 8298 	bne.w	80083ec <_dtoa_r+0x964>
 8007ebc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007ec0:	462a      	mov	r2, r5
 8007ec2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007ec6:	f7f8 fd83 	bl	80009d0 <__aeabi_dcmplt>
 8007eca:	bb38      	cbnz	r0, 8007f1c <_dtoa_r+0x494>
 8007ecc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007ed0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007ed4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	f2c0 8157 	blt.w	800818a <_dtoa_r+0x702>
 8007edc:	2f0e      	cmp	r7, #14
 8007ede:	f300 8154 	bgt.w	800818a <_dtoa_r+0x702>
 8007ee2:	4b4b      	ldr	r3, [pc, #300]	@ (8008010 <_dtoa_r+0x588>)
 8007ee4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007ee8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007eec:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007ef0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	f280 80e5 	bge.w	80080c2 <_dtoa_r+0x63a>
 8007ef8:	9b08      	ldr	r3, [sp, #32]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	f300 80e1 	bgt.w	80080c2 <_dtoa_r+0x63a>
 8007f00:	d10c      	bne.n	8007f1c <_dtoa_r+0x494>
 8007f02:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f06:	2200      	movs	r2, #0
 8007f08:	4b46      	ldr	r3, [pc, #280]	@ (8008024 <_dtoa_r+0x59c>)
 8007f0a:	f7f8 faef 	bl	80004ec <__aeabi_dmul>
 8007f0e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007f12:	f7f8 fd71 	bl	80009f8 <__aeabi_dcmpge>
 8007f16:	2800      	cmp	r0, #0
 8007f18:	f000 8266 	beq.w	80083e8 <_dtoa_r+0x960>
 8007f1c:	2400      	movs	r4, #0
 8007f1e:	4625      	mov	r5, r4
 8007f20:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007f22:	4656      	mov	r6, sl
 8007f24:	ea6f 0803 	mvn.w	r8, r3
 8007f28:	2700      	movs	r7, #0
 8007f2a:	4621      	mov	r1, r4
 8007f2c:	4648      	mov	r0, r9
 8007f2e:	f000 fc07 	bl	8008740 <_Bfree>
 8007f32:	2d00      	cmp	r5, #0
 8007f34:	f000 80bd 	beq.w	80080b2 <_dtoa_r+0x62a>
 8007f38:	b12f      	cbz	r7, 8007f46 <_dtoa_r+0x4be>
 8007f3a:	42af      	cmp	r7, r5
 8007f3c:	d003      	beq.n	8007f46 <_dtoa_r+0x4be>
 8007f3e:	4639      	mov	r1, r7
 8007f40:	4648      	mov	r0, r9
 8007f42:	f000 fbfd 	bl	8008740 <_Bfree>
 8007f46:	4629      	mov	r1, r5
 8007f48:	4648      	mov	r0, r9
 8007f4a:	f000 fbf9 	bl	8008740 <_Bfree>
 8007f4e:	e0b0      	b.n	80080b2 <_dtoa_r+0x62a>
 8007f50:	07e2      	lsls	r2, r4, #31
 8007f52:	d505      	bpl.n	8007f60 <_dtoa_r+0x4d8>
 8007f54:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007f58:	f7f8 fac8 	bl	80004ec <__aeabi_dmul>
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	3601      	adds	r6, #1
 8007f60:	1064      	asrs	r4, r4, #1
 8007f62:	3508      	adds	r5, #8
 8007f64:	e762      	b.n	8007e2c <_dtoa_r+0x3a4>
 8007f66:	2602      	movs	r6, #2
 8007f68:	e765      	b.n	8007e36 <_dtoa_r+0x3ae>
 8007f6a:	46b8      	mov	r8, r7
 8007f6c:	9c08      	ldr	r4, [sp, #32]
 8007f6e:	e784      	b.n	8007e7a <_dtoa_r+0x3f2>
 8007f70:	4b27      	ldr	r3, [pc, #156]	@ (8008010 <_dtoa_r+0x588>)
 8007f72:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007f74:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007f78:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007f7c:	4454      	add	r4, sl
 8007f7e:	2900      	cmp	r1, #0
 8007f80:	d054      	beq.n	800802c <_dtoa_r+0x5a4>
 8007f82:	2000      	movs	r0, #0
 8007f84:	4928      	ldr	r1, [pc, #160]	@ (8008028 <_dtoa_r+0x5a0>)
 8007f86:	f7f8 fbdb 	bl	8000740 <__aeabi_ddiv>
 8007f8a:	4633      	mov	r3, r6
 8007f8c:	462a      	mov	r2, r5
 8007f8e:	f7f8 f8f5 	bl	800017c <__aeabi_dsub>
 8007f92:	4656      	mov	r6, sl
 8007f94:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007f98:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f9c:	f7f8 fd56 	bl	8000a4c <__aeabi_d2iz>
 8007fa0:	4605      	mov	r5, r0
 8007fa2:	f7f8 fa39 	bl	8000418 <__aeabi_i2d>
 8007fa6:	4602      	mov	r2, r0
 8007fa8:	460b      	mov	r3, r1
 8007faa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007fae:	f7f8 f8e5 	bl	800017c <__aeabi_dsub>
 8007fb2:	4602      	mov	r2, r0
 8007fb4:	460b      	mov	r3, r1
 8007fb6:	3530      	adds	r5, #48	@ 0x30
 8007fb8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007fbc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007fc0:	f806 5b01 	strb.w	r5, [r6], #1
 8007fc4:	f7f8 fd04 	bl	80009d0 <__aeabi_dcmplt>
 8007fc8:	2800      	cmp	r0, #0
 8007fca:	d172      	bne.n	80080b2 <_dtoa_r+0x62a>
 8007fcc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007fd0:	2000      	movs	r0, #0
 8007fd2:	4911      	ldr	r1, [pc, #68]	@ (8008018 <_dtoa_r+0x590>)
 8007fd4:	f7f8 f8d2 	bl	800017c <__aeabi_dsub>
 8007fd8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007fdc:	f7f8 fcf8 	bl	80009d0 <__aeabi_dcmplt>
 8007fe0:	2800      	cmp	r0, #0
 8007fe2:	f040 80b4 	bne.w	800814e <_dtoa_r+0x6c6>
 8007fe6:	42a6      	cmp	r6, r4
 8007fe8:	f43f af70 	beq.w	8007ecc <_dtoa_r+0x444>
 8007fec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	4b0a      	ldr	r3, [pc, #40]	@ (800801c <_dtoa_r+0x594>)
 8007ff4:	f7f8 fa7a 	bl	80004ec <__aeabi_dmul>
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007ffe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008002:	4b06      	ldr	r3, [pc, #24]	@ (800801c <_dtoa_r+0x594>)
 8008004:	f7f8 fa72 	bl	80004ec <__aeabi_dmul>
 8008008:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800800c:	e7c4      	b.n	8007f98 <_dtoa_r+0x510>
 800800e:	bf00      	nop
 8008010:	0800a2b0 	.word	0x0800a2b0
 8008014:	0800a288 	.word	0x0800a288
 8008018:	3ff00000 	.word	0x3ff00000
 800801c:	40240000 	.word	0x40240000
 8008020:	401c0000 	.word	0x401c0000
 8008024:	40140000 	.word	0x40140000
 8008028:	3fe00000 	.word	0x3fe00000
 800802c:	4631      	mov	r1, r6
 800802e:	4628      	mov	r0, r5
 8008030:	f7f8 fa5c 	bl	80004ec <__aeabi_dmul>
 8008034:	4656      	mov	r6, sl
 8008036:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800803a:	9413      	str	r4, [sp, #76]	@ 0x4c
 800803c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008040:	f7f8 fd04 	bl	8000a4c <__aeabi_d2iz>
 8008044:	4605      	mov	r5, r0
 8008046:	f7f8 f9e7 	bl	8000418 <__aeabi_i2d>
 800804a:	4602      	mov	r2, r0
 800804c:	460b      	mov	r3, r1
 800804e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008052:	f7f8 f893 	bl	800017c <__aeabi_dsub>
 8008056:	4602      	mov	r2, r0
 8008058:	460b      	mov	r3, r1
 800805a:	3530      	adds	r5, #48	@ 0x30
 800805c:	f806 5b01 	strb.w	r5, [r6], #1
 8008060:	42a6      	cmp	r6, r4
 8008062:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008066:	f04f 0200 	mov.w	r2, #0
 800806a:	d124      	bne.n	80080b6 <_dtoa_r+0x62e>
 800806c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008070:	4bae      	ldr	r3, [pc, #696]	@ (800832c <_dtoa_r+0x8a4>)
 8008072:	f7f8 f885 	bl	8000180 <__adddf3>
 8008076:	4602      	mov	r2, r0
 8008078:	460b      	mov	r3, r1
 800807a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800807e:	f7f8 fcc5 	bl	8000a0c <__aeabi_dcmpgt>
 8008082:	2800      	cmp	r0, #0
 8008084:	d163      	bne.n	800814e <_dtoa_r+0x6c6>
 8008086:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800808a:	2000      	movs	r0, #0
 800808c:	49a7      	ldr	r1, [pc, #668]	@ (800832c <_dtoa_r+0x8a4>)
 800808e:	f7f8 f875 	bl	800017c <__aeabi_dsub>
 8008092:	4602      	mov	r2, r0
 8008094:	460b      	mov	r3, r1
 8008096:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800809a:	f7f8 fc99 	bl	80009d0 <__aeabi_dcmplt>
 800809e:	2800      	cmp	r0, #0
 80080a0:	f43f af14 	beq.w	8007ecc <_dtoa_r+0x444>
 80080a4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80080a6:	1e73      	subs	r3, r6, #1
 80080a8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80080aa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80080ae:	2b30      	cmp	r3, #48	@ 0x30
 80080b0:	d0f8      	beq.n	80080a4 <_dtoa_r+0x61c>
 80080b2:	4647      	mov	r7, r8
 80080b4:	e03b      	b.n	800812e <_dtoa_r+0x6a6>
 80080b6:	4b9e      	ldr	r3, [pc, #632]	@ (8008330 <_dtoa_r+0x8a8>)
 80080b8:	f7f8 fa18 	bl	80004ec <__aeabi_dmul>
 80080bc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80080c0:	e7bc      	b.n	800803c <_dtoa_r+0x5b4>
 80080c2:	4656      	mov	r6, sl
 80080c4:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80080c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080cc:	4620      	mov	r0, r4
 80080ce:	4629      	mov	r1, r5
 80080d0:	f7f8 fb36 	bl	8000740 <__aeabi_ddiv>
 80080d4:	f7f8 fcba 	bl	8000a4c <__aeabi_d2iz>
 80080d8:	4680      	mov	r8, r0
 80080da:	f7f8 f99d 	bl	8000418 <__aeabi_i2d>
 80080de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080e2:	f7f8 fa03 	bl	80004ec <__aeabi_dmul>
 80080e6:	4602      	mov	r2, r0
 80080e8:	460b      	mov	r3, r1
 80080ea:	4620      	mov	r0, r4
 80080ec:	4629      	mov	r1, r5
 80080ee:	f7f8 f845 	bl	800017c <__aeabi_dsub>
 80080f2:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80080f6:	9d08      	ldr	r5, [sp, #32]
 80080f8:	f806 4b01 	strb.w	r4, [r6], #1
 80080fc:	eba6 040a 	sub.w	r4, r6, sl
 8008100:	42a5      	cmp	r5, r4
 8008102:	4602      	mov	r2, r0
 8008104:	460b      	mov	r3, r1
 8008106:	d133      	bne.n	8008170 <_dtoa_r+0x6e8>
 8008108:	f7f8 f83a 	bl	8000180 <__adddf3>
 800810c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008110:	4604      	mov	r4, r0
 8008112:	460d      	mov	r5, r1
 8008114:	f7f8 fc7a 	bl	8000a0c <__aeabi_dcmpgt>
 8008118:	b9c0      	cbnz	r0, 800814c <_dtoa_r+0x6c4>
 800811a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800811e:	4620      	mov	r0, r4
 8008120:	4629      	mov	r1, r5
 8008122:	f7f8 fc4b 	bl	80009bc <__aeabi_dcmpeq>
 8008126:	b110      	cbz	r0, 800812e <_dtoa_r+0x6a6>
 8008128:	f018 0f01 	tst.w	r8, #1
 800812c:	d10e      	bne.n	800814c <_dtoa_r+0x6c4>
 800812e:	4648      	mov	r0, r9
 8008130:	9903      	ldr	r1, [sp, #12]
 8008132:	f000 fb05 	bl	8008740 <_Bfree>
 8008136:	2300      	movs	r3, #0
 8008138:	7033      	strb	r3, [r6, #0]
 800813a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800813c:	3701      	adds	r7, #1
 800813e:	601f      	str	r7, [r3, #0]
 8008140:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008142:	2b00      	cmp	r3, #0
 8008144:	f000 824b 	beq.w	80085de <_dtoa_r+0xb56>
 8008148:	601e      	str	r6, [r3, #0]
 800814a:	e248      	b.n	80085de <_dtoa_r+0xb56>
 800814c:	46b8      	mov	r8, r7
 800814e:	4633      	mov	r3, r6
 8008150:	461e      	mov	r6, r3
 8008152:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008156:	2a39      	cmp	r2, #57	@ 0x39
 8008158:	d106      	bne.n	8008168 <_dtoa_r+0x6e0>
 800815a:	459a      	cmp	sl, r3
 800815c:	d1f8      	bne.n	8008150 <_dtoa_r+0x6c8>
 800815e:	2230      	movs	r2, #48	@ 0x30
 8008160:	f108 0801 	add.w	r8, r8, #1
 8008164:	f88a 2000 	strb.w	r2, [sl]
 8008168:	781a      	ldrb	r2, [r3, #0]
 800816a:	3201      	adds	r2, #1
 800816c:	701a      	strb	r2, [r3, #0]
 800816e:	e7a0      	b.n	80080b2 <_dtoa_r+0x62a>
 8008170:	2200      	movs	r2, #0
 8008172:	4b6f      	ldr	r3, [pc, #444]	@ (8008330 <_dtoa_r+0x8a8>)
 8008174:	f7f8 f9ba 	bl	80004ec <__aeabi_dmul>
 8008178:	2200      	movs	r2, #0
 800817a:	2300      	movs	r3, #0
 800817c:	4604      	mov	r4, r0
 800817e:	460d      	mov	r5, r1
 8008180:	f7f8 fc1c 	bl	80009bc <__aeabi_dcmpeq>
 8008184:	2800      	cmp	r0, #0
 8008186:	d09f      	beq.n	80080c8 <_dtoa_r+0x640>
 8008188:	e7d1      	b.n	800812e <_dtoa_r+0x6a6>
 800818a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800818c:	2a00      	cmp	r2, #0
 800818e:	f000 80ea 	beq.w	8008366 <_dtoa_r+0x8de>
 8008192:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008194:	2a01      	cmp	r2, #1
 8008196:	f300 80cd 	bgt.w	8008334 <_dtoa_r+0x8ac>
 800819a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800819c:	2a00      	cmp	r2, #0
 800819e:	f000 80c1 	beq.w	8008324 <_dtoa_r+0x89c>
 80081a2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80081a6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80081a8:	9e04      	ldr	r6, [sp, #16]
 80081aa:	9a04      	ldr	r2, [sp, #16]
 80081ac:	2101      	movs	r1, #1
 80081ae:	441a      	add	r2, r3
 80081b0:	9204      	str	r2, [sp, #16]
 80081b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80081b4:	4648      	mov	r0, r9
 80081b6:	441a      	add	r2, r3
 80081b8:	9209      	str	r2, [sp, #36]	@ 0x24
 80081ba:	f000 fb75 	bl	80088a8 <__i2b>
 80081be:	4605      	mov	r5, r0
 80081c0:	b166      	cbz	r6, 80081dc <_dtoa_r+0x754>
 80081c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	dd09      	ble.n	80081dc <_dtoa_r+0x754>
 80081c8:	42b3      	cmp	r3, r6
 80081ca:	bfa8      	it	ge
 80081cc:	4633      	movge	r3, r6
 80081ce:	9a04      	ldr	r2, [sp, #16]
 80081d0:	1af6      	subs	r6, r6, r3
 80081d2:	1ad2      	subs	r2, r2, r3
 80081d4:	9204      	str	r2, [sp, #16]
 80081d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80081d8:	1ad3      	subs	r3, r2, r3
 80081da:	9309      	str	r3, [sp, #36]	@ 0x24
 80081dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80081de:	b30b      	cbz	r3, 8008224 <_dtoa_r+0x79c>
 80081e0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	f000 80c6 	beq.w	8008374 <_dtoa_r+0x8ec>
 80081e8:	2c00      	cmp	r4, #0
 80081ea:	f000 80c0 	beq.w	800836e <_dtoa_r+0x8e6>
 80081ee:	4629      	mov	r1, r5
 80081f0:	4622      	mov	r2, r4
 80081f2:	4648      	mov	r0, r9
 80081f4:	f000 fc10 	bl	8008a18 <__pow5mult>
 80081f8:	9a03      	ldr	r2, [sp, #12]
 80081fa:	4601      	mov	r1, r0
 80081fc:	4605      	mov	r5, r0
 80081fe:	4648      	mov	r0, r9
 8008200:	f000 fb68 	bl	80088d4 <__multiply>
 8008204:	9903      	ldr	r1, [sp, #12]
 8008206:	4680      	mov	r8, r0
 8008208:	4648      	mov	r0, r9
 800820a:	f000 fa99 	bl	8008740 <_Bfree>
 800820e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008210:	1b1b      	subs	r3, r3, r4
 8008212:	930a      	str	r3, [sp, #40]	@ 0x28
 8008214:	f000 80b1 	beq.w	800837a <_dtoa_r+0x8f2>
 8008218:	4641      	mov	r1, r8
 800821a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800821c:	4648      	mov	r0, r9
 800821e:	f000 fbfb 	bl	8008a18 <__pow5mult>
 8008222:	9003      	str	r0, [sp, #12]
 8008224:	2101      	movs	r1, #1
 8008226:	4648      	mov	r0, r9
 8008228:	f000 fb3e 	bl	80088a8 <__i2b>
 800822c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800822e:	4604      	mov	r4, r0
 8008230:	2b00      	cmp	r3, #0
 8008232:	f000 81d8 	beq.w	80085e6 <_dtoa_r+0xb5e>
 8008236:	461a      	mov	r2, r3
 8008238:	4601      	mov	r1, r0
 800823a:	4648      	mov	r0, r9
 800823c:	f000 fbec 	bl	8008a18 <__pow5mult>
 8008240:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008242:	4604      	mov	r4, r0
 8008244:	2b01      	cmp	r3, #1
 8008246:	f300 809f 	bgt.w	8008388 <_dtoa_r+0x900>
 800824a:	9b06      	ldr	r3, [sp, #24]
 800824c:	2b00      	cmp	r3, #0
 800824e:	f040 8097 	bne.w	8008380 <_dtoa_r+0x8f8>
 8008252:	9b07      	ldr	r3, [sp, #28]
 8008254:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008258:	2b00      	cmp	r3, #0
 800825a:	f040 8093 	bne.w	8008384 <_dtoa_r+0x8fc>
 800825e:	9b07      	ldr	r3, [sp, #28]
 8008260:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008264:	0d1b      	lsrs	r3, r3, #20
 8008266:	051b      	lsls	r3, r3, #20
 8008268:	b133      	cbz	r3, 8008278 <_dtoa_r+0x7f0>
 800826a:	9b04      	ldr	r3, [sp, #16]
 800826c:	3301      	adds	r3, #1
 800826e:	9304      	str	r3, [sp, #16]
 8008270:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008272:	3301      	adds	r3, #1
 8008274:	9309      	str	r3, [sp, #36]	@ 0x24
 8008276:	2301      	movs	r3, #1
 8008278:	930a      	str	r3, [sp, #40]	@ 0x28
 800827a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800827c:	2b00      	cmp	r3, #0
 800827e:	f000 81b8 	beq.w	80085f2 <_dtoa_r+0xb6a>
 8008282:	6923      	ldr	r3, [r4, #16]
 8008284:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008288:	6918      	ldr	r0, [r3, #16]
 800828a:	f000 fac1 	bl	8008810 <__hi0bits>
 800828e:	f1c0 0020 	rsb	r0, r0, #32
 8008292:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008294:	4418      	add	r0, r3
 8008296:	f010 001f 	ands.w	r0, r0, #31
 800829a:	f000 8082 	beq.w	80083a2 <_dtoa_r+0x91a>
 800829e:	f1c0 0320 	rsb	r3, r0, #32
 80082a2:	2b04      	cmp	r3, #4
 80082a4:	dd73      	ble.n	800838e <_dtoa_r+0x906>
 80082a6:	9b04      	ldr	r3, [sp, #16]
 80082a8:	f1c0 001c 	rsb	r0, r0, #28
 80082ac:	4403      	add	r3, r0
 80082ae:	9304      	str	r3, [sp, #16]
 80082b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082b2:	4406      	add	r6, r0
 80082b4:	4403      	add	r3, r0
 80082b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80082b8:	9b04      	ldr	r3, [sp, #16]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	dd05      	ble.n	80082ca <_dtoa_r+0x842>
 80082be:	461a      	mov	r2, r3
 80082c0:	4648      	mov	r0, r9
 80082c2:	9903      	ldr	r1, [sp, #12]
 80082c4:	f000 fc02 	bl	8008acc <__lshift>
 80082c8:	9003      	str	r0, [sp, #12]
 80082ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	dd05      	ble.n	80082dc <_dtoa_r+0x854>
 80082d0:	4621      	mov	r1, r4
 80082d2:	461a      	mov	r2, r3
 80082d4:	4648      	mov	r0, r9
 80082d6:	f000 fbf9 	bl	8008acc <__lshift>
 80082da:	4604      	mov	r4, r0
 80082dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d061      	beq.n	80083a6 <_dtoa_r+0x91e>
 80082e2:	4621      	mov	r1, r4
 80082e4:	9803      	ldr	r0, [sp, #12]
 80082e6:	f000 fc5d 	bl	8008ba4 <__mcmp>
 80082ea:	2800      	cmp	r0, #0
 80082ec:	da5b      	bge.n	80083a6 <_dtoa_r+0x91e>
 80082ee:	2300      	movs	r3, #0
 80082f0:	220a      	movs	r2, #10
 80082f2:	4648      	mov	r0, r9
 80082f4:	9903      	ldr	r1, [sp, #12]
 80082f6:	f000 fa45 	bl	8008784 <__multadd>
 80082fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80082fc:	f107 38ff 	add.w	r8, r7, #4294967295
 8008300:	9003      	str	r0, [sp, #12]
 8008302:	2b00      	cmp	r3, #0
 8008304:	f000 8177 	beq.w	80085f6 <_dtoa_r+0xb6e>
 8008308:	4629      	mov	r1, r5
 800830a:	2300      	movs	r3, #0
 800830c:	220a      	movs	r2, #10
 800830e:	4648      	mov	r0, r9
 8008310:	f000 fa38 	bl	8008784 <__multadd>
 8008314:	f1bb 0f00 	cmp.w	fp, #0
 8008318:	4605      	mov	r5, r0
 800831a:	dc6f      	bgt.n	80083fc <_dtoa_r+0x974>
 800831c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800831e:	2b02      	cmp	r3, #2
 8008320:	dc49      	bgt.n	80083b6 <_dtoa_r+0x92e>
 8008322:	e06b      	b.n	80083fc <_dtoa_r+0x974>
 8008324:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008326:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800832a:	e73c      	b.n	80081a6 <_dtoa_r+0x71e>
 800832c:	3fe00000 	.word	0x3fe00000
 8008330:	40240000 	.word	0x40240000
 8008334:	9b08      	ldr	r3, [sp, #32]
 8008336:	1e5c      	subs	r4, r3, #1
 8008338:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800833a:	42a3      	cmp	r3, r4
 800833c:	db09      	blt.n	8008352 <_dtoa_r+0x8ca>
 800833e:	1b1c      	subs	r4, r3, r4
 8008340:	9b08      	ldr	r3, [sp, #32]
 8008342:	2b00      	cmp	r3, #0
 8008344:	f6bf af30 	bge.w	80081a8 <_dtoa_r+0x720>
 8008348:	9b04      	ldr	r3, [sp, #16]
 800834a:	9a08      	ldr	r2, [sp, #32]
 800834c:	1a9e      	subs	r6, r3, r2
 800834e:	2300      	movs	r3, #0
 8008350:	e72b      	b.n	80081aa <_dtoa_r+0x722>
 8008352:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008354:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008356:	1ae3      	subs	r3, r4, r3
 8008358:	441a      	add	r2, r3
 800835a:	940a      	str	r4, [sp, #40]	@ 0x28
 800835c:	9e04      	ldr	r6, [sp, #16]
 800835e:	2400      	movs	r4, #0
 8008360:	9b08      	ldr	r3, [sp, #32]
 8008362:	920e      	str	r2, [sp, #56]	@ 0x38
 8008364:	e721      	b.n	80081aa <_dtoa_r+0x722>
 8008366:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008368:	9e04      	ldr	r6, [sp, #16]
 800836a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800836c:	e728      	b.n	80081c0 <_dtoa_r+0x738>
 800836e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008372:	e751      	b.n	8008218 <_dtoa_r+0x790>
 8008374:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008376:	9903      	ldr	r1, [sp, #12]
 8008378:	e750      	b.n	800821c <_dtoa_r+0x794>
 800837a:	f8cd 800c 	str.w	r8, [sp, #12]
 800837e:	e751      	b.n	8008224 <_dtoa_r+0x79c>
 8008380:	2300      	movs	r3, #0
 8008382:	e779      	b.n	8008278 <_dtoa_r+0x7f0>
 8008384:	9b06      	ldr	r3, [sp, #24]
 8008386:	e777      	b.n	8008278 <_dtoa_r+0x7f0>
 8008388:	2300      	movs	r3, #0
 800838a:	930a      	str	r3, [sp, #40]	@ 0x28
 800838c:	e779      	b.n	8008282 <_dtoa_r+0x7fa>
 800838e:	d093      	beq.n	80082b8 <_dtoa_r+0x830>
 8008390:	9a04      	ldr	r2, [sp, #16]
 8008392:	331c      	adds	r3, #28
 8008394:	441a      	add	r2, r3
 8008396:	9204      	str	r2, [sp, #16]
 8008398:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800839a:	441e      	add	r6, r3
 800839c:	441a      	add	r2, r3
 800839e:	9209      	str	r2, [sp, #36]	@ 0x24
 80083a0:	e78a      	b.n	80082b8 <_dtoa_r+0x830>
 80083a2:	4603      	mov	r3, r0
 80083a4:	e7f4      	b.n	8008390 <_dtoa_r+0x908>
 80083a6:	9b08      	ldr	r3, [sp, #32]
 80083a8:	46b8      	mov	r8, r7
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	dc20      	bgt.n	80083f0 <_dtoa_r+0x968>
 80083ae:	469b      	mov	fp, r3
 80083b0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80083b2:	2b02      	cmp	r3, #2
 80083b4:	dd1e      	ble.n	80083f4 <_dtoa_r+0x96c>
 80083b6:	f1bb 0f00 	cmp.w	fp, #0
 80083ba:	f47f adb1 	bne.w	8007f20 <_dtoa_r+0x498>
 80083be:	4621      	mov	r1, r4
 80083c0:	465b      	mov	r3, fp
 80083c2:	2205      	movs	r2, #5
 80083c4:	4648      	mov	r0, r9
 80083c6:	f000 f9dd 	bl	8008784 <__multadd>
 80083ca:	4601      	mov	r1, r0
 80083cc:	4604      	mov	r4, r0
 80083ce:	9803      	ldr	r0, [sp, #12]
 80083d0:	f000 fbe8 	bl	8008ba4 <__mcmp>
 80083d4:	2800      	cmp	r0, #0
 80083d6:	f77f ada3 	ble.w	8007f20 <_dtoa_r+0x498>
 80083da:	4656      	mov	r6, sl
 80083dc:	2331      	movs	r3, #49	@ 0x31
 80083de:	f108 0801 	add.w	r8, r8, #1
 80083e2:	f806 3b01 	strb.w	r3, [r6], #1
 80083e6:	e59f      	b.n	8007f28 <_dtoa_r+0x4a0>
 80083e8:	46b8      	mov	r8, r7
 80083ea:	9c08      	ldr	r4, [sp, #32]
 80083ec:	4625      	mov	r5, r4
 80083ee:	e7f4      	b.n	80083da <_dtoa_r+0x952>
 80083f0:	f8dd b020 	ldr.w	fp, [sp, #32]
 80083f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	f000 8101 	beq.w	80085fe <_dtoa_r+0xb76>
 80083fc:	2e00      	cmp	r6, #0
 80083fe:	dd05      	ble.n	800840c <_dtoa_r+0x984>
 8008400:	4629      	mov	r1, r5
 8008402:	4632      	mov	r2, r6
 8008404:	4648      	mov	r0, r9
 8008406:	f000 fb61 	bl	8008acc <__lshift>
 800840a:	4605      	mov	r5, r0
 800840c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800840e:	2b00      	cmp	r3, #0
 8008410:	d05c      	beq.n	80084cc <_dtoa_r+0xa44>
 8008412:	4648      	mov	r0, r9
 8008414:	6869      	ldr	r1, [r5, #4]
 8008416:	f000 f953 	bl	80086c0 <_Balloc>
 800841a:	4606      	mov	r6, r0
 800841c:	b928      	cbnz	r0, 800842a <_dtoa_r+0x9a2>
 800841e:	4602      	mov	r2, r0
 8008420:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008424:	4b80      	ldr	r3, [pc, #512]	@ (8008628 <_dtoa_r+0xba0>)
 8008426:	f7ff bb43 	b.w	8007ab0 <_dtoa_r+0x28>
 800842a:	692a      	ldr	r2, [r5, #16]
 800842c:	f105 010c 	add.w	r1, r5, #12
 8008430:	3202      	adds	r2, #2
 8008432:	0092      	lsls	r2, r2, #2
 8008434:	300c      	adds	r0, #12
 8008436:	f000 fed7 	bl	80091e8 <memcpy>
 800843a:	2201      	movs	r2, #1
 800843c:	4631      	mov	r1, r6
 800843e:	4648      	mov	r0, r9
 8008440:	f000 fb44 	bl	8008acc <__lshift>
 8008444:	462f      	mov	r7, r5
 8008446:	4605      	mov	r5, r0
 8008448:	f10a 0301 	add.w	r3, sl, #1
 800844c:	9304      	str	r3, [sp, #16]
 800844e:	eb0a 030b 	add.w	r3, sl, fp
 8008452:	930a      	str	r3, [sp, #40]	@ 0x28
 8008454:	9b06      	ldr	r3, [sp, #24]
 8008456:	f003 0301 	and.w	r3, r3, #1
 800845a:	9309      	str	r3, [sp, #36]	@ 0x24
 800845c:	9b04      	ldr	r3, [sp, #16]
 800845e:	4621      	mov	r1, r4
 8008460:	9803      	ldr	r0, [sp, #12]
 8008462:	f103 3bff 	add.w	fp, r3, #4294967295
 8008466:	f7ff fa86 	bl	8007976 <quorem>
 800846a:	4603      	mov	r3, r0
 800846c:	4639      	mov	r1, r7
 800846e:	3330      	adds	r3, #48	@ 0x30
 8008470:	9006      	str	r0, [sp, #24]
 8008472:	9803      	ldr	r0, [sp, #12]
 8008474:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008476:	f000 fb95 	bl	8008ba4 <__mcmp>
 800847a:	462a      	mov	r2, r5
 800847c:	9008      	str	r0, [sp, #32]
 800847e:	4621      	mov	r1, r4
 8008480:	4648      	mov	r0, r9
 8008482:	f000 fbab 	bl	8008bdc <__mdiff>
 8008486:	68c2      	ldr	r2, [r0, #12]
 8008488:	4606      	mov	r6, r0
 800848a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800848c:	bb02      	cbnz	r2, 80084d0 <_dtoa_r+0xa48>
 800848e:	4601      	mov	r1, r0
 8008490:	9803      	ldr	r0, [sp, #12]
 8008492:	f000 fb87 	bl	8008ba4 <__mcmp>
 8008496:	4602      	mov	r2, r0
 8008498:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800849a:	4631      	mov	r1, r6
 800849c:	4648      	mov	r0, r9
 800849e:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 80084a2:	f000 f94d 	bl	8008740 <_Bfree>
 80084a6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80084a8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80084aa:	9e04      	ldr	r6, [sp, #16]
 80084ac:	ea42 0103 	orr.w	r1, r2, r3
 80084b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084b2:	4319      	orrs	r1, r3
 80084b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80084b6:	d10d      	bne.n	80084d4 <_dtoa_r+0xa4c>
 80084b8:	2b39      	cmp	r3, #57	@ 0x39
 80084ba:	d027      	beq.n	800850c <_dtoa_r+0xa84>
 80084bc:	9a08      	ldr	r2, [sp, #32]
 80084be:	2a00      	cmp	r2, #0
 80084c0:	dd01      	ble.n	80084c6 <_dtoa_r+0xa3e>
 80084c2:	9b06      	ldr	r3, [sp, #24]
 80084c4:	3331      	adds	r3, #49	@ 0x31
 80084c6:	f88b 3000 	strb.w	r3, [fp]
 80084ca:	e52e      	b.n	8007f2a <_dtoa_r+0x4a2>
 80084cc:	4628      	mov	r0, r5
 80084ce:	e7b9      	b.n	8008444 <_dtoa_r+0x9bc>
 80084d0:	2201      	movs	r2, #1
 80084d2:	e7e2      	b.n	800849a <_dtoa_r+0xa12>
 80084d4:	9908      	ldr	r1, [sp, #32]
 80084d6:	2900      	cmp	r1, #0
 80084d8:	db04      	blt.n	80084e4 <_dtoa_r+0xa5c>
 80084da:	9820      	ldr	r0, [sp, #128]	@ 0x80
 80084dc:	4301      	orrs	r1, r0
 80084de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80084e0:	4301      	orrs	r1, r0
 80084e2:	d120      	bne.n	8008526 <_dtoa_r+0xa9e>
 80084e4:	2a00      	cmp	r2, #0
 80084e6:	ddee      	ble.n	80084c6 <_dtoa_r+0xa3e>
 80084e8:	2201      	movs	r2, #1
 80084ea:	9903      	ldr	r1, [sp, #12]
 80084ec:	4648      	mov	r0, r9
 80084ee:	9304      	str	r3, [sp, #16]
 80084f0:	f000 faec 	bl	8008acc <__lshift>
 80084f4:	4621      	mov	r1, r4
 80084f6:	9003      	str	r0, [sp, #12]
 80084f8:	f000 fb54 	bl	8008ba4 <__mcmp>
 80084fc:	2800      	cmp	r0, #0
 80084fe:	9b04      	ldr	r3, [sp, #16]
 8008500:	dc02      	bgt.n	8008508 <_dtoa_r+0xa80>
 8008502:	d1e0      	bne.n	80084c6 <_dtoa_r+0xa3e>
 8008504:	07da      	lsls	r2, r3, #31
 8008506:	d5de      	bpl.n	80084c6 <_dtoa_r+0xa3e>
 8008508:	2b39      	cmp	r3, #57	@ 0x39
 800850a:	d1da      	bne.n	80084c2 <_dtoa_r+0xa3a>
 800850c:	2339      	movs	r3, #57	@ 0x39
 800850e:	f88b 3000 	strb.w	r3, [fp]
 8008512:	4633      	mov	r3, r6
 8008514:	461e      	mov	r6, r3
 8008516:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800851a:	3b01      	subs	r3, #1
 800851c:	2a39      	cmp	r2, #57	@ 0x39
 800851e:	d04e      	beq.n	80085be <_dtoa_r+0xb36>
 8008520:	3201      	adds	r2, #1
 8008522:	701a      	strb	r2, [r3, #0]
 8008524:	e501      	b.n	8007f2a <_dtoa_r+0x4a2>
 8008526:	2a00      	cmp	r2, #0
 8008528:	dd03      	ble.n	8008532 <_dtoa_r+0xaaa>
 800852a:	2b39      	cmp	r3, #57	@ 0x39
 800852c:	d0ee      	beq.n	800850c <_dtoa_r+0xa84>
 800852e:	3301      	adds	r3, #1
 8008530:	e7c9      	b.n	80084c6 <_dtoa_r+0xa3e>
 8008532:	9a04      	ldr	r2, [sp, #16]
 8008534:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008536:	f802 3c01 	strb.w	r3, [r2, #-1]
 800853a:	428a      	cmp	r2, r1
 800853c:	d028      	beq.n	8008590 <_dtoa_r+0xb08>
 800853e:	2300      	movs	r3, #0
 8008540:	220a      	movs	r2, #10
 8008542:	9903      	ldr	r1, [sp, #12]
 8008544:	4648      	mov	r0, r9
 8008546:	f000 f91d 	bl	8008784 <__multadd>
 800854a:	42af      	cmp	r7, r5
 800854c:	9003      	str	r0, [sp, #12]
 800854e:	f04f 0300 	mov.w	r3, #0
 8008552:	f04f 020a 	mov.w	r2, #10
 8008556:	4639      	mov	r1, r7
 8008558:	4648      	mov	r0, r9
 800855a:	d107      	bne.n	800856c <_dtoa_r+0xae4>
 800855c:	f000 f912 	bl	8008784 <__multadd>
 8008560:	4607      	mov	r7, r0
 8008562:	4605      	mov	r5, r0
 8008564:	9b04      	ldr	r3, [sp, #16]
 8008566:	3301      	adds	r3, #1
 8008568:	9304      	str	r3, [sp, #16]
 800856a:	e777      	b.n	800845c <_dtoa_r+0x9d4>
 800856c:	f000 f90a 	bl	8008784 <__multadd>
 8008570:	4629      	mov	r1, r5
 8008572:	4607      	mov	r7, r0
 8008574:	2300      	movs	r3, #0
 8008576:	220a      	movs	r2, #10
 8008578:	4648      	mov	r0, r9
 800857a:	f000 f903 	bl	8008784 <__multadd>
 800857e:	4605      	mov	r5, r0
 8008580:	e7f0      	b.n	8008564 <_dtoa_r+0xadc>
 8008582:	f1bb 0f00 	cmp.w	fp, #0
 8008586:	bfcc      	ite	gt
 8008588:	465e      	movgt	r6, fp
 800858a:	2601      	movle	r6, #1
 800858c:	2700      	movs	r7, #0
 800858e:	4456      	add	r6, sl
 8008590:	2201      	movs	r2, #1
 8008592:	9903      	ldr	r1, [sp, #12]
 8008594:	4648      	mov	r0, r9
 8008596:	9304      	str	r3, [sp, #16]
 8008598:	f000 fa98 	bl	8008acc <__lshift>
 800859c:	4621      	mov	r1, r4
 800859e:	9003      	str	r0, [sp, #12]
 80085a0:	f000 fb00 	bl	8008ba4 <__mcmp>
 80085a4:	2800      	cmp	r0, #0
 80085a6:	dcb4      	bgt.n	8008512 <_dtoa_r+0xa8a>
 80085a8:	d102      	bne.n	80085b0 <_dtoa_r+0xb28>
 80085aa:	9b04      	ldr	r3, [sp, #16]
 80085ac:	07db      	lsls	r3, r3, #31
 80085ae:	d4b0      	bmi.n	8008512 <_dtoa_r+0xa8a>
 80085b0:	4633      	mov	r3, r6
 80085b2:	461e      	mov	r6, r3
 80085b4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80085b8:	2a30      	cmp	r2, #48	@ 0x30
 80085ba:	d0fa      	beq.n	80085b2 <_dtoa_r+0xb2a>
 80085bc:	e4b5      	b.n	8007f2a <_dtoa_r+0x4a2>
 80085be:	459a      	cmp	sl, r3
 80085c0:	d1a8      	bne.n	8008514 <_dtoa_r+0xa8c>
 80085c2:	2331      	movs	r3, #49	@ 0x31
 80085c4:	f108 0801 	add.w	r8, r8, #1
 80085c8:	f88a 3000 	strb.w	r3, [sl]
 80085cc:	e4ad      	b.n	8007f2a <_dtoa_r+0x4a2>
 80085ce:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80085d0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800862c <_dtoa_r+0xba4>
 80085d4:	b11b      	cbz	r3, 80085de <_dtoa_r+0xb56>
 80085d6:	f10a 0308 	add.w	r3, sl, #8
 80085da:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80085dc:	6013      	str	r3, [r2, #0]
 80085de:	4650      	mov	r0, sl
 80085e0:	b017      	add	sp, #92	@ 0x5c
 80085e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085e6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80085e8:	2b01      	cmp	r3, #1
 80085ea:	f77f ae2e 	ble.w	800824a <_dtoa_r+0x7c2>
 80085ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80085f0:	930a      	str	r3, [sp, #40]	@ 0x28
 80085f2:	2001      	movs	r0, #1
 80085f4:	e64d      	b.n	8008292 <_dtoa_r+0x80a>
 80085f6:	f1bb 0f00 	cmp.w	fp, #0
 80085fa:	f77f aed9 	ble.w	80083b0 <_dtoa_r+0x928>
 80085fe:	4656      	mov	r6, sl
 8008600:	4621      	mov	r1, r4
 8008602:	9803      	ldr	r0, [sp, #12]
 8008604:	f7ff f9b7 	bl	8007976 <quorem>
 8008608:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800860c:	f806 3b01 	strb.w	r3, [r6], #1
 8008610:	eba6 020a 	sub.w	r2, r6, sl
 8008614:	4593      	cmp	fp, r2
 8008616:	ddb4      	ble.n	8008582 <_dtoa_r+0xafa>
 8008618:	2300      	movs	r3, #0
 800861a:	220a      	movs	r2, #10
 800861c:	4648      	mov	r0, r9
 800861e:	9903      	ldr	r1, [sp, #12]
 8008620:	f000 f8b0 	bl	8008784 <__multadd>
 8008624:	9003      	str	r0, [sp, #12]
 8008626:	e7eb      	b.n	8008600 <_dtoa_r+0xb78>
 8008628:	0800a1b6 	.word	0x0800a1b6
 800862c:	0800a13a 	.word	0x0800a13a

08008630 <_free_r>:
 8008630:	b538      	push	{r3, r4, r5, lr}
 8008632:	4605      	mov	r5, r0
 8008634:	2900      	cmp	r1, #0
 8008636:	d040      	beq.n	80086ba <_free_r+0x8a>
 8008638:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800863c:	1f0c      	subs	r4, r1, #4
 800863e:	2b00      	cmp	r3, #0
 8008640:	bfb8      	it	lt
 8008642:	18e4      	addlt	r4, r4, r3
 8008644:	f7fe fb18 	bl	8006c78 <__malloc_lock>
 8008648:	4a1c      	ldr	r2, [pc, #112]	@ (80086bc <_free_r+0x8c>)
 800864a:	6813      	ldr	r3, [r2, #0]
 800864c:	b933      	cbnz	r3, 800865c <_free_r+0x2c>
 800864e:	6063      	str	r3, [r4, #4]
 8008650:	6014      	str	r4, [r2, #0]
 8008652:	4628      	mov	r0, r5
 8008654:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008658:	f7fe bb14 	b.w	8006c84 <__malloc_unlock>
 800865c:	42a3      	cmp	r3, r4
 800865e:	d908      	bls.n	8008672 <_free_r+0x42>
 8008660:	6820      	ldr	r0, [r4, #0]
 8008662:	1821      	adds	r1, r4, r0
 8008664:	428b      	cmp	r3, r1
 8008666:	bf01      	itttt	eq
 8008668:	6819      	ldreq	r1, [r3, #0]
 800866a:	685b      	ldreq	r3, [r3, #4]
 800866c:	1809      	addeq	r1, r1, r0
 800866e:	6021      	streq	r1, [r4, #0]
 8008670:	e7ed      	b.n	800864e <_free_r+0x1e>
 8008672:	461a      	mov	r2, r3
 8008674:	685b      	ldr	r3, [r3, #4]
 8008676:	b10b      	cbz	r3, 800867c <_free_r+0x4c>
 8008678:	42a3      	cmp	r3, r4
 800867a:	d9fa      	bls.n	8008672 <_free_r+0x42>
 800867c:	6811      	ldr	r1, [r2, #0]
 800867e:	1850      	adds	r0, r2, r1
 8008680:	42a0      	cmp	r0, r4
 8008682:	d10b      	bne.n	800869c <_free_r+0x6c>
 8008684:	6820      	ldr	r0, [r4, #0]
 8008686:	4401      	add	r1, r0
 8008688:	1850      	adds	r0, r2, r1
 800868a:	4283      	cmp	r3, r0
 800868c:	6011      	str	r1, [r2, #0]
 800868e:	d1e0      	bne.n	8008652 <_free_r+0x22>
 8008690:	6818      	ldr	r0, [r3, #0]
 8008692:	685b      	ldr	r3, [r3, #4]
 8008694:	4408      	add	r0, r1
 8008696:	6010      	str	r0, [r2, #0]
 8008698:	6053      	str	r3, [r2, #4]
 800869a:	e7da      	b.n	8008652 <_free_r+0x22>
 800869c:	d902      	bls.n	80086a4 <_free_r+0x74>
 800869e:	230c      	movs	r3, #12
 80086a0:	602b      	str	r3, [r5, #0]
 80086a2:	e7d6      	b.n	8008652 <_free_r+0x22>
 80086a4:	6820      	ldr	r0, [r4, #0]
 80086a6:	1821      	adds	r1, r4, r0
 80086a8:	428b      	cmp	r3, r1
 80086aa:	bf01      	itttt	eq
 80086ac:	6819      	ldreq	r1, [r3, #0]
 80086ae:	685b      	ldreq	r3, [r3, #4]
 80086b0:	1809      	addeq	r1, r1, r0
 80086b2:	6021      	streq	r1, [r4, #0]
 80086b4:	6063      	str	r3, [r4, #4]
 80086b6:	6054      	str	r4, [r2, #4]
 80086b8:	e7cb      	b.n	8008652 <_free_r+0x22>
 80086ba:	bd38      	pop	{r3, r4, r5, pc}
 80086bc:	200007f8 	.word	0x200007f8

080086c0 <_Balloc>:
 80086c0:	b570      	push	{r4, r5, r6, lr}
 80086c2:	69c6      	ldr	r6, [r0, #28]
 80086c4:	4604      	mov	r4, r0
 80086c6:	460d      	mov	r5, r1
 80086c8:	b976      	cbnz	r6, 80086e8 <_Balloc+0x28>
 80086ca:	2010      	movs	r0, #16
 80086cc:	f7fe fa2a 	bl	8006b24 <malloc>
 80086d0:	4602      	mov	r2, r0
 80086d2:	61e0      	str	r0, [r4, #28]
 80086d4:	b920      	cbnz	r0, 80086e0 <_Balloc+0x20>
 80086d6:	216b      	movs	r1, #107	@ 0x6b
 80086d8:	4b17      	ldr	r3, [pc, #92]	@ (8008738 <_Balloc+0x78>)
 80086da:	4818      	ldr	r0, [pc, #96]	@ (800873c <_Balloc+0x7c>)
 80086dc:	f000 fd92 	bl	8009204 <__assert_func>
 80086e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80086e4:	6006      	str	r6, [r0, #0]
 80086e6:	60c6      	str	r6, [r0, #12]
 80086e8:	69e6      	ldr	r6, [r4, #28]
 80086ea:	68f3      	ldr	r3, [r6, #12]
 80086ec:	b183      	cbz	r3, 8008710 <_Balloc+0x50>
 80086ee:	69e3      	ldr	r3, [r4, #28]
 80086f0:	68db      	ldr	r3, [r3, #12]
 80086f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80086f6:	b9b8      	cbnz	r0, 8008728 <_Balloc+0x68>
 80086f8:	2101      	movs	r1, #1
 80086fa:	fa01 f605 	lsl.w	r6, r1, r5
 80086fe:	1d72      	adds	r2, r6, #5
 8008700:	4620      	mov	r0, r4
 8008702:	0092      	lsls	r2, r2, #2
 8008704:	f7fe f9fa 	bl	8006afc <_calloc_r>
 8008708:	b160      	cbz	r0, 8008724 <_Balloc+0x64>
 800870a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800870e:	e00e      	b.n	800872e <_Balloc+0x6e>
 8008710:	2221      	movs	r2, #33	@ 0x21
 8008712:	2104      	movs	r1, #4
 8008714:	4620      	mov	r0, r4
 8008716:	f7fe f9f1 	bl	8006afc <_calloc_r>
 800871a:	69e3      	ldr	r3, [r4, #28]
 800871c:	60f0      	str	r0, [r6, #12]
 800871e:	68db      	ldr	r3, [r3, #12]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d1e4      	bne.n	80086ee <_Balloc+0x2e>
 8008724:	2000      	movs	r0, #0
 8008726:	bd70      	pop	{r4, r5, r6, pc}
 8008728:	6802      	ldr	r2, [r0, #0]
 800872a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800872e:	2300      	movs	r3, #0
 8008730:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008734:	e7f7      	b.n	8008726 <_Balloc+0x66>
 8008736:	bf00      	nop
 8008738:	0800a147 	.word	0x0800a147
 800873c:	0800a1c7 	.word	0x0800a1c7

08008740 <_Bfree>:
 8008740:	b570      	push	{r4, r5, r6, lr}
 8008742:	69c6      	ldr	r6, [r0, #28]
 8008744:	4605      	mov	r5, r0
 8008746:	460c      	mov	r4, r1
 8008748:	b976      	cbnz	r6, 8008768 <_Bfree+0x28>
 800874a:	2010      	movs	r0, #16
 800874c:	f7fe f9ea 	bl	8006b24 <malloc>
 8008750:	4602      	mov	r2, r0
 8008752:	61e8      	str	r0, [r5, #28]
 8008754:	b920      	cbnz	r0, 8008760 <_Bfree+0x20>
 8008756:	218f      	movs	r1, #143	@ 0x8f
 8008758:	4b08      	ldr	r3, [pc, #32]	@ (800877c <_Bfree+0x3c>)
 800875a:	4809      	ldr	r0, [pc, #36]	@ (8008780 <_Bfree+0x40>)
 800875c:	f000 fd52 	bl	8009204 <__assert_func>
 8008760:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008764:	6006      	str	r6, [r0, #0]
 8008766:	60c6      	str	r6, [r0, #12]
 8008768:	b13c      	cbz	r4, 800877a <_Bfree+0x3a>
 800876a:	69eb      	ldr	r3, [r5, #28]
 800876c:	6862      	ldr	r2, [r4, #4]
 800876e:	68db      	ldr	r3, [r3, #12]
 8008770:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008774:	6021      	str	r1, [r4, #0]
 8008776:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800877a:	bd70      	pop	{r4, r5, r6, pc}
 800877c:	0800a147 	.word	0x0800a147
 8008780:	0800a1c7 	.word	0x0800a1c7

08008784 <__multadd>:
 8008784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008788:	4607      	mov	r7, r0
 800878a:	460c      	mov	r4, r1
 800878c:	461e      	mov	r6, r3
 800878e:	2000      	movs	r0, #0
 8008790:	690d      	ldr	r5, [r1, #16]
 8008792:	f101 0c14 	add.w	ip, r1, #20
 8008796:	f8dc 3000 	ldr.w	r3, [ip]
 800879a:	3001      	adds	r0, #1
 800879c:	b299      	uxth	r1, r3
 800879e:	fb02 6101 	mla	r1, r2, r1, r6
 80087a2:	0c1e      	lsrs	r6, r3, #16
 80087a4:	0c0b      	lsrs	r3, r1, #16
 80087a6:	fb02 3306 	mla	r3, r2, r6, r3
 80087aa:	b289      	uxth	r1, r1
 80087ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80087b0:	4285      	cmp	r5, r0
 80087b2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80087b6:	f84c 1b04 	str.w	r1, [ip], #4
 80087ba:	dcec      	bgt.n	8008796 <__multadd+0x12>
 80087bc:	b30e      	cbz	r6, 8008802 <__multadd+0x7e>
 80087be:	68a3      	ldr	r3, [r4, #8]
 80087c0:	42ab      	cmp	r3, r5
 80087c2:	dc19      	bgt.n	80087f8 <__multadd+0x74>
 80087c4:	6861      	ldr	r1, [r4, #4]
 80087c6:	4638      	mov	r0, r7
 80087c8:	3101      	adds	r1, #1
 80087ca:	f7ff ff79 	bl	80086c0 <_Balloc>
 80087ce:	4680      	mov	r8, r0
 80087d0:	b928      	cbnz	r0, 80087de <__multadd+0x5a>
 80087d2:	4602      	mov	r2, r0
 80087d4:	21ba      	movs	r1, #186	@ 0xba
 80087d6:	4b0c      	ldr	r3, [pc, #48]	@ (8008808 <__multadd+0x84>)
 80087d8:	480c      	ldr	r0, [pc, #48]	@ (800880c <__multadd+0x88>)
 80087da:	f000 fd13 	bl	8009204 <__assert_func>
 80087de:	6922      	ldr	r2, [r4, #16]
 80087e0:	f104 010c 	add.w	r1, r4, #12
 80087e4:	3202      	adds	r2, #2
 80087e6:	0092      	lsls	r2, r2, #2
 80087e8:	300c      	adds	r0, #12
 80087ea:	f000 fcfd 	bl	80091e8 <memcpy>
 80087ee:	4621      	mov	r1, r4
 80087f0:	4638      	mov	r0, r7
 80087f2:	f7ff ffa5 	bl	8008740 <_Bfree>
 80087f6:	4644      	mov	r4, r8
 80087f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80087fc:	3501      	adds	r5, #1
 80087fe:	615e      	str	r6, [r3, #20]
 8008800:	6125      	str	r5, [r4, #16]
 8008802:	4620      	mov	r0, r4
 8008804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008808:	0800a1b6 	.word	0x0800a1b6
 800880c:	0800a1c7 	.word	0x0800a1c7

08008810 <__hi0bits>:
 8008810:	4603      	mov	r3, r0
 8008812:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008816:	bf3a      	itte	cc
 8008818:	0403      	lslcc	r3, r0, #16
 800881a:	2010      	movcc	r0, #16
 800881c:	2000      	movcs	r0, #0
 800881e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008822:	bf3c      	itt	cc
 8008824:	021b      	lslcc	r3, r3, #8
 8008826:	3008      	addcc	r0, #8
 8008828:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800882c:	bf3c      	itt	cc
 800882e:	011b      	lslcc	r3, r3, #4
 8008830:	3004      	addcc	r0, #4
 8008832:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008836:	bf3c      	itt	cc
 8008838:	009b      	lslcc	r3, r3, #2
 800883a:	3002      	addcc	r0, #2
 800883c:	2b00      	cmp	r3, #0
 800883e:	db05      	blt.n	800884c <__hi0bits+0x3c>
 8008840:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008844:	f100 0001 	add.w	r0, r0, #1
 8008848:	bf08      	it	eq
 800884a:	2020      	moveq	r0, #32
 800884c:	4770      	bx	lr

0800884e <__lo0bits>:
 800884e:	6803      	ldr	r3, [r0, #0]
 8008850:	4602      	mov	r2, r0
 8008852:	f013 0007 	ands.w	r0, r3, #7
 8008856:	d00b      	beq.n	8008870 <__lo0bits+0x22>
 8008858:	07d9      	lsls	r1, r3, #31
 800885a:	d421      	bmi.n	80088a0 <__lo0bits+0x52>
 800885c:	0798      	lsls	r0, r3, #30
 800885e:	bf49      	itett	mi
 8008860:	085b      	lsrmi	r3, r3, #1
 8008862:	089b      	lsrpl	r3, r3, #2
 8008864:	2001      	movmi	r0, #1
 8008866:	6013      	strmi	r3, [r2, #0]
 8008868:	bf5c      	itt	pl
 800886a:	2002      	movpl	r0, #2
 800886c:	6013      	strpl	r3, [r2, #0]
 800886e:	4770      	bx	lr
 8008870:	b299      	uxth	r1, r3
 8008872:	b909      	cbnz	r1, 8008878 <__lo0bits+0x2a>
 8008874:	2010      	movs	r0, #16
 8008876:	0c1b      	lsrs	r3, r3, #16
 8008878:	b2d9      	uxtb	r1, r3
 800887a:	b909      	cbnz	r1, 8008880 <__lo0bits+0x32>
 800887c:	3008      	adds	r0, #8
 800887e:	0a1b      	lsrs	r3, r3, #8
 8008880:	0719      	lsls	r1, r3, #28
 8008882:	bf04      	itt	eq
 8008884:	091b      	lsreq	r3, r3, #4
 8008886:	3004      	addeq	r0, #4
 8008888:	0799      	lsls	r1, r3, #30
 800888a:	bf04      	itt	eq
 800888c:	089b      	lsreq	r3, r3, #2
 800888e:	3002      	addeq	r0, #2
 8008890:	07d9      	lsls	r1, r3, #31
 8008892:	d403      	bmi.n	800889c <__lo0bits+0x4e>
 8008894:	085b      	lsrs	r3, r3, #1
 8008896:	f100 0001 	add.w	r0, r0, #1
 800889a:	d003      	beq.n	80088a4 <__lo0bits+0x56>
 800889c:	6013      	str	r3, [r2, #0]
 800889e:	4770      	bx	lr
 80088a0:	2000      	movs	r0, #0
 80088a2:	4770      	bx	lr
 80088a4:	2020      	movs	r0, #32
 80088a6:	4770      	bx	lr

080088a8 <__i2b>:
 80088a8:	b510      	push	{r4, lr}
 80088aa:	460c      	mov	r4, r1
 80088ac:	2101      	movs	r1, #1
 80088ae:	f7ff ff07 	bl	80086c0 <_Balloc>
 80088b2:	4602      	mov	r2, r0
 80088b4:	b928      	cbnz	r0, 80088c2 <__i2b+0x1a>
 80088b6:	f240 1145 	movw	r1, #325	@ 0x145
 80088ba:	4b04      	ldr	r3, [pc, #16]	@ (80088cc <__i2b+0x24>)
 80088bc:	4804      	ldr	r0, [pc, #16]	@ (80088d0 <__i2b+0x28>)
 80088be:	f000 fca1 	bl	8009204 <__assert_func>
 80088c2:	2301      	movs	r3, #1
 80088c4:	6144      	str	r4, [r0, #20]
 80088c6:	6103      	str	r3, [r0, #16]
 80088c8:	bd10      	pop	{r4, pc}
 80088ca:	bf00      	nop
 80088cc:	0800a1b6 	.word	0x0800a1b6
 80088d0:	0800a1c7 	.word	0x0800a1c7

080088d4 <__multiply>:
 80088d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088d8:	4617      	mov	r7, r2
 80088da:	690a      	ldr	r2, [r1, #16]
 80088dc:	693b      	ldr	r3, [r7, #16]
 80088de:	4689      	mov	r9, r1
 80088e0:	429a      	cmp	r2, r3
 80088e2:	bfa2      	ittt	ge
 80088e4:	463b      	movge	r3, r7
 80088e6:	460f      	movge	r7, r1
 80088e8:	4699      	movge	r9, r3
 80088ea:	693d      	ldr	r5, [r7, #16]
 80088ec:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	6879      	ldr	r1, [r7, #4]
 80088f4:	eb05 060a 	add.w	r6, r5, sl
 80088f8:	42b3      	cmp	r3, r6
 80088fa:	b085      	sub	sp, #20
 80088fc:	bfb8      	it	lt
 80088fe:	3101      	addlt	r1, #1
 8008900:	f7ff fede 	bl	80086c0 <_Balloc>
 8008904:	b930      	cbnz	r0, 8008914 <__multiply+0x40>
 8008906:	4602      	mov	r2, r0
 8008908:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800890c:	4b40      	ldr	r3, [pc, #256]	@ (8008a10 <__multiply+0x13c>)
 800890e:	4841      	ldr	r0, [pc, #260]	@ (8008a14 <__multiply+0x140>)
 8008910:	f000 fc78 	bl	8009204 <__assert_func>
 8008914:	f100 0414 	add.w	r4, r0, #20
 8008918:	4623      	mov	r3, r4
 800891a:	2200      	movs	r2, #0
 800891c:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8008920:	4573      	cmp	r3, lr
 8008922:	d320      	bcc.n	8008966 <__multiply+0x92>
 8008924:	f107 0814 	add.w	r8, r7, #20
 8008928:	f109 0114 	add.w	r1, r9, #20
 800892c:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8008930:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008934:	9302      	str	r3, [sp, #8]
 8008936:	1beb      	subs	r3, r5, r7
 8008938:	3b15      	subs	r3, #21
 800893a:	f023 0303 	bic.w	r3, r3, #3
 800893e:	3304      	adds	r3, #4
 8008940:	3715      	adds	r7, #21
 8008942:	42bd      	cmp	r5, r7
 8008944:	bf38      	it	cc
 8008946:	2304      	movcc	r3, #4
 8008948:	9301      	str	r3, [sp, #4]
 800894a:	9b02      	ldr	r3, [sp, #8]
 800894c:	9103      	str	r1, [sp, #12]
 800894e:	428b      	cmp	r3, r1
 8008950:	d80c      	bhi.n	800896c <__multiply+0x98>
 8008952:	2e00      	cmp	r6, #0
 8008954:	dd03      	ble.n	800895e <__multiply+0x8a>
 8008956:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800895a:	2b00      	cmp	r3, #0
 800895c:	d055      	beq.n	8008a0a <__multiply+0x136>
 800895e:	6106      	str	r6, [r0, #16]
 8008960:	b005      	add	sp, #20
 8008962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008966:	f843 2b04 	str.w	r2, [r3], #4
 800896a:	e7d9      	b.n	8008920 <__multiply+0x4c>
 800896c:	f8b1 a000 	ldrh.w	sl, [r1]
 8008970:	f1ba 0f00 	cmp.w	sl, #0
 8008974:	d01f      	beq.n	80089b6 <__multiply+0xe2>
 8008976:	46c4      	mov	ip, r8
 8008978:	46a1      	mov	r9, r4
 800897a:	2700      	movs	r7, #0
 800897c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008980:	f8d9 3000 	ldr.w	r3, [r9]
 8008984:	fa1f fb82 	uxth.w	fp, r2
 8008988:	b29b      	uxth	r3, r3
 800898a:	fb0a 330b 	mla	r3, sl, fp, r3
 800898e:	443b      	add	r3, r7
 8008990:	f8d9 7000 	ldr.w	r7, [r9]
 8008994:	0c12      	lsrs	r2, r2, #16
 8008996:	0c3f      	lsrs	r7, r7, #16
 8008998:	fb0a 7202 	mla	r2, sl, r2, r7
 800899c:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80089a0:	b29b      	uxth	r3, r3
 80089a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80089a6:	4565      	cmp	r5, ip
 80089a8:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80089ac:	f849 3b04 	str.w	r3, [r9], #4
 80089b0:	d8e4      	bhi.n	800897c <__multiply+0xa8>
 80089b2:	9b01      	ldr	r3, [sp, #4]
 80089b4:	50e7      	str	r7, [r4, r3]
 80089b6:	9b03      	ldr	r3, [sp, #12]
 80089b8:	3104      	adds	r1, #4
 80089ba:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80089be:	f1b9 0f00 	cmp.w	r9, #0
 80089c2:	d020      	beq.n	8008a06 <__multiply+0x132>
 80089c4:	4647      	mov	r7, r8
 80089c6:	46a4      	mov	ip, r4
 80089c8:	f04f 0a00 	mov.w	sl, #0
 80089cc:	6823      	ldr	r3, [r4, #0]
 80089ce:	f8b7 b000 	ldrh.w	fp, [r7]
 80089d2:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80089d6:	b29b      	uxth	r3, r3
 80089d8:	fb09 220b 	mla	r2, r9, fp, r2
 80089dc:	4452      	add	r2, sl
 80089de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80089e2:	f84c 3b04 	str.w	r3, [ip], #4
 80089e6:	f857 3b04 	ldr.w	r3, [r7], #4
 80089ea:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80089ee:	f8bc 3000 	ldrh.w	r3, [ip]
 80089f2:	42bd      	cmp	r5, r7
 80089f4:	fb09 330a 	mla	r3, r9, sl, r3
 80089f8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80089fc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008a00:	d8e5      	bhi.n	80089ce <__multiply+0xfa>
 8008a02:	9a01      	ldr	r2, [sp, #4]
 8008a04:	50a3      	str	r3, [r4, r2]
 8008a06:	3404      	adds	r4, #4
 8008a08:	e79f      	b.n	800894a <__multiply+0x76>
 8008a0a:	3e01      	subs	r6, #1
 8008a0c:	e7a1      	b.n	8008952 <__multiply+0x7e>
 8008a0e:	bf00      	nop
 8008a10:	0800a1b6 	.word	0x0800a1b6
 8008a14:	0800a1c7 	.word	0x0800a1c7

08008a18 <__pow5mult>:
 8008a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a1c:	4615      	mov	r5, r2
 8008a1e:	f012 0203 	ands.w	r2, r2, #3
 8008a22:	4607      	mov	r7, r0
 8008a24:	460e      	mov	r6, r1
 8008a26:	d007      	beq.n	8008a38 <__pow5mult+0x20>
 8008a28:	4c25      	ldr	r4, [pc, #148]	@ (8008ac0 <__pow5mult+0xa8>)
 8008a2a:	3a01      	subs	r2, #1
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008a32:	f7ff fea7 	bl	8008784 <__multadd>
 8008a36:	4606      	mov	r6, r0
 8008a38:	10ad      	asrs	r5, r5, #2
 8008a3a:	d03d      	beq.n	8008ab8 <__pow5mult+0xa0>
 8008a3c:	69fc      	ldr	r4, [r7, #28]
 8008a3e:	b97c      	cbnz	r4, 8008a60 <__pow5mult+0x48>
 8008a40:	2010      	movs	r0, #16
 8008a42:	f7fe f86f 	bl	8006b24 <malloc>
 8008a46:	4602      	mov	r2, r0
 8008a48:	61f8      	str	r0, [r7, #28]
 8008a4a:	b928      	cbnz	r0, 8008a58 <__pow5mult+0x40>
 8008a4c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008a50:	4b1c      	ldr	r3, [pc, #112]	@ (8008ac4 <__pow5mult+0xac>)
 8008a52:	481d      	ldr	r0, [pc, #116]	@ (8008ac8 <__pow5mult+0xb0>)
 8008a54:	f000 fbd6 	bl	8009204 <__assert_func>
 8008a58:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008a5c:	6004      	str	r4, [r0, #0]
 8008a5e:	60c4      	str	r4, [r0, #12]
 8008a60:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008a64:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008a68:	b94c      	cbnz	r4, 8008a7e <__pow5mult+0x66>
 8008a6a:	f240 2171 	movw	r1, #625	@ 0x271
 8008a6e:	4638      	mov	r0, r7
 8008a70:	f7ff ff1a 	bl	80088a8 <__i2b>
 8008a74:	2300      	movs	r3, #0
 8008a76:	4604      	mov	r4, r0
 8008a78:	f8c8 0008 	str.w	r0, [r8, #8]
 8008a7c:	6003      	str	r3, [r0, #0]
 8008a7e:	f04f 0900 	mov.w	r9, #0
 8008a82:	07eb      	lsls	r3, r5, #31
 8008a84:	d50a      	bpl.n	8008a9c <__pow5mult+0x84>
 8008a86:	4631      	mov	r1, r6
 8008a88:	4622      	mov	r2, r4
 8008a8a:	4638      	mov	r0, r7
 8008a8c:	f7ff ff22 	bl	80088d4 <__multiply>
 8008a90:	4680      	mov	r8, r0
 8008a92:	4631      	mov	r1, r6
 8008a94:	4638      	mov	r0, r7
 8008a96:	f7ff fe53 	bl	8008740 <_Bfree>
 8008a9a:	4646      	mov	r6, r8
 8008a9c:	106d      	asrs	r5, r5, #1
 8008a9e:	d00b      	beq.n	8008ab8 <__pow5mult+0xa0>
 8008aa0:	6820      	ldr	r0, [r4, #0]
 8008aa2:	b938      	cbnz	r0, 8008ab4 <__pow5mult+0x9c>
 8008aa4:	4622      	mov	r2, r4
 8008aa6:	4621      	mov	r1, r4
 8008aa8:	4638      	mov	r0, r7
 8008aaa:	f7ff ff13 	bl	80088d4 <__multiply>
 8008aae:	6020      	str	r0, [r4, #0]
 8008ab0:	f8c0 9000 	str.w	r9, [r0]
 8008ab4:	4604      	mov	r4, r0
 8008ab6:	e7e4      	b.n	8008a82 <__pow5mult+0x6a>
 8008ab8:	4630      	mov	r0, r6
 8008aba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008abe:	bf00      	nop
 8008ac0:	0800a278 	.word	0x0800a278
 8008ac4:	0800a147 	.word	0x0800a147
 8008ac8:	0800a1c7 	.word	0x0800a1c7

08008acc <__lshift>:
 8008acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ad0:	460c      	mov	r4, r1
 8008ad2:	4607      	mov	r7, r0
 8008ad4:	4691      	mov	r9, r2
 8008ad6:	6923      	ldr	r3, [r4, #16]
 8008ad8:	6849      	ldr	r1, [r1, #4]
 8008ada:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008ade:	68a3      	ldr	r3, [r4, #8]
 8008ae0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008ae4:	f108 0601 	add.w	r6, r8, #1
 8008ae8:	42b3      	cmp	r3, r6
 8008aea:	db0b      	blt.n	8008b04 <__lshift+0x38>
 8008aec:	4638      	mov	r0, r7
 8008aee:	f7ff fde7 	bl	80086c0 <_Balloc>
 8008af2:	4605      	mov	r5, r0
 8008af4:	b948      	cbnz	r0, 8008b0a <__lshift+0x3e>
 8008af6:	4602      	mov	r2, r0
 8008af8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008afc:	4b27      	ldr	r3, [pc, #156]	@ (8008b9c <__lshift+0xd0>)
 8008afe:	4828      	ldr	r0, [pc, #160]	@ (8008ba0 <__lshift+0xd4>)
 8008b00:	f000 fb80 	bl	8009204 <__assert_func>
 8008b04:	3101      	adds	r1, #1
 8008b06:	005b      	lsls	r3, r3, #1
 8008b08:	e7ee      	b.n	8008ae8 <__lshift+0x1c>
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	f100 0114 	add.w	r1, r0, #20
 8008b10:	f100 0210 	add.w	r2, r0, #16
 8008b14:	4618      	mov	r0, r3
 8008b16:	4553      	cmp	r3, sl
 8008b18:	db33      	blt.n	8008b82 <__lshift+0xb6>
 8008b1a:	6920      	ldr	r0, [r4, #16]
 8008b1c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008b20:	f104 0314 	add.w	r3, r4, #20
 8008b24:	f019 091f 	ands.w	r9, r9, #31
 8008b28:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008b2c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008b30:	d02b      	beq.n	8008b8a <__lshift+0xbe>
 8008b32:	468a      	mov	sl, r1
 8008b34:	2200      	movs	r2, #0
 8008b36:	f1c9 0e20 	rsb	lr, r9, #32
 8008b3a:	6818      	ldr	r0, [r3, #0]
 8008b3c:	fa00 f009 	lsl.w	r0, r0, r9
 8008b40:	4310      	orrs	r0, r2
 8008b42:	f84a 0b04 	str.w	r0, [sl], #4
 8008b46:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b4a:	459c      	cmp	ip, r3
 8008b4c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008b50:	d8f3      	bhi.n	8008b3a <__lshift+0x6e>
 8008b52:	ebac 0304 	sub.w	r3, ip, r4
 8008b56:	3b15      	subs	r3, #21
 8008b58:	f023 0303 	bic.w	r3, r3, #3
 8008b5c:	3304      	adds	r3, #4
 8008b5e:	f104 0015 	add.w	r0, r4, #21
 8008b62:	4560      	cmp	r0, ip
 8008b64:	bf88      	it	hi
 8008b66:	2304      	movhi	r3, #4
 8008b68:	50ca      	str	r2, [r1, r3]
 8008b6a:	b10a      	cbz	r2, 8008b70 <__lshift+0xa4>
 8008b6c:	f108 0602 	add.w	r6, r8, #2
 8008b70:	3e01      	subs	r6, #1
 8008b72:	4638      	mov	r0, r7
 8008b74:	4621      	mov	r1, r4
 8008b76:	612e      	str	r6, [r5, #16]
 8008b78:	f7ff fde2 	bl	8008740 <_Bfree>
 8008b7c:	4628      	mov	r0, r5
 8008b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b82:	f842 0f04 	str.w	r0, [r2, #4]!
 8008b86:	3301      	adds	r3, #1
 8008b88:	e7c5      	b.n	8008b16 <__lshift+0x4a>
 8008b8a:	3904      	subs	r1, #4
 8008b8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b90:	459c      	cmp	ip, r3
 8008b92:	f841 2f04 	str.w	r2, [r1, #4]!
 8008b96:	d8f9      	bhi.n	8008b8c <__lshift+0xc0>
 8008b98:	e7ea      	b.n	8008b70 <__lshift+0xa4>
 8008b9a:	bf00      	nop
 8008b9c:	0800a1b6 	.word	0x0800a1b6
 8008ba0:	0800a1c7 	.word	0x0800a1c7

08008ba4 <__mcmp>:
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	690a      	ldr	r2, [r1, #16]
 8008ba8:	6900      	ldr	r0, [r0, #16]
 8008baa:	b530      	push	{r4, r5, lr}
 8008bac:	1a80      	subs	r0, r0, r2
 8008bae:	d10e      	bne.n	8008bce <__mcmp+0x2a>
 8008bb0:	3314      	adds	r3, #20
 8008bb2:	3114      	adds	r1, #20
 8008bb4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008bb8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008bbc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008bc0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008bc4:	4295      	cmp	r5, r2
 8008bc6:	d003      	beq.n	8008bd0 <__mcmp+0x2c>
 8008bc8:	d205      	bcs.n	8008bd6 <__mcmp+0x32>
 8008bca:	f04f 30ff 	mov.w	r0, #4294967295
 8008bce:	bd30      	pop	{r4, r5, pc}
 8008bd0:	42a3      	cmp	r3, r4
 8008bd2:	d3f3      	bcc.n	8008bbc <__mcmp+0x18>
 8008bd4:	e7fb      	b.n	8008bce <__mcmp+0x2a>
 8008bd6:	2001      	movs	r0, #1
 8008bd8:	e7f9      	b.n	8008bce <__mcmp+0x2a>
	...

08008bdc <__mdiff>:
 8008bdc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008be0:	4689      	mov	r9, r1
 8008be2:	4606      	mov	r6, r0
 8008be4:	4611      	mov	r1, r2
 8008be6:	4648      	mov	r0, r9
 8008be8:	4614      	mov	r4, r2
 8008bea:	f7ff ffdb 	bl	8008ba4 <__mcmp>
 8008bee:	1e05      	subs	r5, r0, #0
 8008bf0:	d112      	bne.n	8008c18 <__mdiff+0x3c>
 8008bf2:	4629      	mov	r1, r5
 8008bf4:	4630      	mov	r0, r6
 8008bf6:	f7ff fd63 	bl	80086c0 <_Balloc>
 8008bfa:	4602      	mov	r2, r0
 8008bfc:	b928      	cbnz	r0, 8008c0a <__mdiff+0x2e>
 8008bfe:	f240 2137 	movw	r1, #567	@ 0x237
 8008c02:	4b3e      	ldr	r3, [pc, #248]	@ (8008cfc <__mdiff+0x120>)
 8008c04:	483e      	ldr	r0, [pc, #248]	@ (8008d00 <__mdiff+0x124>)
 8008c06:	f000 fafd 	bl	8009204 <__assert_func>
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008c10:	4610      	mov	r0, r2
 8008c12:	b003      	add	sp, #12
 8008c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c18:	bfbc      	itt	lt
 8008c1a:	464b      	movlt	r3, r9
 8008c1c:	46a1      	movlt	r9, r4
 8008c1e:	4630      	mov	r0, r6
 8008c20:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008c24:	bfba      	itte	lt
 8008c26:	461c      	movlt	r4, r3
 8008c28:	2501      	movlt	r5, #1
 8008c2a:	2500      	movge	r5, #0
 8008c2c:	f7ff fd48 	bl	80086c0 <_Balloc>
 8008c30:	4602      	mov	r2, r0
 8008c32:	b918      	cbnz	r0, 8008c3c <__mdiff+0x60>
 8008c34:	f240 2145 	movw	r1, #581	@ 0x245
 8008c38:	4b30      	ldr	r3, [pc, #192]	@ (8008cfc <__mdiff+0x120>)
 8008c3a:	e7e3      	b.n	8008c04 <__mdiff+0x28>
 8008c3c:	f100 0b14 	add.w	fp, r0, #20
 8008c40:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008c44:	f109 0310 	add.w	r3, r9, #16
 8008c48:	60c5      	str	r5, [r0, #12]
 8008c4a:	f04f 0c00 	mov.w	ip, #0
 8008c4e:	f109 0514 	add.w	r5, r9, #20
 8008c52:	46d9      	mov	r9, fp
 8008c54:	6926      	ldr	r6, [r4, #16]
 8008c56:	f104 0e14 	add.w	lr, r4, #20
 8008c5a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008c5e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008c62:	9301      	str	r3, [sp, #4]
 8008c64:	9b01      	ldr	r3, [sp, #4]
 8008c66:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008c6a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008c6e:	b281      	uxth	r1, r0
 8008c70:	9301      	str	r3, [sp, #4]
 8008c72:	fa1f f38a 	uxth.w	r3, sl
 8008c76:	1a5b      	subs	r3, r3, r1
 8008c78:	0c00      	lsrs	r0, r0, #16
 8008c7a:	4463      	add	r3, ip
 8008c7c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008c80:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008c84:	b29b      	uxth	r3, r3
 8008c86:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008c8a:	4576      	cmp	r6, lr
 8008c8c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008c90:	f849 3b04 	str.w	r3, [r9], #4
 8008c94:	d8e6      	bhi.n	8008c64 <__mdiff+0x88>
 8008c96:	1b33      	subs	r3, r6, r4
 8008c98:	3b15      	subs	r3, #21
 8008c9a:	f023 0303 	bic.w	r3, r3, #3
 8008c9e:	3415      	adds	r4, #21
 8008ca0:	3304      	adds	r3, #4
 8008ca2:	42a6      	cmp	r6, r4
 8008ca4:	bf38      	it	cc
 8008ca6:	2304      	movcc	r3, #4
 8008ca8:	441d      	add	r5, r3
 8008caa:	445b      	add	r3, fp
 8008cac:	461e      	mov	r6, r3
 8008cae:	462c      	mov	r4, r5
 8008cb0:	4544      	cmp	r4, r8
 8008cb2:	d30e      	bcc.n	8008cd2 <__mdiff+0xf6>
 8008cb4:	f108 0103 	add.w	r1, r8, #3
 8008cb8:	1b49      	subs	r1, r1, r5
 8008cba:	f021 0103 	bic.w	r1, r1, #3
 8008cbe:	3d03      	subs	r5, #3
 8008cc0:	45a8      	cmp	r8, r5
 8008cc2:	bf38      	it	cc
 8008cc4:	2100      	movcc	r1, #0
 8008cc6:	440b      	add	r3, r1
 8008cc8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008ccc:	b199      	cbz	r1, 8008cf6 <__mdiff+0x11a>
 8008cce:	6117      	str	r7, [r2, #16]
 8008cd0:	e79e      	b.n	8008c10 <__mdiff+0x34>
 8008cd2:	46e6      	mov	lr, ip
 8008cd4:	f854 1b04 	ldr.w	r1, [r4], #4
 8008cd8:	fa1f fc81 	uxth.w	ip, r1
 8008cdc:	44f4      	add	ip, lr
 8008cde:	0c08      	lsrs	r0, r1, #16
 8008ce0:	4471      	add	r1, lr
 8008ce2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008ce6:	b289      	uxth	r1, r1
 8008ce8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008cec:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008cf0:	f846 1b04 	str.w	r1, [r6], #4
 8008cf4:	e7dc      	b.n	8008cb0 <__mdiff+0xd4>
 8008cf6:	3f01      	subs	r7, #1
 8008cf8:	e7e6      	b.n	8008cc8 <__mdiff+0xec>
 8008cfa:	bf00      	nop
 8008cfc:	0800a1b6 	.word	0x0800a1b6
 8008d00:	0800a1c7 	.word	0x0800a1c7

08008d04 <__d2b>:
 8008d04:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8008d08:	2101      	movs	r1, #1
 8008d0a:	4690      	mov	r8, r2
 8008d0c:	4699      	mov	r9, r3
 8008d0e:	9e08      	ldr	r6, [sp, #32]
 8008d10:	f7ff fcd6 	bl	80086c0 <_Balloc>
 8008d14:	4604      	mov	r4, r0
 8008d16:	b930      	cbnz	r0, 8008d26 <__d2b+0x22>
 8008d18:	4602      	mov	r2, r0
 8008d1a:	f240 310f 	movw	r1, #783	@ 0x30f
 8008d1e:	4b23      	ldr	r3, [pc, #140]	@ (8008dac <__d2b+0xa8>)
 8008d20:	4823      	ldr	r0, [pc, #140]	@ (8008db0 <__d2b+0xac>)
 8008d22:	f000 fa6f 	bl	8009204 <__assert_func>
 8008d26:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008d2a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008d2e:	b10d      	cbz	r5, 8008d34 <__d2b+0x30>
 8008d30:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008d34:	9301      	str	r3, [sp, #4]
 8008d36:	f1b8 0300 	subs.w	r3, r8, #0
 8008d3a:	d024      	beq.n	8008d86 <__d2b+0x82>
 8008d3c:	4668      	mov	r0, sp
 8008d3e:	9300      	str	r3, [sp, #0]
 8008d40:	f7ff fd85 	bl	800884e <__lo0bits>
 8008d44:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008d48:	b1d8      	cbz	r0, 8008d82 <__d2b+0x7e>
 8008d4a:	f1c0 0320 	rsb	r3, r0, #32
 8008d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8008d52:	430b      	orrs	r3, r1
 8008d54:	40c2      	lsrs	r2, r0
 8008d56:	6163      	str	r3, [r4, #20]
 8008d58:	9201      	str	r2, [sp, #4]
 8008d5a:	9b01      	ldr	r3, [sp, #4]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	bf0c      	ite	eq
 8008d60:	2201      	moveq	r2, #1
 8008d62:	2202      	movne	r2, #2
 8008d64:	61a3      	str	r3, [r4, #24]
 8008d66:	6122      	str	r2, [r4, #16]
 8008d68:	b1ad      	cbz	r5, 8008d96 <__d2b+0x92>
 8008d6a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008d6e:	4405      	add	r5, r0
 8008d70:	6035      	str	r5, [r6, #0]
 8008d72:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008d76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d78:	6018      	str	r0, [r3, #0]
 8008d7a:	4620      	mov	r0, r4
 8008d7c:	b002      	add	sp, #8
 8008d7e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8008d82:	6161      	str	r1, [r4, #20]
 8008d84:	e7e9      	b.n	8008d5a <__d2b+0x56>
 8008d86:	a801      	add	r0, sp, #4
 8008d88:	f7ff fd61 	bl	800884e <__lo0bits>
 8008d8c:	9b01      	ldr	r3, [sp, #4]
 8008d8e:	2201      	movs	r2, #1
 8008d90:	6163      	str	r3, [r4, #20]
 8008d92:	3020      	adds	r0, #32
 8008d94:	e7e7      	b.n	8008d66 <__d2b+0x62>
 8008d96:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008d9a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008d9e:	6030      	str	r0, [r6, #0]
 8008da0:	6918      	ldr	r0, [r3, #16]
 8008da2:	f7ff fd35 	bl	8008810 <__hi0bits>
 8008da6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008daa:	e7e4      	b.n	8008d76 <__d2b+0x72>
 8008dac:	0800a1b6 	.word	0x0800a1b6
 8008db0:	0800a1c7 	.word	0x0800a1c7

08008db4 <__ssputs_r>:
 8008db4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008db8:	461f      	mov	r7, r3
 8008dba:	688e      	ldr	r6, [r1, #8]
 8008dbc:	4682      	mov	sl, r0
 8008dbe:	42be      	cmp	r6, r7
 8008dc0:	460c      	mov	r4, r1
 8008dc2:	4690      	mov	r8, r2
 8008dc4:	680b      	ldr	r3, [r1, #0]
 8008dc6:	d82d      	bhi.n	8008e24 <__ssputs_r+0x70>
 8008dc8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008dcc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008dd0:	d026      	beq.n	8008e20 <__ssputs_r+0x6c>
 8008dd2:	6965      	ldr	r5, [r4, #20]
 8008dd4:	6909      	ldr	r1, [r1, #16]
 8008dd6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008dda:	eba3 0901 	sub.w	r9, r3, r1
 8008dde:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008de2:	1c7b      	adds	r3, r7, #1
 8008de4:	444b      	add	r3, r9
 8008de6:	106d      	asrs	r5, r5, #1
 8008de8:	429d      	cmp	r5, r3
 8008dea:	bf38      	it	cc
 8008dec:	461d      	movcc	r5, r3
 8008dee:	0553      	lsls	r3, r2, #21
 8008df0:	d527      	bpl.n	8008e42 <__ssputs_r+0x8e>
 8008df2:	4629      	mov	r1, r5
 8008df4:	f7fd fec0 	bl	8006b78 <_malloc_r>
 8008df8:	4606      	mov	r6, r0
 8008dfa:	b360      	cbz	r0, 8008e56 <__ssputs_r+0xa2>
 8008dfc:	464a      	mov	r2, r9
 8008dfe:	6921      	ldr	r1, [r4, #16]
 8008e00:	f000 f9f2 	bl	80091e8 <memcpy>
 8008e04:	89a3      	ldrh	r3, [r4, #12]
 8008e06:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008e0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e0e:	81a3      	strh	r3, [r4, #12]
 8008e10:	6126      	str	r6, [r4, #16]
 8008e12:	444e      	add	r6, r9
 8008e14:	6026      	str	r6, [r4, #0]
 8008e16:	463e      	mov	r6, r7
 8008e18:	6165      	str	r5, [r4, #20]
 8008e1a:	eba5 0509 	sub.w	r5, r5, r9
 8008e1e:	60a5      	str	r5, [r4, #8]
 8008e20:	42be      	cmp	r6, r7
 8008e22:	d900      	bls.n	8008e26 <__ssputs_r+0x72>
 8008e24:	463e      	mov	r6, r7
 8008e26:	4632      	mov	r2, r6
 8008e28:	4641      	mov	r1, r8
 8008e2a:	6820      	ldr	r0, [r4, #0]
 8008e2c:	f000 f9c2 	bl	80091b4 <memmove>
 8008e30:	2000      	movs	r0, #0
 8008e32:	68a3      	ldr	r3, [r4, #8]
 8008e34:	1b9b      	subs	r3, r3, r6
 8008e36:	60a3      	str	r3, [r4, #8]
 8008e38:	6823      	ldr	r3, [r4, #0]
 8008e3a:	4433      	add	r3, r6
 8008e3c:	6023      	str	r3, [r4, #0]
 8008e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e42:	462a      	mov	r2, r5
 8008e44:	f000 fa0e 	bl	8009264 <_realloc_r>
 8008e48:	4606      	mov	r6, r0
 8008e4a:	2800      	cmp	r0, #0
 8008e4c:	d1e0      	bne.n	8008e10 <__ssputs_r+0x5c>
 8008e4e:	4650      	mov	r0, sl
 8008e50:	6921      	ldr	r1, [r4, #16]
 8008e52:	f7ff fbed 	bl	8008630 <_free_r>
 8008e56:	230c      	movs	r3, #12
 8008e58:	f8ca 3000 	str.w	r3, [sl]
 8008e5c:	89a3      	ldrh	r3, [r4, #12]
 8008e5e:	f04f 30ff 	mov.w	r0, #4294967295
 8008e62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e66:	81a3      	strh	r3, [r4, #12]
 8008e68:	e7e9      	b.n	8008e3e <__ssputs_r+0x8a>
	...

08008e6c <_svfiprintf_r>:
 8008e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e70:	4698      	mov	r8, r3
 8008e72:	898b      	ldrh	r3, [r1, #12]
 8008e74:	4607      	mov	r7, r0
 8008e76:	061b      	lsls	r3, r3, #24
 8008e78:	460d      	mov	r5, r1
 8008e7a:	4614      	mov	r4, r2
 8008e7c:	b09d      	sub	sp, #116	@ 0x74
 8008e7e:	d510      	bpl.n	8008ea2 <_svfiprintf_r+0x36>
 8008e80:	690b      	ldr	r3, [r1, #16]
 8008e82:	b973      	cbnz	r3, 8008ea2 <_svfiprintf_r+0x36>
 8008e84:	2140      	movs	r1, #64	@ 0x40
 8008e86:	f7fd fe77 	bl	8006b78 <_malloc_r>
 8008e8a:	6028      	str	r0, [r5, #0]
 8008e8c:	6128      	str	r0, [r5, #16]
 8008e8e:	b930      	cbnz	r0, 8008e9e <_svfiprintf_r+0x32>
 8008e90:	230c      	movs	r3, #12
 8008e92:	603b      	str	r3, [r7, #0]
 8008e94:	f04f 30ff 	mov.w	r0, #4294967295
 8008e98:	b01d      	add	sp, #116	@ 0x74
 8008e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e9e:	2340      	movs	r3, #64	@ 0x40
 8008ea0:	616b      	str	r3, [r5, #20]
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ea6:	2320      	movs	r3, #32
 8008ea8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008eac:	2330      	movs	r3, #48	@ 0x30
 8008eae:	f04f 0901 	mov.w	r9, #1
 8008eb2:	f8cd 800c 	str.w	r8, [sp, #12]
 8008eb6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8009050 <_svfiprintf_r+0x1e4>
 8008eba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008ebe:	4623      	mov	r3, r4
 8008ec0:	469a      	mov	sl, r3
 8008ec2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ec6:	b10a      	cbz	r2, 8008ecc <_svfiprintf_r+0x60>
 8008ec8:	2a25      	cmp	r2, #37	@ 0x25
 8008eca:	d1f9      	bne.n	8008ec0 <_svfiprintf_r+0x54>
 8008ecc:	ebba 0b04 	subs.w	fp, sl, r4
 8008ed0:	d00b      	beq.n	8008eea <_svfiprintf_r+0x7e>
 8008ed2:	465b      	mov	r3, fp
 8008ed4:	4622      	mov	r2, r4
 8008ed6:	4629      	mov	r1, r5
 8008ed8:	4638      	mov	r0, r7
 8008eda:	f7ff ff6b 	bl	8008db4 <__ssputs_r>
 8008ede:	3001      	adds	r0, #1
 8008ee0:	f000 80a7 	beq.w	8009032 <_svfiprintf_r+0x1c6>
 8008ee4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008ee6:	445a      	add	r2, fp
 8008ee8:	9209      	str	r2, [sp, #36]	@ 0x24
 8008eea:	f89a 3000 	ldrb.w	r3, [sl]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	f000 809f 	beq.w	8009032 <_svfiprintf_r+0x1c6>
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	f04f 32ff 	mov.w	r2, #4294967295
 8008efa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008efe:	f10a 0a01 	add.w	sl, sl, #1
 8008f02:	9304      	str	r3, [sp, #16]
 8008f04:	9307      	str	r3, [sp, #28]
 8008f06:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008f0a:	931a      	str	r3, [sp, #104]	@ 0x68
 8008f0c:	4654      	mov	r4, sl
 8008f0e:	2205      	movs	r2, #5
 8008f10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f14:	484e      	ldr	r0, [pc, #312]	@ (8009050 <_svfiprintf_r+0x1e4>)
 8008f16:	f7fe fd20 	bl	800795a <memchr>
 8008f1a:	9a04      	ldr	r2, [sp, #16]
 8008f1c:	b9d8      	cbnz	r0, 8008f56 <_svfiprintf_r+0xea>
 8008f1e:	06d0      	lsls	r0, r2, #27
 8008f20:	bf44      	itt	mi
 8008f22:	2320      	movmi	r3, #32
 8008f24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f28:	0711      	lsls	r1, r2, #28
 8008f2a:	bf44      	itt	mi
 8008f2c:	232b      	movmi	r3, #43	@ 0x2b
 8008f2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f32:	f89a 3000 	ldrb.w	r3, [sl]
 8008f36:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f38:	d015      	beq.n	8008f66 <_svfiprintf_r+0xfa>
 8008f3a:	4654      	mov	r4, sl
 8008f3c:	2000      	movs	r0, #0
 8008f3e:	f04f 0c0a 	mov.w	ip, #10
 8008f42:	9a07      	ldr	r2, [sp, #28]
 8008f44:	4621      	mov	r1, r4
 8008f46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f4a:	3b30      	subs	r3, #48	@ 0x30
 8008f4c:	2b09      	cmp	r3, #9
 8008f4e:	d94b      	bls.n	8008fe8 <_svfiprintf_r+0x17c>
 8008f50:	b1b0      	cbz	r0, 8008f80 <_svfiprintf_r+0x114>
 8008f52:	9207      	str	r2, [sp, #28]
 8008f54:	e014      	b.n	8008f80 <_svfiprintf_r+0x114>
 8008f56:	eba0 0308 	sub.w	r3, r0, r8
 8008f5a:	fa09 f303 	lsl.w	r3, r9, r3
 8008f5e:	4313      	orrs	r3, r2
 8008f60:	46a2      	mov	sl, r4
 8008f62:	9304      	str	r3, [sp, #16]
 8008f64:	e7d2      	b.n	8008f0c <_svfiprintf_r+0xa0>
 8008f66:	9b03      	ldr	r3, [sp, #12]
 8008f68:	1d19      	adds	r1, r3, #4
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	9103      	str	r1, [sp, #12]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	bfbb      	ittet	lt
 8008f72:	425b      	neglt	r3, r3
 8008f74:	f042 0202 	orrlt.w	r2, r2, #2
 8008f78:	9307      	strge	r3, [sp, #28]
 8008f7a:	9307      	strlt	r3, [sp, #28]
 8008f7c:	bfb8      	it	lt
 8008f7e:	9204      	strlt	r2, [sp, #16]
 8008f80:	7823      	ldrb	r3, [r4, #0]
 8008f82:	2b2e      	cmp	r3, #46	@ 0x2e
 8008f84:	d10a      	bne.n	8008f9c <_svfiprintf_r+0x130>
 8008f86:	7863      	ldrb	r3, [r4, #1]
 8008f88:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f8a:	d132      	bne.n	8008ff2 <_svfiprintf_r+0x186>
 8008f8c:	9b03      	ldr	r3, [sp, #12]
 8008f8e:	3402      	adds	r4, #2
 8008f90:	1d1a      	adds	r2, r3, #4
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	9203      	str	r2, [sp, #12]
 8008f96:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008f9a:	9305      	str	r3, [sp, #20]
 8008f9c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8009054 <_svfiprintf_r+0x1e8>
 8008fa0:	2203      	movs	r2, #3
 8008fa2:	4650      	mov	r0, sl
 8008fa4:	7821      	ldrb	r1, [r4, #0]
 8008fa6:	f7fe fcd8 	bl	800795a <memchr>
 8008faa:	b138      	cbz	r0, 8008fbc <_svfiprintf_r+0x150>
 8008fac:	2240      	movs	r2, #64	@ 0x40
 8008fae:	9b04      	ldr	r3, [sp, #16]
 8008fb0:	eba0 000a 	sub.w	r0, r0, sl
 8008fb4:	4082      	lsls	r2, r0
 8008fb6:	4313      	orrs	r3, r2
 8008fb8:	3401      	adds	r4, #1
 8008fba:	9304      	str	r3, [sp, #16]
 8008fbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fc0:	2206      	movs	r2, #6
 8008fc2:	4825      	ldr	r0, [pc, #148]	@ (8009058 <_svfiprintf_r+0x1ec>)
 8008fc4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008fc8:	f7fe fcc7 	bl	800795a <memchr>
 8008fcc:	2800      	cmp	r0, #0
 8008fce:	d036      	beq.n	800903e <_svfiprintf_r+0x1d2>
 8008fd0:	4b22      	ldr	r3, [pc, #136]	@ (800905c <_svfiprintf_r+0x1f0>)
 8008fd2:	bb1b      	cbnz	r3, 800901c <_svfiprintf_r+0x1b0>
 8008fd4:	9b03      	ldr	r3, [sp, #12]
 8008fd6:	3307      	adds	r3, #7
 8008fd8:	f023 0307 	bic.w	r3, r3, #7
 8008fdc:	3308      	adds	r3, #8
 8008fde:	9303      	str	r3, [sp, #12]
 8008fe0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fe2:	4433      	add	r3, r6
 8008fe4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008fe6:	e76a      	b.n	8008ebe <_svfiprintf_r+0x52>
 8008fe8:	460c      	mov	r4, r1
 8008fea:	2001      	movs	r0, #1
 8008fec:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ff0:	e7a8      	b.n	8008f44 <_svfiprintf_r+0xd8>
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	f04f 0c0a 	mov.w	ip, #10
 8008ff8:	4619      	mov	r1, r3
 8008ffa:	3401      	adds	r4, #1
 8008ffc:	9305      	str	r3, [sp, #20]
 8008ffe:	4620      	mov	r0, r4
 8009000:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009004:	3a30      	subs	r2, #48	@ 0x30
 8009006:	2a09      	cmp	r2, #9
 8009008:	d903      	bls.n	8009012 <_svfiprintf_r+0x1a6>
 800900a:	2b00      	cmp	r3, #0
 800900c:	d0c6      	beq.n	8008f9c <_svfiprintf_r+0x130>
 800900e:	9105      	str	r1, [sp, #20]
 8009010:	e7c4      	b.n	8008f9c <_svfiprintf_r+0x130>
 8009012:	4604      	mov	r4, r0
 8009014:	2301      	movs	r3, #1
 8009016:	fb0c 2101 	mla	r1, ip, r1, r2
 800901a:	e7f0      	b.n	8008ffe <_svfiprintf_r+0x192>
 800901c:	ab03      	add	r3, sp, #12
 800901e:	9300      	str	r3, [sp, #0]
 8009020:	462a      	mov	r2, r5
 8009022:	4638      	mov	r0, r7
 8009024:	4b0e      	ldr	r3, [pc, #56]	@ (8009060 <_svfiprintf_r+0x1f4>)
 8009026:	a904      	add	r1, sp, #16
 8009028:	f7fd fed0 	bl	8006dcc <_printf_float>
 800902c:	1c42      	adds	r2, r0, #1
 800902e:	4606      	mov	r6, r0
 8009030:	d1d6      	bne.n	8008fe0 <_svfiprintf_r+0x174>
 8009032:	89ab      	ldrh	r3, [r5, #12]
 8009034:	065b      	lsls	r3, r3, #25
 8009036:	f53f af2d 	bmi.w	8008e94 <_svfiprintf_r+0x28>
 800903a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800903c:	e72c      	b.n	8008e98 <_svfiprintf_r+0x2c>
 800903e:	ab03      	add	r3, sp, #12
 8009040:	9300      	str	r3, [sp, #0]
 8009042:	462a      	mov	r2, r5
 8009044:	4638      	mov	r0, r7
 8009046:	4b06      	ldr	r3, [pc, #24]	@ (8009060 <_svfiprintf_r+0x1f4>)
 8009048:	a904      	add	r1, sp, #16
 800904a:	f7fe f95d 	bl	8007308 <_printf_i>
 800904e:	e7ed      	b.n	800902c <_svfiprintf_r+0x1c0>
 8009050:	0800a220 	.word	0x0800a220
 8009054:	0800a226 	.word	0x0800a226
 8009058:	0800a22a 	.word	0x0800a22a
 800905c:	08006dcd 	.word	0x08006dcd
 8009060:	08008db5 	.word	0x08008db5

08009064 <__sflush_r>:
 8009064:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800906a:	0716      	lsls	r6, r2, #28
 800906c:	4605      	mov	r5, r0
 800906e:	460c      	mov	r4, r1
 8009070:	d454      	bmi.n	800911c <__sflush_r+0xb8>
 8009072:	684b      	ldr	r3, [r1, #4]
 8009074:	2b00      	cmp	r3, #0
 8009076:	dc02      	bgt.n	800907e <__sflush_r+0x1a>
 8009078:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800907a:	2b00      	cmp	r3, #0
 800907c:	dd48      	ble.n	8009110 <__sflush_r+0xac>
 800907e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009080:	2e00      	cmp	r6, #0
 8009082:	d045      	beq.n	8009110 <__sflush_r+0xac>
 8009084:	2300      	movs	r3, #0
 8009086:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800908a:	682f      	ldr	r7, [r5, #0]
 800908c:	6a21      	ldr	r1, [r4, #32]
 800908e:	602b      	str	r3, [r5, #0]
 8009090:	d030      	beq.n	80090f4 <__sflush_r+0x90>
 8009092:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009094:	89a3      	ldrh	r3, [r4, #12]
 8009096:	0759      	lsls	r1, r3, #29
 8009098:	d505      	bpl.n	80090a6 <__sflush_r+0x42>
 800909a:	6863      	ldr	r3, [r4, #4]
 800909c:	1ad2      	subs	r2, r2, r3
 800909e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80090a0:	b10b      	cbz	r3, 80090a6 <__sflush_r+0x42>
 80090a2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80090a4:	1ad2      	subs	r2, r2, r3
 80090a6:	2300      	movs	r3, #0
 80090a8:	4628      	mov	r0, r5
 80090aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80090ac:	6a21      	ldr	r1, [r4, #32]
 80090ae:	47b0      	blx	r6
 80090b0:	1c43      	adds	r3, r0, #1
 80090b2:	89a3      	ldrh	r3, [r4, #12]
 80090b4:	d106      	bne.n	80090c4 <__sflush_r+0x60>
 80090b6:	6829      	ldr	r1, [r5, #0]
 80090b8:	291d      	cmp	r1, #29
 80090ba:	d82b      	bhi.n	8009114 <__sflush_r+0xb0>
 80090bc:	4a28      	ldr	r2, [pc, #160]	@ (8009160 <__sflush_r+0xfc>)
 80090be:	40ca      	lsrs	r2, r1
 80090c0:	07d6      	lsls	r6, r2, #31
 80090c2:	d527      	bpl.n	8009114 <__sflush_r+0xb0>
 80090c4:	2200      	movs	r2, #0
 80090c6:	6062      	str	r2, [r4, #4]
 80090c8:	6922      	ldr	r2, [r4, #16]
 80090ca:	04d9      	lsls	r1, r3, #19
 80090cc:	6022      	str	r2, [r4, #0]
 80090ce:	d504      	bpl.n	80090da <__sflush_r+0x76>
 80090d0:	1c42      	adds	r2, r0, #1
 80090d2:	d101      	bne.n	80090d8 <__sflush_r+0x74>
 80090d4:	682b      	ldr	r3, [r5, #0]
 80090d6:	b903      	cbnz	r3, 80090da <__sflush_r+0x76>
 80090d8:	6560      	str	r0, [r4, #84]	@ 0x54
 80090da:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80090dc:	602f      	str	r7, [r5, #0]
 80090de:	b1b9      	cbz	r1, 8009110 <__sflush_r+0xac>
 80090e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80090e4:	4299      	cmp	r1, r3
 80090e6:	d002      	beq.n	80090ee <__sflush_r+0x8a>
 80090e8:	4628      	mov	r0, r5
 80090ea:	f7ff faa1 	bl	8008630 <_free_r>
 80090ee:	2300      	movs	r3, #0
 80090f0:	6363      	str	r3, [r4, #52]	@ 0x34
 80090f2:	e00d      	b.n	8009110 <__sflush_r+0xac>
 80090f4:	2301      	movs	r3, #1
 80090f6:	4628      	mov	r0, r5
 80090f8:	47b0      	blx	r6
 80090fa:	4602      	mov	r2, r0
 80090fc:	1c50      	adds	r0, r2, #1
 80090fe:	d1c9      	bne.n	8009094 <__sflush_r+0x30>
 8009100:	682b      	ldr	r3, [r5, #0]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d0c6      	beq.n	8009094 <__sflush_r+0x30>
 8009106:	2b1d      	cmp	r3, #29
 8009108:	d001      	beq.n	800910e <__sflush_r+0xaa>
 800910a:	2b16      	cmp	r3, #22
 800910c:	d11d      	bne.n	800914a <__sflush_r+0xe6>
 800910e:	602f      	str	r7, [r5, #0]
 8009110:	2000      	movs	r0, #0
 8009112:	e021      	b.n	8009158 <__sflush_r+0xf4>
 8009114:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009118:	b21b      	sxth	r3, r3
 800911a:	e01a      	b.n	8009152 <__sflush_r+0xee>
 800911c:	690f      	ldr	r7, [r1, #16]
 800911e:	2f00      	cmp	r7, #0
 8009120:	d0f6      	beq.n	8009110 <__sflush_r+0xac>
 8009122:	0793      	lsls	r3, r2, #30
 8009124:	bf18      	it	ne
 8009126:	2300      	movne	r3, #0
 8009128:	680e      	ldr	r6, [r1, #0]
 800912a:	bf08      	it	eq
 800912c:	694b      	ldreq	r3, [r1, #20]
 800912e:	1bf6      	subs	r6, r6, r7
 8009130:	600f      	str	r7, [r1, #0]
 8009132:	608b      	str	r3, [r1, #8]
 8009134:	2e00      	cmp	r6, #0
 8009136:	ddeb      	ble.n	8009110 <__sflush_r+0xac>
 8009138:	4633      	mov	r3, r6
 800913a:	463a      	mov	r2, r7
 800913c:	4628      	mov	r0, r5
 800913e:	6a21      	ldr	r1, [r4, #32]
 8009140:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8009144:	47e0      	blx	ip
 8009146:	2800      	cmp	r0, #0
 8009148:	dc07      	bgt.n	800915a <__sflush_r+0xf6>
 800914a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800914e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009152:	f04f 30ff 	mov.w	r0, #4294967295
 8009156:	81a3      	strh	r3, [r4, #12]
 8009158:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800915a:	4407      	add	r7, r0
 800915c:	1a36      	subs	r6, r6, r0
 800915e:	e7e9      	b.n	8009134 <__sflush_r+0xd0>
 8009160:	20400001 	.word	0x20400001

08009164 <_fflush_r>:
 8009164:	b538      	push	{r3, r4, r5, lr}
 8009166:	690b      	ldr	r3, [r1, #16]
 8009168:	4605      	mov	r5, r0
 800916a:	460c      	mov	r4, r1
 800916c:	b913      	cbnz	r3, 8009174 <_fflush_r+0x10>
 800916e:	2500      	movs	r5, #0
 8009170:	4628      	mov	r0, r5
 8009172:	bd38      	pop	{r3, r4, r5, pc}
 8009174:	b118      	cbz	r0, 800917e <_fflush_r+0x1a>
 8009176:	6a03      	ldr	r3, [r0, #32]
 8009178:	b90b      	cbnz	r3, 800917e <_fflush_r+0x1a>
 800917a:	f7fe fa6f 	bl	800765c <__sinit>
 800917e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d0f3      	beq.n	800916e <_fflush_r+0xa>
 8009186:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009188:	07d0      	lsls	r0, r2, #31
 800918a:	d404      	bmi.n	8009196 <_fflush_r+0x32>
 800918c:	0599      	lsls	r1, r3, #22
 800918e:	d402      	bmi.n	8009196 <_fflush_r+0x32>
 8009190:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009192:	f7fe fbd8 	bl	8007946 <__retarget_lock_acquire_recursive>
 8009196:	4628      	mov	r0, r5
 8009198:	4621      	mov	r1, r4
 800919a:	f7ff ff63 	bl	8009064 <__sflush_r>
 800919e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80091a0:	4605      	mov	r5, r0
 80091a2:	07da      	lsls	r2, r3, #31
 80091a4:	d4e4      	bmi.n	8009170 <_fflush_r+0xc>
 80091a6:	89a3      	ldrh	r3, [r4, #12]
 80091a8:	059b      	lsls	r3, r3, #22
 80091aa:	d4e1      	bmi.n	8009170 <_fflush_r+0xc>
 80091ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80091ae:	f7fe fbcb 	bl	8007948 <__retarget_lock_release_recursive>
 80091b2:	e7dd      	b.n	8009170 <_fflush_r+0xc>

080091b4 <memmove>:
 80091b4:	4288      	cmp	r0, r1
 80091b6:	b510      	push	{r4, lr}
 80091b8:	eb01 0402 	add.w	r4, r1, r2
 80091bc:	d902      	bls.n	80091c4 <memmove+0x10>
 80091be:	4284      	cmp	r4, r0
 80091c0:	4623      	mov	r3, r4
 80091c2:	d807      	bhi.n	80091d4 <memmove+0x20>
 80091c4:	1e43      	subs	r3, r0, #1
 80091c6:	42a1      	cmp	r1, r4
 80091c8:	d008      	beq.n	80091dc <memmove+0x28>
 80091ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80091ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80091d2:	e7f8      	b.n	80091c6 <memmove+0x12>
 80091d4:	4601      	mov	r1, r0
 80091d6:	4402      	add	r2, r0
 80091d8:	428a      	cmp	r2, r1
 80091da:	d100      	bne.n	80091de <memmove+0x2a>
 80091dc:	bd10      	pop	{r4, pc}
 80091de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80091e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80091e6:	e7f7      	b.n	80091d8 <memmove+0x24>

080091e8 <memcpy>:
 80091e8:	440a      	add	r2, r1
 80091ea:	4291      	cmp	r1, r2
 80091ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80091f0:	d100      	bne.n	80091f4 <memcpy+0xc>
 80091f2:	4770      	bx	lr
 80091f4:	b510      	push	{r4, lr}
 80091f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091fa:	4291      	cmp	r1, r2
 80091fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009200:	d1f9      	bne.n	80091f6 <memcpy+0xe>
 8009202:	bd10      	pop	{r4, pc}

08009204 <__assert_func>:
 8009204:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009206:	4614      	mov	r4, r2
 8009208:	461a      	mov	r2, r3
 800920a:	4b09      	ldr	r3, [pc, #36]	@ (8009230 <__assert_func+0x2c>)
 800920c:	4605      	mov	r5, r0
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	68d8      	ldr	r0, [r3, #12]
 8009212:	b14c      	cbz	r4, 8009228 <__assert_func+0x24>
 8009214:	4b07      	ldr	r3, [pc, #28]	@ (8009234 <__assert_func+0x30>)
 8009216:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800921a:	9100      	str	r1, [sp, #0]
 800921c:	462b      	mov	r3, r5
 800921e:	4906      	ldr	r1, [pc, #24]	@ (8009238 <__assert_func+0x34>)
 8009220:	f000 f85c 	bl	80092dc <fiprintf>
 8009224:	f000 f86c 	bl	8009300 <abort>
 8009228:	4b04      	ldr	r3, [pc, #16]	@ (800923c <__assert_func+0x38>)
 800922a:	461c      	mov	r4, r3
 800922c:	e7f3      	b.n	8009216 <__assert_func+0x12>
 800922e:	bf00      	nop
 8009230:	20000030 	.word	0x20000030
 8009234:	0800a23b 	.word	0x0800a23b
 8009238:	0800a248 	.word	0x0800a248
 800923c:	0800a276 	.word	0x0800a276

08009240 <__ascii_mbtowc>:
 8009240:	b082      	sub	sp, #8
 8009242:	b901      	cbnz	r1, 8009246 <__ascii_mbtowc+0x6>
 8009244:	a901      	add	r1, sp, #4
 8009246:	b142      	cbz	r2, 800925a <__ascii_mbtowc+0x1a>
 8009248:	b14b      	cbz	r3, 800925e <__ascii_mbtowc+0x1e>
 800924a:	7813      	ldrb	r3, [r2, #0]
 800924c:	600b      	str	r3, [r1, #0]
 800924e:	7812      	ldrb	r2, [r2, #0]
 8009250:	1e10      	subs	r0, r2, #0
 8009252:	bf18      	it	ne
 8009254:	2001      	movne	r0, #1
 8009256:	b002      	add	sp, #8
 8009258:	4770      	bx	lr
 800925a:	4610      	mov	r0, r2
 800925c:	e7fb      	b.n	8009256 <__ascii_mbtowc+0x16>
 800925e:	f06f 0001 	mvn.w	r0, #1
 8009262:	e7f8      	b.n	8009256 <__ascii_mbtowc+0x16>

08009264 <_realloc_r>:
 8009264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009268:	4607      	mov	r7, r0
 800926a:	4614      	mov	r4, r2
 800926c:	460d      	mov	r5, r1
 800926e:	b921      	cbnz	r1, 800927a <_realloc_r+0x16>
 8009270:	4611      	mov	r1, r2
 8009272:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009276:	f7fd bc7f 	b.w	8006b78 <_malloc_r>
 800927a:	b92a      	cbnz	r2, 8009288 <_realloc_r+0x24>
 800927c:	f7ff f9d8 	bl	8008630 <_free_r>
 8009280:	4625      	mov	r5, r4
 8009282:	4628      	mov	r0, r5
 8009284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009288:	f000 f841 	bl	800930e <_malloc_usable_size_r>
 800928c:	4284      	cmp	r4, r0
 800928e:	4606      	mov	r6, r0
 8009290:	d802      	bhi.n	8009298 <_realloc_r+0x34>
 8009292:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009296:	d8f4      	bhi.n	8009282 <_realloc_r+0x1e>
 8009298:	4621      	mov	r1, r4
 800929a:	4638      	mov	r0, r7
 800929c:	f7fd fc6c 	bl	8006b78 <_malloc_r>
 80092a0:	4680      	mov	r8, r0
 80092a2:	b908      	cbnz	r0, 80092a8 <_realloc_r+0x44>
 80092a4:	4645      	mov	r5, r8
 80092a6:	e7ec      	b.n	8009282 <_realloc_r+0x1e>
 80092a8:	42b4      	cmp	r4, r6
 80092aa:	4622      	mov	r2, r4
 80092ac:	4629      	mov	r1, r5
 80092ae:	bf28      	it	cs
 80092b0:	4632      	movcs	r2, r6
 80092b2:	f7ff ff99 	bl	80091e8 <memcpy>
 80092b6:	4629      	mov	r1, r5
 80092b8:	4638      	mov	r0, r7
 80092ba:	f7ff f9b9 	bl	8008630 <_free_r>
 80092be:	e7f1      	b.n	80092a4 <_realloc_r+0x40>

080092c0 <__ascii_wctomb>:
 80092c0:	4603      	mov	r3, r0
 80092c2:	4608      	mov	r0, r1
 80092c4:	b141      	cbz	r1, 80092d8 <__ascii_wctomb+0x18>
 80092c6:	2aff      	cmp	r2, #255	@ 0xff
 80092c8:	d904      	bls.n	80092d4 <__ascii_wctomb+0x14>
 80092ca:	228a      	movs	r2, #138	@ 0x8a
 80092cc:	f04f 30ff 	mov.w	r0, #4294967295
 80092d0:	601a      	str	r2, [r3, #0]
 80092d2:	4770      	bx	lr
 80092d4:	2001      	movs	r0, #1
 80092d6:	700a      	strb	r2, [r1, #0]
 80092d8:	4770      	bx	lr
	...

080092dc <fiprintf>:
 80092dc:	b40e      	push	{r1, r2, r3}
 80092de:	b503      	push	{r0, r1, lr}
 80092e0:	4601      	mov	r1, r0
 80092e2:	ab03      	add	r3, sp, #12
 80092e4:	4805      	ldr	r0, [pc, #20]	@ (80092fc <fiprintf+0x20>)
 80092e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80092ea:	6800      	ldr	r0, [r0, #0]
 80092ec:	9301      	str	r3, [sp, #4]
 80092ee:	f000 f83d 	bl	800936c <_vfiprintf_r>
 80092f2:	b002      	add	sp, #8
 80092f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80092f8:	b003      	add	sp, #12
 80092fa:	4770      	bx	lr
 80092fc:	20000030 	.word	0x20000030

08009300 <abort>:
 8009300:	2006      	movs	r0, #6
 8009302:	b508      	push	{r3, lr}
 8009304:	f000 fa06 	bl	8009714 <raise>
 8009308:	2001      	movs	r0, #1
 800930a:	f7f9 face 	bl	80028aa <_exit>

0800930e <_malloc_usable_size_r>:
 800930e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009312:	1f18      	subs	r0, r3, #4
 8009314:	2b00      	cmp	r3, #0
 8009316:	bfbc      	itt	lt
 8009318:	580b      	ldrlt	r3, [r1, r0]
 800931a:	18c0      	addlt	r0, r0, r3
 800931c:	4770      	bx	lr

0800931e <__sfputc_r>:
 800931e:	6893      	ldr	r3, [r2, #8]
 8009320:	b410      	push	{r4}
 8009322:	3b01      	subs	r3, #1
 8009324:	2b00      	cmp	r3, #0
 8009326:	6093      	str	r3, [r2, #8]
 8009328:	da07      	bge.n	800933a <__sfputc_r+0x1c>
 800932a:	6994      	ldr	r4, [r2, #24]
 800932c:	42a3      	cmp	r3, r4
 800932e:	db01      	blt.n	8009334 <__sfputc_r+0x16>
 8009330:	290a      	cmp	r1, #10
 8009332:	d102      	bne.n	800933a <__sfputc_r+0x1c>
 8009334:	bc10      	pop	{r4}
 8009336:	f000 b931 	b.w	800959c <__swbuf_r>
 800933a:	6813      	ldr	r3, [r2, #0]
 800933c:	1c58      	adds	r0, r3, #1
 800933e:	6010      	str	r0, [r2, #0]
 8009340:	7019      	strb	r1, [r3, #0]
 8009342:	4608      	mov	r0, r1
 8009344:	bc10      	pop	{r4}
 8009346:	4770      	bx	lr

08009348 <__sfputs_r>:
 8009348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800934a:	4606      	mov	r6, r0
 800934c:	460f      	mov	r7, r1
 800934e:	4614      	mov	r4, r2
 8009350:	18d5      	adds	r5, r2, r3
 8009352:	42ac      	cmp	r4, r5
 8009354:	d101      	bne.n	800935a <__sfputs_r+0x12>
 8009356:	2000      	movs	r0, #0
 8009358:	e007      	b.n	800936a <__sfputs_r+0x22>
 800935a:	463a      	mov	r2, r7
 800935c:	4630      	mov	r0, r6
 800935e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009362:	f7ff ffdc 	bl	800931e <__sfputc_r>
 8009366:	1c43      	adds	r3, r0, #1
 8009368:	d1f3      	bne.n	8009352 <__sfputs_r+0xa>
 800936a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800936c <_vfiprintf_r>:
 800936c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009370:	460d      	mov	r5, r1
 8009372:	4614      	mov	r4, r2
 8009374:	4698      	mov	r8, r3
 8009376:	4606      	mov	r6, r0
 8009378:	b09d      	sub	sp, #116	@ 0x74
 800937a:	b118      	cbz	r0, 8009384 <_vfiprintf_r+0x18>
 800937c:	6a03      	ldr	r3, [r0, #32]
 800937e:	b90b      	cbnz	r3, 8009384 <_vfiprintf_r+0x18>
 8009380:	f7fe f96c 	bl	800765c <__sinit>
 8009384:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009386:	07d9      	lsls	r1, r3, #31
 8009388:	d405      	bmi.n	8009396 <_vfiprintf_r+0x2a>
 800938a:	89ab      	ldrh	r3, [r5, #12]
 800938c:	059a      	lsls	r2, r3, #22
 800938e:	d402      	bmi.n	8009396 <_vfiprintf_r+0x2a>
 8009390:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009392:	f7fe fad8 	bl	8007946 <__retarget_lock_acquire_recursive>
 8009396:	89ab      	ldrh	r3, [r5, #12]
 8009398:	071b      	lsls	r3, r3, #28
 800939a:	d501      	bpl.n	80093a0 <_vfiprintf_r+0x34>
 800939c:	692b      	ldr	r3, [r5, #16]
 800939e:	b99b      	cbnz	r3, 80093c8 <_vfiprintf_r+0x5c>
 80093a0:	4629      	mov	r1, r5
 80093a2:	4630      	mov	r0, r6
 80093a4:	f000 f938 	bl	8009618 <__swsetup_r>
 80093a8:	b170      	cbz	r0, 80093c8 <_vfiprintf_r+0x5c>
 80093aa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80093ac:	07dc      	lsls	r4, r3, #31
 80093ae:	d504      	bpl.n	80093ba <_vfiprintf_r+0x4e>
 80093b0:	f04f 30ff 	mov.w	r0, #4294967295
 80093b4:	b01d      	add	sp, #116	@ 0x74
 80093b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093ba:	89ab      	ldrh	r3, [r5, #12]
 80093bc:	0598      	lsls	r0, r3, #22
 80093be:	d4f7      	bmi.n	80093b0 <_vfiprintf_r+0x44>
 80093c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80093c2:	f7fe fac1 	bl	8007948 <__retarget_lock_release_recursive>
 80093c6:	e7f3      	b.n	80093b0 <_vfiprintf_r+0x44>
 80093c8:	2300      	movs	r3, #0
 80093ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80093cc:	2320      	movs	r3, #32
 80093ce:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80093d2:	2330      	movs	r3, #48	@ 0x30
 80093d4:	f04f 0901 	mov.w	r9, #1
 80093d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80093dc:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8009588 <_vfiprintf_r+0x21c>
 80093e0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80093e4:	4623      	mov	r3, r4
 80093e6:	469a      	mov	sl, r3
 80093e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80093ec:	b10a      	cbz	r2, 80093f2 <_vfiprintf_r+0x86>
 80093ee:	2a25      	cmp	r2, #37	@ 0x25
 80093f0:	d1f9      	bne.n	80093e6 <_vfiprintf_r+0x7a>
 80093f2:	ebba 0b04 	subs.w	fp, sl, r4
 80093f6:	d00b      	beq.n	8009410 <_vfiprintf_r+0xa4>
 80093f8:	465b      	mov	r3, fp
 80093fa:	4622      	mov	r2, r4
 80093fc:	4629      	mov	r1, r5
 80093fe:	4630      	mov	r0, r6
 8009400:	f7ff ffa2 	bl	8009348 <__sfputs_r>
 8009404:	3001      	adds	r0, #1
 8009406:	f000 80a7 	beq.w	8009558 <_vfiprintf_r+0x1ec>
 800940a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800940c:	445a      	add	r2, fp
 800940e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009410:	f89a 3000 	ldrb.w	r3, [sl]
 8009414:	2b00      	cmp	r3, #0
 8009416:	f000 809f 	beq.w	8009558 <_vfiprintf_r+0x1ec>
 800941a:	2300      	movs	r3, #0
 800941c:	f04f 32ff 	mov.w	r2, #4294967295
 8009420:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009424:	f10a 0a01 	add.w	sl, sl, #1
 8009428:	9304      	str	r3, [sp, #16]
 800942a:	9307      	str	r3, [sp, #28]
 800942c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009430:	931a      	str	r3, [sp, #104]	@ 0x68
 8009432:	4654      	mov	r4, sl
 8009434:	2205      	movs	r2, #5
 8009436:	f814 1b01 	ldrb.w	r1, [r4], #1
 800943a:	4853      	ldr	r0, [pc, #332]	@ (8009588 <_vfiprintf_r+0x21c>)
 800943c:	f7fe fa8d 	bl	800795a <memchr>
 8009440:	9a04      	ldr	r2, [sp, #16]
 8009442:	b9d8      	cbnz	r0, 800947c <_vfiprintf_r+0x110>
 8009444:	06d1      	lsls	r1, r2, #27
 8009446:	bf44      	itt	mi
 8009448:	2320      	movmi	r3, #32
 800944a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800944e:	0713      	lsls	r3, r2, #28
 8009450:	bf44      	itt	mi
 8009452:	232b      	movmi	r3, #43	@ 0x2b
 8009454:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009458:	f89a 3000 	ldrb.w	r3, [sl]
 800945c:	2b2a      	cmp	r3, #42	@ 0x2a
 800945e:	d015      	beq.n	800948c <_vfiprintf_r+0x120>
 8009460:	4654      	mov	r4, sl
 8009462:	2000      	movs	r0, #0
 8009464:	f04f 0c0a 	mov.w	ip, #10
 8009468:	9a07      	ldr	r2, [sp, #28]
 800946a:	4621      	mov	r1, r4
 800946c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009470:	3b30      	subs	r3, #48	@ 0x30
 8009472:	2b09      	cmp	r3, #9
 8009474:	d94b      	bls.n	800950e <_vfiprintf_r+0x1a2>
 8009476:	b1b0      	cbz	r0, 80094a6 <_vfiprintf_r+0x13a>
 8009478:	9207      	str	r2, [sp, #28]
 800947a:	e014      	b.n	80094a6 <_vfiprintf_r+0x13a>
 800947c:	eba0 0308 	sub.w	r3, r0, r8
 8009480:	fa09 f303 	lsl.w	r3, r9, r3
 8009484:	4313      	orrs	r3, r2
 8009486:	46a2      	mov	sl, r4
 8009488:	9304      	str	r3, [sp, #16]
 800948a:	e7d2      	b.n	8009432 <_vfiprintf_r+0xc6>
 800948c:	9b03      	ldr	r3, [sp, #12]
 800948e:	1d19      	adds	r1, r3, #4
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	9103      	str	r1, [sp, #12]
 8009494:	2b00      	cmp	r3, #0
 8009496:	bfbb      	ittet	lt
 8009498:	425b      	neglt	r3, r3
 800949a:	f042 0202 	orrlt.w	r2, r2, #2
 800949e:	9307      	strge	r3, [sp, #28]
 80094a0:	9307      	strlt	r3, [sp, #28]
 80094a2:	bfb8      	it	lt
 80094a4:	9204      	strlt	r2, [sp, #16]
 80094a6:	7823      	ldrb	r3, [r4, #0]
 80094a8:	2b2e      	cmp	r3, #46	@ 0x2e
 80094aa:	d10a      	bne.n	80094c2 <_vfiprintf_r+0x156>
 80094ac:	7863      	ldrb	r3, [r4, #1]
 80094ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80094b0:	d132      	bne.n	8009518 <_vfiprintf_r+0x1ac>
 80094b2:	9b03      	ldr	r3, [sp, #12]
 80094b4:	3402      	adds	r4, #2
 80094b6:	1d1a      	adds	r2, r3, #4
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	9203      	str	r2, [sp, #12]
 80094bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80094c0:	9305      	str	r3, [sp, #20]
 80094c2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800958c <_vfiprintf_r+0x220>
 80094c6:	2203      	movs	r2, #3
 80094c8:	4650      	mov	r0, sl
 80094ca:	7821      	ldrb	r1, [r4, #0]
 80094cc:	f7fe fa45 	bl	800795a <memchr>
 80094d0:	b138      	cbz	r0, 80094e2 <_vfiprintf_r+0x176>
 80094d2:	2240      	movs	r2, #64	@ 0x40
 80094d4:	9b04      	ldr	r3, [sp, #16]
 80094d6:	eba0 000a 	sub.w	r0, r0, sl
 80094da:	4082      	lsls	r2, r0
 80094dc:	4313      	orrs	r3, r2
 80094de:	3401      	adds	r4, #1
 80094e0:	9304      	str	r3, [sp, #16]
 80094e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094e6:	2206      	movs	r2, #6
 80094e8:	4829      	ldr	r0, [pc, #164]	@ (8009590 <_vfiprintf_r+0x224>)
 80094ea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80094ee:	f7fe fa34 	bl	800795a <memchr>
 80094f2:	2800      	cmp	r0, #0
 80094f4:	d03f      	beq.n	8009576 <_vfiprintf_r+0x20a>
 80094f6:	4b27      	ldr	r3, [pc, #156]	@ (8009594 <_vfiprintf_r+0x228>)
 80094f8:	bb1b      	cbnz	r3, 8009542 <_vfiprintf_r+0x1d6>
 80094fa:	9b03      	ldr	r3, [sp, #12]
 80094fc:	3307      	adds	r3, #7
 80094fe:	f023 0307 	bic.w	r3, r3, #7
 8009502:	3308      	adds	r3, #8
 8009504:	9303      	str	r3, [sp, #12]
 8009506:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009508:	443b      	add	r3, r7
 800950a:	9309      	str	r3, [sp, #36]	@ 0x24
 800950c:	e76a      	b.n	80093e4 <_vfiprintf_r+0x78>
 800950e:	460c      	mov	r4, r1
 8009510:	2001      	movs	r0, #1
 8009512:	fb0c 3202 	mla	r2, ip, r2, r3
 8009516:	e7a8      	b.n	800946a <_vfiprintf_r+0xfe>
 8009518:	2300      	movs	r3, #0
 800951a:	f04f 0c0a 	mov.w	ip, #10
 800951e:	4619      	mov	r1, r3
 8009520:	3401      	adds	r4, #1
 8009522:	9305      	str	r3, [sp, #20]
 8009524:	4620      	mov	r0, r4
 8009526:	f810 2b01 	ldrb.w	r2, [r0], #1
 800952a:	3a30      	subs	r2, #48	@ 0x30
 800952c:	2a09      	cmp	r2, #9
 800952e:	d903      	bls.n	8009538 <_vfiprintf_r+0x1cc>
 8009530:	2b00      	cmp	r3, #0
 8009532:	d0c6      	beq.n	80094c2 <_vfiprintf_r+0x156>
 8009534:	9105      	str	r1, [sp, #20]
 8009536:	e7c4      	b.n	80094c2 <_vfiprintf_r+0x156>
 8009538:	4604      	mov	r4, r0
 800953a:	2301      	movs	r3, #1
 800953c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009540:	e7f0      	b.n	8009524 <_vfiprintf_r+0x1b8>
 8009542:	ab03      	add	r3, sp, #12
 8009544:	9300      	str	r3, [sp, #0]
 8009546:	462a      	mov	r2, r5
 8009548:	4630      	mov	r0, r6
 800954a:	4b13      	ldr	r3, [pc, #76]	@ (8009598 <_vfiprintf_r+0x22c>)
 800954c:	a904      	add	r1, sp, #16
 800954e:	f7fd fc3d 	bl	8006dcc <_printf_float>
 8009552:	4607      	mov	r7, r0
 8009554:	1c78      	adds	r0, r7, #1
 8009556:	d1d6      	bne.n	8009506 <_vfiprintf_r+0x19a>
 8009558:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800955a:	07d9      	lsls	r1, r3, #31
 800955c:	d405      	bmi.n	800956a <_vfiprintf_r+0x1fe>
 800955e:	89ab      	ldrh	r3, [r5, #12]
 8009560:	059a      	lsls	r2, r3, #22
 8009562:	d402      	bmi.n	800956a <_vfiprintf_r+0x1fe>
 8009564:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009566:	f7fe f9ef 	bl	8007948 <__retarget_lock_release_recursive>
 800956a:	89ab      	ldrh	r3, [r5, #12]
 800956c:	065b      	lsls	r3, r3, #25
 800956e:	f53f af1f 	bmi.w	80093b0 <_vfiprintf_r+0x44>
 8009572:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009574:	e71e      	b.n	80093b4 <_vfiprintf_r+0x48>
 8009576:	ab03      	add	r3, sp, #12
 8009578:	9300      	str	r3, [sp, #0]
 800957a:	462a      	mov	r2, r5
 800957c:	4630      	mov	r0, r6
 800957e:	4b06      	ldr	r3, [pc, #24]	@ (8009598 <_vfiprintf_r+0x22c>)
 8009580:	a904      	add	r1, sp, #16
 8009582:	f7fd fec1 	bl	8007308 <_printf_i>
 8009586:	e7e4      	b.n	8009552 <_vfiprintf_r+0x1e6>
 8009588:	0800a220 	.word	0x0800a220
 800958c:	0800a226 	.word	0x0800a226
 8009590:	0800a22a 	.word	0x0800a22a
 8009594:	08006dcd 	.word	0x08006dcd
 8009598:	08009349 	.word	0x08009349

0800959c <__swbuf_r>:
 800959c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800959e:	460e      	mov	r6, r1
 80095a0:	4614      	mov	r4, r2
 80095a2:	4605      	mov	r5, r0
 80095a4:	b118      	cbz	r0, 80095ae <__swbuf_r+0x12>
 80095a6:	6a03      	ldr	r3, [r0, #32]
 80095a8:	b90b      	cbnz	r3, 80095ae <__swbuf_r+0x12>
 80095aa:	f7fe f857 	bl	800765c <__sinit>
 80095ae:	69a3      	ldr	r3, [r4, #24]
 80095b0:	60a3      	str	r3, [r4, #8]
 80095b2:	89a3      	ldrh	r3, [r4, #12]
 80095b4:	071a      	lsls	r2, r3, #28
 80095b6:	d501      	bpl.n	80095bc <__swbuf_r+0x20>
 80095b8:	6923      	ldr	r3, [r4, #16]
 80095ba:	b943      	cbnz	r3, 80095ce <__swbuf_r+0x32>
 80095bc:	4621      	mov	r1, r4
 80095be:	4628      	mov	r0, r5
 80095c0:	f000 f82a 	bl	8009618 <__swsetup_r>
 80095c4:	b118      	cbz	r0, 80095ce <__swbuf_r+0x32>
 80095c6:	f04f 37ff 	mov.w	r7, #4294967295
 80095ca:	4638      	mov	r0, r7
 80095cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095ce:	6823      	ldr	r3, [r4, #0]
 80095d0:	6922      	ldr	r2, [r4, #16]
 80095d2:	b2f6      	uxtb	r6, r6
 80095d4:	1a98      	subs	r0, r3, r2
 80095d6:	6963      	ldr	r3, [r4, #20]
 80095d8:	4637      	mov	r7, r6
 80095da:	4283      	cmp	r3, r0
 80095dc:	dc05      	bgt.n	80095ea <__swbuf_r+0x4e>
 80095de:	4621      	mov	r1, r4
 80095e0:	4628      	mov	r0, r5
 80095e2:	f7ff fdbf 	bl	8009164 <_fflush_r>
 80095e6:	2800      	cmp	r0, #0
 80095e8:	d1ed      	bne.n	80095c6 <__swbuf_r+0x2a>
 80095ea:	68a3      	ldr	r3, [r4, #8]
 80095ec:	3b01      	subs	r3, #1
 80095ee:	60a3      	str	r3, [r4, #8]
 80095f0:	6823      	ldr	r3, [r4, #0]
 80095f2:	1c5a      	adds	r2, r3, #1
 80095f4:	6022      	str	r2, [r4, #0]
 80095f6:	701e      	strb	r6, [r3, #0]
 80095f8:	6962      	ldr	r2, [r4, #20]
 80095fa:	1c43      	adds	r3, r0, #1
 80095fc:	429a      	cmp	r2, r3
 80095fe:	d004      	beq.n	800960a <__swbuf_r+0x6e>
 8009600:	89a3      	ldrh	r3, [r4, #12]
 8009602:	07db      	lsls	r3, r3, #31
 8009604:	d5e1      	bpl.n	80095ca <__swbuf_r+0x2e>
 8009606:	2e0a      	cmp	r6, #10
 8009608:	d1df      	bne.n	80095ca <__swbuf_r+0x2e>
 800960a:	4621      	mov	r1, r4
 800960c:	4628      	mov	r0, r5
 800960e:	f7ff fda9 	bl	8009164 <_fflush_r>
 8009612:	2800      	cmp	r0, #0
 8009614:	d0d9      	beq.n	80095ca <__swbuf_r+0x2e>
 8009616:	e7d6      	b.n	80095c6 <__swbuf_r+0x2a>

08009618 <__swsetup_r>:
 8009618:	b538      	push	{r3, r4, r5, lr}
 800961a:	4b29      	ldr	r3, [pc, #164]	@ (80096c0 <__swsetup_r+0xa8>)
 800961c:	4605      	mov	r5, r0
 800961e:	6818      	ldr	r0, [r3, #0]
 8009620:	460c      	mov	r4, r1
 8009622:	b118      	cbz	r0, 800962c <__swsetup_r+0x14>
 8009624:	6a03      	ldr	r3, [r0, #32]
 8009626:	b90b      	cbnz	r3, 800962c <__swsetup_r+0x14>
 8009628:	f7fe f818 	bl	800765c <__sinit>
 800962c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009630:	0719      	lsls	r1, r3, #28
 8009632:	d422      	bmi.n	800967a <__swsetup_r+0x62>
 8009634:	06da      	lsls	r2, r3, #27
 8009636:	d407      	bmi.n	8009648 <__swsetup_r+0x30>
 8009638:	2209      	movs	r2, #9
 800963a:	602a      	str	r2, [r5, #0]
 800963c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009640:	f04f 30ff 	mov.w	r0, #4294967295
 8009644:	81a3      	strh	r3, [r4, #12]
 8009646:	e033      	b.n	80096b0 <__swsetup_r+0x98>
 8009648:	0758      	lsls	r0, r3, #29
 800964a:	d512      	bpl.n	8009672 <__swsetup_r+0x5a>
 800964c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800964e:	b141      	cbz	r1, 8009662 <__swsetup_r+0x4a>
 8009650:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009654:	4299      	cmp	r1, r3
 8009656:	d002      	beq.n	800965e <__swsetup_r+0x46>
 8009658:	4628      	mov	r0, r5
 800965a:	f7fe ffe9 	bl	8008630 <_free_r>
 800965e:	2300      	movs	r3, #0
 8009660:	6363      	str	r3, [r4, #52]	@ 0x34
 8009662:	89a3      	ldrh	r3, [r4, #12]
 8009664:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009668:	81a3      	strh	r3, [r4, #12]
 800966a:	2300      	movs	r3, #0
 800966c:	6063      	str	r3, [r4, #4]
 800966e:	6923      	ldr	r3, [r4, #16]
 8009670:	6023      	str	r3, [r4, #0]
 8009672:	89a3      	ldrh	r3, [r4, #12]
 8009674:	f043 0308 	orr.w	r3, r3, #8
 8009678:	81a3      	strh	r3, [r4, #12]
 800967a:	6923      	ldr	r3, [r4, #16]
 800967c:	b94b      	cbnz	r3, 8009692 <__swsetup_r+0x7a>
 800967e:	89a3      	ldrh	r3, [r4, #12]
 8009680:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009684:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009688:	d003      	beq.n	8009692 <__swsetup_r+0x7a>
 800968a:	4621      	mov	r1, r4
 800968c:	4628      	mov	r0, r5
 800968e:	f000 f882 	bl	8009796 <__smakebuf_r>
 8009692:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009696:	f013 0201 	ands.w	r2, r3, #1
 800969a:	d00a      	beq.n	80096b2 <__swsetup_r+0x9a>
 800969c:	2200      	movs	r2, #0
 800969e:	60a2      	str	r2, [r4, #8]
 80096a0:	6962      	ldr	r2, [r4, #20]
 80096a2:	4252      	negs	r2, r2
 80096a4:	61a2      	str	r2, [r4, #24]
 80096a6:	6922      	ldr	r2, [r4, #16]
 80096a8:	b942      	cbnz	r2, 80096bc <__swsetup_r+0xa4>
 80096aa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80096ae:	d1c5      	bne.n	800963c <__swsetup_r+0x24>
 80096b0:	bd38      	pop	{r3, r4, r5, pc}
 80096b2:	0799      	lsls	r1, r3, #30
 80096b4:	bf58      	it	pl
 80096b6:	6962      	ldrpl	r2, [r4, #20]
 80096b8:	60a2      	str	r2, [r4, #8]
 80096ba:	e7f4      	b.n	80096a6 <__swsetup_r+0x8e>
 80096bc:	2000      	movs	r0, #0
 80096be:	e7f7      	b.n	80096b0 <__swsetup_r+0x98>
 80096c0:	20000030 	.word	0x20000030

080096c4 <_raise_r>:
 80096c4:	291f      	cmp	r1, #31
 80096c6:	b538      	push	{r3, r4, r5, lr}
 80096c8:	4605      	mov	r5, r0
 80096ca:	460c      	mov	r4, r1
 80096cc:	d904      	bls.n	80096d8 <_raise_r+0x14>
 80096ce:	2316      	movs	r3, #22
 80096d0:	6003      	str	r3, [r0, #0]
 80096d2:	f04f 30ff 	mov.w	r0, #4294967295
 80096d6:	bd38      	pop	{r3, r4, r5, pc}
 80096d8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80096da:	b112      	cbz	r2, 80096e2 <_raise_r+0x1e>
 80096dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80096e0:	b94b      	cbnz	r3, 80096f6 <_raise_r+0x32>
 80096e2:	4628      	mov	r0, r5
 80096e4:	f000 f830 	bl	8009748 <_getpid_r>
 80096e8:	4622      	mov	r2, r4
 80096ea:	4601      	mov	r1, r0
 80096ec:	4628      	mov	r0, r5
 80096ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80096f2:	f000 b817 	b.w	8009724 <_kill_r>
 80096f6:	2b01      	cmp	r3, #1
 80096f8:	d00a      	beq.n	8009710 <_raise_r+0x4c>
 80096fa:	1c59      	adds	r1, r3, #1
 80096fc:	d103      	bne.n	8009706 <_raise_r+0x42>
 80096fe:	2316      	movs	r3, #22
 8009700:	6003      	str	r3, [r0, #0]
 8009702:	2001      	movs	r0, #1
 8009704:	e7e7      	b.n	80096d6 <_raise_r+0x12>
 8009706:	2100      	movs	r1, #0
 8009708:	4620      	mov	r0, r4
 800970a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800970e:	4798      	blx	r3
 8009710:	2000      	movs	r0, #0
 8009712:	e7e0      	b.n	80096d6 <_raise_r+0x12>

08009714 <raise>:
 8009714:	4b02      	ldr	r3, [pc, #8]	@ (8009720 <raise+0xc>)
 8009716:	4601      	mov	r1, r0
 8009718:	6818      	ldr	r0, [r3, #0]
 800971a:	f7ff bfd3 	b.w	80096c4 <_raise_r>
 800971e:	bf00      	nop
 8009720:	20000030 	.word	0x20000030

08009724 <_kill_r>:
 8009724:	b538      	push	{r3, r4, r5, lr}
 8009726:	2300      	movs	r3, #0
 8009728:	4d06      	ldr	r5, [pc, #24]	@ (8009744 <_kill_r+0x20>)
 800972a:	4604      	mov	r4, r0
 800972c:	4608      	mov	r0, r1
 800972e:	4611      	mov	r1, r2
 8009730:	602b      	str	r3, [r5, #0]
 8009732:	f7f9 f8aa 	bl	800288a <_kill>
 8009736:	1c43      	adds	r3, r0, #1
 8009738:	d102      	bne.n	8009740 <_kill_r+0x1c>
 800973a:	682b      	ldr	r3, [r5, #0]
 800973c:	b103      	cbz	r3, 8009740 <_kill_r+0x1c>
 800973e:	6023      	str	r3, [r4, #0]
 8009740:	bd38      	pop	{r3, r4, r5, pc}
 8009742:	bf00      	nop
 8009744:	20000938 	.word	0x20000938

08009748 <_getpid_r>:
 8009748:	f7f9 b898 	b.w	800287c <_getpid>

0800974c <__swhatbuf_r>:
 800974c:	b570      	push	{r4, r5, r6, lr}
 800974e:	460c      	mov	r4, r1
 8009750:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009754:	4615      	mov	r5, r2
 8009756:	2900      	cmp	r1, #0
 8009758:	461e      	mov	r6, r3
 800975a:	b096      	sub	sp, #88	@ 0x58
 800975c:	da0c      	bge.n	8009778 <__swhatbuf_r+0x2c>
 800975e:	89a3      	ldrh	r3, [r4, #12]
 8009760:	2100      	movs	r1, #0
 8009762:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009766:	bf14      	ite	ne
 8009768:	2340      	movne	r3, #64	@ 0x40
 800976a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800976e:	2000      	movs	r0, #0
 8009770:	6031      	str	r1, [r6, #0]
 8009772:	602b      	str	r3, [r5, #0]
 8009774:	b016      	add	sp, #88	@ 0x58
 8009776:	bd70      	pop	{r4, r5, r6, pc}
 8009778:	466a      	mov	r2, sp
 800977a:	f000 f849 	bl	8009810 <_fstat_r>
 800977e:	2800      	cmp	r0, #0
 8009780:	dbed      	blt.n	800975e <__swhatbuf_r+0x12>
 8009782:	9901      	ldr	r1, [sp, #4]
 8009784:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009788:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800978c:	4259      	negs	r1, r3
 800978e:	4159      	adcs	r1, r3
 8009790:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009794:	e7eb      	b.n	800976e <__swhatbuf_r+0x22>

08009796 <__smakebuf_r>:
 8009796:	898b      	ldrh	r3, [r1, #12]
 8009798:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800979a:	079d      	lsls	r5, r3, #30
 800979c:	4606      	mov	r6, r0
 800979e:	460c      	mov	r4, r1
 80097a0:	d507      	bpl.n	80097b2 <__smakebuf_r+0x1c>
 80097a2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80097a6:	6023      	str	r3, [r4, #0]
 80097a8:	6123      	str	r3, [r4, #16]
 80097aa:	2301      	movs	r3, #1
 80097ac:	6163      	str	r3, [r4, #20]
 80097ae:	b003      	add	sp, #12
 80097b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097b2:	466a      	mov	r2, sp
 80097b4:	ab01      	add	r3, sp, #4
 80097b6:	f7ff ffc9 	bl	800974c <__swhatbuf_r>
 80097ba:	9f00      	ldr	r7, [sp, #0]
 80097bc:	4605      	mov	r5, r0
 80097be:	4639      	mov	r1, r7
 80097c0:	4630      	mov	r0, r6
 80097c2:	f7fd f9d9 	bl	8006b78 <_malloc_r>
 80097c6:	b948      	cbnz	r0, 80097dc <__smakebuf_r+0x46>
 80097c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097cc:	059a      	lsls	r2, r3, #22
 80097ce:	d4ee      	bmi.n	80097ae <__smakebuf_r+0x18>
 80097d0:	f023 0303 	bic.w	r3, r3, #3
 80097d4:	f043 0302 	orr.w	r3, r3, #2
 80097d8:	81a3      	strh	r3, [r4, #12]
 80097da:	e7e2      	b.n	80097a2 <__smakebuf_r+0xc>
 80097dc:	89a3      	ldrh	r3, [r4, #12]
 80097de:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80097e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80097e6:	81a3      	strh	r3, [r4, #12]
 80097e8:	9b01      	ldr	r3, [sp, #4]
 80097ea:	6020      	str	r0, [r4, #0]
 80097ec:	b15b      	cbz	r3, 8009806 <__smakebuf_r+0x70>
 80097ee:	4630      	mov	r0, r6
 80097f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80097f4:	f000 f81e 	bl	8009834 <_isatty_r>
 80097f8:	b128      	cbz	r0, 8009806 <__smakebuf_r+0x70>
 80097fa:	89a3      	ldrh	r3, [r4, #12]
 80097fc:	f023 0303 	bic.w	r3, r3, #3
 8009800:	f043 0301 	orr.w	r3, r3, #1
 8009804:	81a3      	strh	r3, [r4, #12]
 8009806:	89a3      	ldrh	r3, [r4, #12]
 8009808:	431d      	orrs	r5, r3
 800980a:	81a5      	strh	r5, [r4, #12]
 800980c:	e7cf      	b.n	80097ae <__smakebuf_r+0x18>
	...

08009810 <_fstat_r>:
 8009810:	b538      	push	{r3, r4, r5, lr}
 8009812:	2300      	movs	r3, #0
 8009814:	4d06      	ldr	r5, [pc, #24]	@ (8009830 <_fstat_r+0x20>)
 8009816:	4604      	mov	r4, r0
 8009818:	4608      	mov	r0, r1
 800981a:	4611      	mov	r1, r2
 800981c:	602b      	str	r3, [r5, #0]
 800981e:	f7f9 f893 	bl	8002948 <_fstat>
 8009822:	1c43      	adds	r3, r0, #1
 8009824:	d102      	bne.n	800982c <_fstat_r+0x1c>
 8009826:	682b      	ldr	r3, [r5, #0]
 8009828:	b103      	cbz	r3, 800982c <_fstat_r+0x1c>
 800982a:	6023      	str	r3, [r4, #0]
 800982c:	bd38      	pop	{r3, r4, r5, pc}
 800982e:	bf00      	nop
 8009830:	20000938 	.word	0x20000938

08009834 <_isatty_r>:
 8009834:	b538      	push	{r3, r4, r5, lr}
 8009836:	2300      	movs	r3, #0
 8009838:	4d05      	ldr	r5, [pc, #20]	@ (8009850 <_isatty_r+0x1c>)
 800983a:	4604      	mov	r4, r0
 800983c:	4608      	mov	r0, r1
 800983e:	602b      	str	r3, [r5, #0]
 8009840:	f7f9 f891 	bl	8002966 <_isatty>
 8009844:	1c43      	adds	r3, r0, #1
 8009846:	d102      	bne.n	800984e <_isatty_r+0x1a>
 8009848:	682b      	ldr	r3, [r5, #0]
 800984a:	b103      	cbz	r3, 800984e <_isatty_r+0x1a>
 800984c:	6023      	str	r3, [r4, #0]
 800984e:	bd38      	pop	{r3, r4, r5, pc}
 8009850:	20000938 	.word	0x20000938

08009854 <_init>:
 8009854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009856:	bf00      	nop
 8009858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800985a:	bc08      	pop	{r3}
 800985c:	469e      	mov	lr, r3
 800985e:	4770      	bx	lr

08009860 <_fini>:
 8009860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009862:	bf00      	nop
 8009864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009866:	bc08      	pop	{r3}
 8009868:	469e      	mov	lr, r3
 800986a:	4770      	bx	lr
